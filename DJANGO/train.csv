nl,code
define the method i with an argument self.,def i ( self ) :
"if out has an 'isatty' argument and return value of the function out.isatty is true,","if hasattr ( out , 'isatty' ) and out . isatty ( ) :"
"if ValueError exception is caught,",except ValueError :
"raise an ValueError exception with an argument string ""Base36 conversion input too large."".","raise ValueError ( ""Base36 conversion input too large."" )"
return is empty dictionary.,return { }
"get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.",connection = connections [ options [ 'database' ] ]
"if out_log is true,",if out_log :
substitute model._meta.app_label for app.,app = model . _meta . app_label
define the method __nonzero__ with an argument self.,def __nonzero__ ( self ) :
from django.db.migrations.loader import MigrationLoader into default name space.,from django . db . migrations . loader import MigrationLoader
"call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,","if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :"
from django.conf import settings into default name space.,from django . conf import settings
define the method as_bytes with arguments self and unixfrom set to boolean False.,"def as_bytes ( self , unixfrom = False ) :"
"define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
"HITS and MISSES are integer 0 and 1, respectively.","HITS , MISSES = 0 , 1"
"if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.",return key in caches [ DEFAULT_CACHE_ALIAS ]
substitute asvar for self.asvar.,self . asvar = asvar
"raise an TypeError with an argument string ""update expected at most 1 arguments, got %d"" formated with length of args.","raise TypeError ( ""update expected at most 1 arguments, got %d"" % len ( args ) )"
define the method getlist with 2 arguments: self and key.,"def getlist ( self , key ) :"
"call the function _add_doc with 2 arguments: reraise and string """"""Reraise an exception."""""".","_add_doc ( reraise , """"""Reraise an exception."""""" )"
if encoding does not exists substitute it for settings.DEFAULT_CHARSET.,encoding = encoding or settings . DEFAULT_CHARSET
"call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.",self . html_initial_id = form . add_initial_prefix ( self . auto_id )
define the method start_serialization with an argument self.,def start_serialization ( self ) :
"if result is not None,",if result is not None :
convert host to lowercase.,host = host . lower ( )
"for every var in self.vars,",for var in self . vars :
call the method parser.skip_past with an argument string 'endcomment'.,parser . skip_past ( 'endcomment' )
call the method parser.delete_first_token.,parser . delete_first_token ( )
"if model_identifier is false,",if not model_identifier :
"get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,","return type ( form ) ( class_name , ( form , ) , form_class_attrs )"
"__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',","__all__ = [ 'CheckMessage' , 'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' , 'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' , 'register' , 'run_checks' , 'tag_exists' , 'Tags' , ]"
substitute params for self.params.,self . params = params
"' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'. derive the class Choice from list base class.",class Choice ( list ) :
return boolean False.,return False
return boolean True.,return True
return the result. define the method id_for_label with 2 arguments: self and id_.,"def id_for_label ( self , id_ ) :"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',","parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' , help = 'Fixture labels.' )"
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.,"self . setFeature ( handler . feature_external_pes , False )"
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
"if not,",else :
"call the function warnings.warn with 2 arguments: string '""requires_model_validation"" is deprecated '","warnings . warn ( '""requires_model_validation"" is deprecated ' 'in favor of ""requires_system_checks"".' , RemovedInDjango19Warning )"
return nothing.,return
"if NotImplementedError exception is caught,",except NotImplementedError :
"if current_len is smaller than or equal to length,",if current_len <= length :
"otherwise if msg and visible_issue_count are true,",elif msg and visible_issue_count :
append value to self.dicts list.,self . dicts . append ( value )
"if confirm equals string 'yes',",if confirm == 'yes' :
"if kwarg_format is true,",if kwarg_format :
"format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,","output . append ( normal_row % { 'errors' : force_text ( bf_errors ) , 'label' : force_text ( label ) , 'field' : six . text_type ( bf ) , 'help_text' : help_text , 'html_class_attr' : html_class_attr , 'field_name' : bf . html_name , } )"
"if self.activated is boolean False,",if not self . activated :
do nothing.,pass
content_length is None.,content_length = None
define the method __init__ with 2 arguments: self and token.,"def __init__ ( self , tokens ) :"
"split locale by '_', append the first element of the result to locales.",locales . append ( locale . split ( '_' ) [ 0 ] )
substitute var for self.var.,self . var = var
define the method __iter__ with an argument self.,def __iter__ ( self ) :
""" * The database isn't running or isn't configured correctly.\n * At least one of the expected database tables doesn't exist.\n"" "" * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"" ""The full error: %s"", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e. call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,","six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )"
"return the result. if UnicodeDecodeError exception is caught,",except UnicodeDecodeError :
"if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,",if indexes [ column_name ] [ 'primary_key' ] :
"define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,","def build_request_repr ( request , path_override = None , GET_override = None , POST_override = None , COOKIES_override = None , META_override = None ) :"
"evaluate the method type(self).__bool__ with argument self, return the result.",return type ( self ) . __bool__ ( self )
"call the form.is_valid method, if it evaluates to false,",if not form . is_valid ( ) :
import module sys.,import sys
"increment s_len by integer 1,",s_len += 1
call the function get_urlconf with an argument urlconf.,urlconf = get_urlconf ( )
from email.mime.message import MIMEMessage into default name space.,from email . mime . message import MIMEMessage
"return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.","return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )"
"if not,",else :
"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the ""default"" database.' call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',","parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' , default = None , help = 'Only look for fixtures in the specified app.' )"
"__version__ is a string ""1.6.1"".","__version__ = ""1.6.1"""
"call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.","return super ( FileInput , self ) . render ( name , None , attrs = attrs )"
"convert priority into a floating point integer, substitute it for priority.",priority = float ( priority )
define the function resolve with arguments path and urlconf set to None.,"def resolve ( path , urlconf = None ) :"
derive the class File from the FileProxyMixin base class.,class File ( FileProxyMixin ) :
"if not,",else :
"__author__ is a string ""Benjamin Peterson <benjamin@python.org>"".","__author__ = ""Benjamin Peterson <benjamin@python.org>"""
call the method __init__ with an argument name form the base class of the class MovedAttribute.,"super ( MovedAttribute , self ) . __init__ ( name )"
"if use_natural_keys is true,",if use_natural_keys :
define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
"if not,",else :
define the method __repr__ with an argument self.,def __repr__ ( self ) :
import module warnings.,import warnings
import module threading.,import threading
"return an empty string,",return ''
"if attrs is None,",if attrs is None :
return an empty string.,return ''
raise an ValueError exception with an argument e.,raise ValueError ( e )
"call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.","return urlquote ( value , ** kwargs )"
"substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively. if DatabaseError exception is caught,",except DatabaseError :
define the function do_filter with 2 arguments: parser and token.,"def do_filter ( parser , token ) :"
fp is a instance of a class six.BytesIO.,fp = six . BytesIO ( )
"try,",try :
"register.tag decorator,",@ register . tag
"call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.","return self . format ( 'D, j M Y H:i:s O' )"
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.,"class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :"
"substitute it for value of dictionary response under the key 'Vary'. define function has_vary_header, with response and header_query as arguments.","def has_vary_header ( response , header_query ) :"
"extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',","extension_map = { '.tar' : TarArchive , '.tar.bz2' : TarArchive , '.tar.gz' : TarArchive , '.tgz' : TarArchive , '.tz2' : TarArchive , '.zip' : ZipArchive , }"
"for every app_config in return value of the method apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
"while x is greater than zero,",while x > 0 :
"if length of name is greater than integer 255,",if len ( name ) > 255 :
"bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.",MAXSIZE = int ( ( 1 << 31 ) - 1 )
add params to extra_params dictionary.,extra_params . update ( params )
"self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,",self . field . choice_cache = [ self . choice ( obj ) for obj in self . queryset . all ( ) ]
update defaults dictionary with kwargs.,defaults . update ( kwargs )
"matches is boolean True,",matches = True
derive the class EmailMultiAlternatives from the EmailMessage base class.,class EmailMultiAlternatives ( EmailMessage ) :
"call the function get_commands, substitute it for commands.",commands = get_commands ( )
define the method get_connection with arguments self and fail_silently set to boolean False.,"def get_connection ( self , fail_silently = False ) :"
"if not,",else :
from functools import update_wrapper.,from functools import update_wrapper
get is a string '<could not parse>'.,get = '<could not parse>'
"if not,",else :
"from django.template.base import Variable, Library and VariableDoesNotExist into default name space.","from django . template . base import Variable , Library , VariableDoesNotExist"
define the function reset_translation.,def reset_translations ( ) :
"try,",try :
define the method regex with an argument self.,def regex ( self ) :
return settings.TEMPLATE_STRING_IF_INVALID.,return settings . TEMPLATE_STRING_IF_INVALID
"call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.","closing_tag , tagname , self_closing = tag . groups ( )"
return settings.LANGUAGE_CODE.,return settings . LANGUAGE_CODE
from django.template.base import TemplateDoesNotExist into default name space.,from django . template . base import TemplateDoesNotExist
"get the value under the key key of the self.find_template_cache dictionary, substitute it for result.",result = self . find_template_cache [ key ]
"result of the function force_text with an argument option_label, return the result. define the method render_options with 3 arguments: self, choices and selected_choices.","def render_options ( self , choices , selected_choices ) :"
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.","post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]"
substitute self.max_value for the value under the 'max' key of the attrs dictionary.,attrs [ 'max' ] = self . max_value
"convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,","base , tail_ext = os . path . splitext ( filename . lower ( ) )"
define the method empty_variable with 2 arguments: self and token.,"def empty_variable ( self , token ) :"
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.,raise TypeError ( 'Level not an integer or a ' 'valid string: %r' % level )
"get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.",cycle_iter = context . render_context [ self ]
flush the output buffer of the self.stdout object.,self . stdout . flush ( )
derive the class SerializationError from the Exception base class.,class SerializationError ( Exception ) :
"call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.","BaseCache . __init__ ( self , * args , ** kwargs )"
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
"assign it to value under the string "".moves.urllib_robotparser"" appended to __name__ key of the sys.modules dictionary, and to value under the string "".moves.urllib.robotparser"" appended to __name__ key of the sys.modules dictionary. derive class Module_six_moves_urllib from the types.ModuleType base class.",class Module_six_moves_urllib ( types . ModuleType ) :
"substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.",value = '%s %s' % tuple ( value )
delete Trans.,del Trans
"and integer 60, substitute the result for timezone. divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.","hour , minute = divmod ( timezone , 60 )"
"call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,",return bytes ( value . encode ( self . _charset ) )
"break from the loop execution,",break
"convert tagname to lowercase, substitute it for tagname.",tagname = tagname . lower ( )
"if self.is_bound is false,",if not self . is_bound :
"if not,",else :
"call the get_script_name function with environ as argument, substitute the result for script_name.",script_name = get_script_name ( environ )
"if domain equals a string 'djangojs' and file_ext is contained in command.extensions,",if domain == 'djangojs' and file_ext in command . extensions :
return value.,return value
"with an argument i, append the result to a list, substitute the resulting list for forms. return forms.",return forms
use the global variable _serializers.,global _serializers
substitute ending for self.ending.,self . ending = ending
"get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.",block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
derive the class VariableDoesNotExist form the base class Exception.,class VariableDoesNotExist ( Exception ) :
"if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,","if ( isinstance ( fp , file ) and isinstance ( data , unicode ) and fp . encoding is not None ) :"
call the function _load_serializers.,_load_serializers ( )
define the method changed_data with an argument self.,def changed_data ( self ) :
"and ip_address_validator_map converted to a list, respectively. call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.","comma_separated_int_list_re = re . compile ( '^[\d,]+$' )"
define the method __init__ with arguments: self and options set to None.,"def __init__ ( self , options = None ) :"
"if elt is an instance of NonCapture class,","if isinstance ( elt , NonCapture ) :"
append decimals to parts.,parts . append ( decimals )
"call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.",data = serializer ( ) . dumps ( obj )
"evaluate the method self._cache.decr with key and negative delta as arguments, return the result.","return self . _cache . decr ( key , - delta )"
"substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.","self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false"
"for every label in labels,",for label in labels :
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.,class InvalidCacheBackendError ( ImproperlyConfigured ) :
"if result is not None,",if result is not None :
"define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.","def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :"
status_code is an integer 405.,status_code = 405
self.second is None.,self . second = None
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.,"f . save_form_data ( instance , cleaned_data [ f . name ] )"
"get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.","return getattr ( _urlconfs , ""value"" , default )"
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.",raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' )
substitute tempfile.gettempdir for gettempdir.,gettempdir = tempfile . gettempdir
define the method __init__ with 2 arguments: self and attrs set to None.,"def __init__ ( self , attrs = None ) :"
"paths is a list containing results of the function force_text called with an argument p, for every p in paths.",paths = [ force_text ( p ) for p in paths ]
from unittest import import everything.,from unittest import *
read chunk_size bytes from file and store it in data.,data = file . read ( chunk_size )
"for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.","for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :"
"for every obj in result of the method self.queryset.all. for every choice in self.field.choice_cache,",for choice in self . field . choice_cache :
"if ValueError, TypeError or ValidationError exception is caught,","except ( ValueError , TypeError , ValidationError ) :"
"_meth_self is a string ""__self__"".","_meth_self = ""__self__"""
"append it to the string "" Target specific migration: "", use it as the argument for the call to the self.style.MIGRATE_LABEL method, call the self.stdout.write method with previous return value as an argument. if run_syncdb and executor.loader.unmigrated_apps is true,",if run_syncdb and executor . loader . unmigrated_apps :
raise an exception.,raise
define the method __getitem__ with 2 arguments: self and idx.,"def __getitem__ ( self , idx ) :"
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.,self . cookies = SimpleCookie ( self . cookies )
"define the method __init__ with 4 arguments: self, form, field and name.","def __init__ ( self , form , field , name ) :"
"call the method match.groupdict, substitute the result for kw.",kw = match . groupdict ( )
define the method __bool__ with an argument self.,def __bool__ ( self ) :
"if InvalidTemplateLibrary, renamed to e, exception is caught,",except InvalidTemplateLibrary as e :
define the function F with an argument i.,def F ( i ) :
"if 'media' is not contained in attrs,",if 'media' not in attrs :
"if LookupError exception is caught,",except LookupError :
"if initial is None,",if initial is None :
"from django.utils import iri_to_uri, force_bytes, force_text to the default name space.","from django . utils . encoding import iri_to_uri , force_bytes , force_text"
derive the class StreamingBuffer from the object base class.,class StreamingBuffer ( object ) :
"call the method e.encode with an argument string ""latin-1"".","return s . encode ( ""latin-1"" )"
"return boolean False,",return False
"for every code in tuple with 2 elements: lang_code and generic_lang_code,","for code in ( lang_code , generic_lang_code ) :"
"try,",try :
if language_code is not containsed in self._app_dict,if language_code not in self . _app_dict :
"subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,",name = name [ : 255 - len ( ext ) ] + ext
matches is boolean False.,matches = False
substitute value under idx key of dictionary d for d.,d = d [ idx ]
"call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,","return date ( datetime . now ( tz = tzinfo ) , self . format_string )"
"if data is None,",if data is None :
match is None.,match = None
ModelFormMetaclass and BaseModelForm. do nothing.,pass
call the function handle_m2m with an argument relobj.,handle_m2m ( relobj )
"if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,",if i < self . initial_form_count ( ) and 'instance' not in kwargs :
derive the class EscapeData from object base class.,class EscapeData ( object ) :
"get the value under the 'exclude' key of the options dictionary, substitute it for exclude.",exclude = options . get ( 'exclude' )
define the method data with an argument self.,def data ( self ) :
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.,from IPython . frontend . terminal . ipapp import TerminalIPythonApp
"request_repr is a string ""unavailable"".","request_repr = ""unavailable"""
return integer 1.,return 1
"value under the 'feed_url' key of the self.feed dictionary for 'href'. if value under the 'language' key of the self.feed dictionary is not None,",if self . feed [ 'language' ] is not None :
from threading import local into default name space.,from threading import local
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
from django.conf import settings into default name space.,from django . conf import settings
"call the function force_text with an argument s, strip the result of whitespaces from both ends,","s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )"
define the method indent with argument self and level.,"def indent ( self , level ) :"
"if root is true,",if root :
"raise a ValueError exception with an argument string ""JSON can't represent timezone-aware times."".","raise ValueError ( ""JSON can't represent timezone-aware times."" )"
yield key and value under the key key of self dictionary.,"yield key , self [ key ]"
"if type of result is ConvertingDict, ConvertingList or ConvertingTuple,","if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :"
"initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,","return InMemoryUploadedFile ( file = self . file , field_name = self . field_name , name = self . file_name , content_type = self . content_type , size = file_size , charset = self . charset , content_type_extra = self . content_type_extra )"
"call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.",self . STDOFFSET = timedelta ( seconds = - _time . timezone )
from django.conf import settings into default name space.,from django . conf import settings
"substitute format for self.format if format is true, if not self.format is None.",self . format = format if format else None
"call the file.__exit__ method on self with exc, value and tb as the arguments.","self . file . __exit__ ( exc , value , tb )"
substitute form.instance for obj.,obj = form . instance
"if can_fail is true,",if can_fail :
"call the function exec_ with an argument string """"""def reraise(tp, value, tb=None): raise tp, value, tb"""""".","exec_ ( """"""def reraise(tp, value, tb=None): raise tp, value, tb """""" )"
"define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.","def salted_hmac ( key_salt , value , secret = None ) :"
"convert name to lower case if it equals to string 'from' or 'to,","if name . lower ( ) in ( 'from' , 'to' ) :"
"if ret equals to integer 0, return boolean True, otherwise return boolean False.",return ( ret == 0 )
"if first element of data_list is contained in self.empty_values,",if data_list [ 0 ] in self . empty_values :
substitute self.__class__ for response._handler_class.,response . _handler_class = self . __class__
call the method self.end_object with an argument obj.,self . end_object ( obj )
"substitute the '%s' with table and list containing key, respectively. return default.",return default
"if self.forms is true,",if self . forms :
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
define the method upload_handlers with arguments: self and upload_handlers.,"def upload_handlers ( self , upload_handlers ) :"
"if AttributeError exception is caught,",except AttributeError :
substitute state for self.state.,self . state = state
"divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.",self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
from django.conf import settings into default name space.,from django . conf import settings
"define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"try,",try :
"define method set_cdata_mode, with self class instance and tag as the arguments.","def set_cdata_mode ( self , tag ) :"
"if instance is None,",if instance is None :
return boolean False.,return False
append tuple with 2 elements: migration.app_label and migration.name to replaces.,"replaces . append ( ( migration . app_label , migration . name ) )"
"if response has an attribute 'render' and response.render is a callable object,","if hasattr ( response , 'render' ) and callable ( response . render ) :"
"write string ""Performing system checks...\n\n"" to self.stdout stream.","self . stdout . write ( ""Performing system checks...\n\n"" )"
define the function extract with 2 arguments path and to_path set to empty string.,"def extract ( path , to_path = '' ) :"
"call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.",final_attrs = self . build_attrs ( attrs )
"define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.","def construct_instance ( form , instance , fields = None , exclude = None ) :"
"call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6, and threading set to threading.","run ( self . addr , int ( self . port ) , handler , ipv6 = self . use_ipv6 , threading = threading )"
"if self._done is true,",if self . _done :
dklen is None.,dklen = None
"if values has an attribute '__len__',","if not hasattr ( values , '__len__' ) :"
import module errno.,import errno
locales is a difference between the locales and exclude sets.,locales = set ( locales ) - set ( exclude )
"call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.",self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
import module re.,import re
call the self.setup_environ method.,self . setup_environ ( )
"try,",try :
"for every locale in locales,",for locale in locales :
"try,",try :
"if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.",self . key = key or settings . SECRET_KEY
"if length of app_labels is greater than integer 1 and primary_keys is true,",if len ( app_labels ) > 1 and primary_keys :
"if PY3 is true,",if PY3 :
"return a dictionary with an entry: self.ns for ""xmlns"".","return { ""xmlns"" : self . ns }"
"if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,",if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
"if self.message_context is true,",if self . message_context :
"if close is True,",if close :
"define the function dec with an argument func,",def dec ( func ) :
return data.,return data
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.,Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
"call the method clear from the base class of the class QueryDict, return the result.","super ( QueryDict , self ) . clear ( )"
"call the function to_python with an argument pk, substitute the result for pk.",pk = to_python ( pk )
from itertools import chain into default name space.,from itertools import chain
"if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,",if field != NON_FIELD_ERRORS and field not in self . fields :
define the method remove_potfiles with an argument self.,def remove_potfiles ( self ) :
"if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys. remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,","self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )"
define the method exit_command with an argument self.,def exit_command ( self ) :
"if max_num is None,",if max_num is None :
return settings.LANGUAGE_CODE.,return settings . LANGUAGE_CODE
"define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.","def literals ( choices , prefix = """" , suffix = """" ) :"
"if self.merge and conflicts are both true,",if self . merge and conflicts :
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
if attr is an instance of MovedModule.,"if isinstance ( attr , MovedModule ) :"
"evaluates to true, call the function select_template with an argument file_name, substitute the result for t.",t = select_template ( file_name )
"default string value, substitute it for value. return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).",return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
"if ch is not equal to a sring '?' or escaped is true,",if ch != '?' or escaped :
return errors.,return errors
"otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,",elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
"call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.","final_attrs = self . build_attrs ( attrs , name = name )"
"crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,","changes = dict ( ( app , [ Migration ( ""custom"" , app ) ] ) for app in app_labels )"
"and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code, and self.inverse_match equals to other.inverse_match, return the result. define the method __ne__ with arguments self and other.","def __ne__ ( self , other ) :"
"CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget, SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION. from django.utils import formats into default name space.",from django . utils import formats
substitute whitelist for self.domain_whitelist.,self . domain_whitelist = whitelist
"call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,","result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )"
"if not,",else :
_empty_value is an empty list.,_empty_value = [ ]
return output.,return output
"and absolute value of p, substitute the result for exp. try,",try :
"if stream_or_string is an instance of bytes,","if isinstance ( stream_or_string , bytes ) :"
call the self.clear method.,self . clear ( )
"substitute the result for args and kwargs. return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.","return AssignmentNode ( takes_context , args , kwargs , target_var )"
"return _translations dictionary value, under the language key.",return _translations [ language ]
"if not,",else :
"for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.",forms = ' ' . join ( form . as_ul ( ) for form in self )
"call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.",self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
substitute value under the key key of self dictionary for val.,val = self [ key ]
"if not,",else :
from django.utils.functional import allow_lazy into default name space.,from django . utils . functional import allow_lazy
"raise an TemplateSyntaxError exception with an argument string ""Second (optional) argument to %s tag must be 'parsed'"",","raise TemplateSyntaxError ( ""Second (optional) argument to %s tag"" "" must be 'parsed'"" % bits [ 0 ] )"
"if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,",if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :
and only if self.match is None or return value of the method self.match_re.search called with an argument f is true. append a tuple containing 2 elements: full_file and f to self.choices list.,"self . choices . append ( ( full_file , f ) )"
append loader to loaders.,loaders . append ( loader )
"remove kwargs dictionary element under the 'method' key, substitute it for method.",method = kwargs . pop ( 'method' )
define the method add_arguments with arguments self and parser.,"def add_arguments ( self , parser ) :"
"call the method token.split_contents, substitute the result.",bits = token . split_contents ( )
"raise an AttributeError exception with string ""Unable to determine the file's size."" as argument.","raise AttributeError ( ""Unable to determine the file's size."" )"
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
self.items is an empty list.,self . items = [ ]
define the method stringfilter with an argument func.,def stringfilter ( func ) :
"call the function inline_re.match with an argument t.contents, substitute the result for imatch.",imatch = inline_re . match ( t . contents )
define the function gettext with an argument message.,def gettext ( message ) :
"default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the ""default"" database.'. define the method handle with arguments self and unpacked dictionary options.","def handle ( self , ** options ) :"
sys.stderr is an instance of NullDevice class.,sys . stderr = NullDevice ( )
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,","zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )"
"try,",try :
"__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',","__all__ = [ 'activate' , 'deactivate' , 'override' , 'deactivate_all' , 'get_language' , 'get_language_from_request' , 'get_language_info' , 'get_language_bidi' , 'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' , 'gettext' , 'gettext_lazy' , 'gettext_noop' , 'ugettext' , 'ugettext_lazy' , 'ugettext_noop' , 'ngettext' , 'ngettext_lazy' , 'ungettext' , 'ungettext_lazy' , 'pgettext' , 'pgettext_lazy' , 'npgettext' , 'npgettext_lazy' , 'LANGUAGE_SESSION_KEY' , ]"
"for every pk in value,",for pk in value :
"raise an CommandError exception with an argument string ""You can only use --pks option with one model"".","raise CommandError ( ""You can only use --pks option with one model"" )"
"for every sql in index_sql,",for sql in index_sql :
"if elt is an instance of six.string_types class,","if isinstance ( elt , six . string_types ) :"
append filename to _error_files.,_error_files . append ( filename )
substitute file for filename.,filename = file
return value.,return value
"call the connection.introspection.table_names with tables as argument, store the result in seen_models.",seen_models = connection . introspection . installed_models ( tables )
"if urlconf_name is true,",if urlconf_name :
"from django.conf import urls into default name space,",from django . conf import urls
"substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary. for every field in unique_check,",for field in unique_check :
"if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.",return base_lang in settings . LANGUAGES_BIDI
"convert max_value into an floating point number, substitute it for max_value.",max_value = float ( max_value )
"return a list containing return values of the function to_py called with an argument val, for every val in value.",return [ to_py ( val ) for val in value ]
from django.utils import six and lru_cache into default name space.,"from django . utils import six , lru_cache"
import module warnings.,import warnings
"return the string 'ValidationError(%s)', replace '%s' with self.",return 'ValidationError(%s)' % self
lexer is an instance of JsLexer class.,lexer = JsLexer ( )
"for every form in self call the form.as_table method, join the results in a string, separated by an empty string.",forms = ' ' . join ( form . as_table ( ) for form in self )
"call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.","fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )"
call the method notifier.read_events.,notifier . read_events ( )
return an string '0'.,return '0'
"if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.",utc = pytz . utc if pytz else UTC ( )
return data.,return data
"where '%s' is replaced with first element of bits. call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.",viewname = parser . compile_filter ( bits [ 1 ] )
"for every k2 and v2 in v,","for k2 , v2 in v :"
"if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,","if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :"
append a tuple with 2 elements: f.name and formfield to field_list.,"field_list . append ( ( f . name , formfield ) )"
return host.,return host
from io import StringIO into default name space.,from io import StringIO
"if not,",else :
return attrs.,return attrs
"if host ends with '.', remove the last element from host.",host = host [ : - 1 ] if host . endswith ( '.' ) else host
"if not,",else :
"call the method self._coerce with an argument value, return the result.",return self . _coerce ( value )
"substitute '%s' in string ""No changes detected in app '%s'"" with the result of the method app_labels.pop, write it to self.stdout.","self . stdout . write ( ""No changes detected in app '%s'"" % app_labels . pop ( ) )"
"if decimals is greater than digits,",if decimals > digits :
"if self.no_obsolete is true,",if self . no_obsolete :
from django.utils.text import unescape_entities into default name space.,from django . utils . text import unescape_entities
"define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.","def __init__ ( self , view_name , args , kwargs , asvar ) :"
self._post_render_callbacks is an empty list.,self . _post_render_callbacks = [ ]
"call the function mark_for_escaping with an argument value, return the result.",return mark_for_escaping ( value )
call the method cursor.execute with an argument line.,cursor . execute ( line )
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.,"from django . core . servers . basehttp import run , get_internal_wsgi_application"
"if not,",else :
"if self.instance.pk is None,",if self . instance . pk is None :
"convert value into an string, convert the result into an integer and substitute it for value.",value = int ( str ( value ) )
"call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.","compiled_regex = re . compile ( regex , re . UNICODE )"
logger.propagate is boolean True.,logger . propagate = True
define the function request with an argument request.,def request ( request ) :
"if callback is an callable object,",if callable ( callback ) :
from django.conf import settings into default name space.,from django . conf import settings
define the method add_arguments with self and parser as arguments.,"def add_arguments ( self , parser ) :"
"try,",try :
"separated by result of the function _ called with an argument string ', ', for every i in list_ without last element, result of the function force_text called with an argument last_word, result of the function force_text called with an argument: last element of list_. call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.","get_text_list = allow_lazy ( get_text_list , six . text_type )"
"if m is true,",if m :
substitute value under 'warning' key of kwargs dictionary for warning.,warning = kwargs [ 'warning' ]
"inverse_match set to None and flags set to None. if regex is not None,",if regex is not None :
pos is equal to integer 0.,pos = 0
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.,raise Resolver404 ( { 'path' : path } )
"if messages is not an instance of the ValidationError class,","if not isinstance ( messages , ValidationError ) :"
"call the method loader.detect_conflicts, substitute the result for conflicts.",conflicts = loader . detect_conflicts ( )
"if call to the function response.has_header with argument 'Vary' returns boolean True,",if response . has_header ( 'Vary' ) :
sup_cls is base class of the class cls.,"sup_cls = super ( cls , self )"
from django.utils.encoding import force_text and filepath_to_uri into default name space.,"from django . utils . encoding import force_text , filepath_to_uri"
"help is a string ""Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."".","help = ""Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."""
"call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.","super ( ComboField , self ) . __init__ ( * args , ** kwargs )"
self._post_parse_error is boolen False.,self . _post_parse_error = False
return value under key key of dict_ dictionary.,return dict_ [ key ]
"try,",try :
return self.object_list element at index.,return self . object_list [ index ]
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","def __init__ ( self , * args , ** kwargs ) :"
position the file pointer at the beginning of self file.,self . seek ( 0 )
import module os.,import os
call the method apps.get_model with an argument model_identifier.,return apps . get_model ( model_identifier )
do nothing.,pass
INFO is integer 20.,INFO = 20
"use the result as an argument for the call to the function mark_safe, return the result. decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.","@ register . filter ( is_safe = True , needs_autoescape = True )"
from django.db.migrations.loader import AmbiguityError into default name space.,from django . db . migrations . loader import AmbiguityError
contains_nontext is boolean False.,contains_nontext = False
"for every arg in the result, if arg is an instance of Promise class,","if isinstance ( arg , Promise ) :"
"for every model in app_models,",for model in app_models :
from django.core.management.color import no_style into default name space.,from django . core . management . color import no_style
"call the method message.message, substitute the result for msg.",msg = message . message ( )
add model to created_models set.,created_models . add ( model )
"call the function force_text with an argument val, if the result is not contained in pks,",if force_text ( val ) not in pks :
define method GET with self class instance as an argument.,def GET ( self ) :
define the method u with an argument self.,def u ( self ) :
"default set to boolean False, help as a string ""Just show what migrations would be made; don't actually write them."". call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',","parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False , help = ""Enable fixing of migration conflicts."" )"
"replace '%s' in string ""%s = %s"" with key and value under the key key of the user_setting dictionary, append it to the output.","output . append ( ""%s = %s"" % ( key , user_settings [ key ] ) )"
substitute the last element of parts for cmp_fmt.,cmp_fmt = parts [ - 1 ]
"call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.","yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )"
substitute smart_text for smart_unicode.,smart_unicode = smart_text
call the BaseCache.__init__ method with self class instance and params as the arguments.,"BaseCache . __init__ ( self , params )"
self._current is None.,self . _current = None
"where '%s' are replaced with name and param. if not,",else :
guid_attrs is an empty dictionary.,guid_attrs = { }
"if not substitute field.initial for initial. call the method filed.clean with arguments value and initial, substitute the result for value.","value = field . clean ( value , initial )"
"try,",try :
"if domain is not None,",if domain is not None :
"and return value of the function f.db_type called with an argument connection set to connection. if f.null is false, append string append ""NOT NULL"" to field_output, otherwise append ""NULL"" to field_output.","field_output . append ( ""%sNULL"" % ( ""NOT "" if not f . null else """" ) )"
"var_obj is an instance of Variable class, created with an argument var.",var_obj = Variable ( var )
return the first element of the return value of the call to the self._det_image_dimensions method.,return self . _get_image_dimensions ( ) [ 0 ]
from django.utils import formats into default name space.,from django . utils import formats
"call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.",id_for_label = widget . id_for_label ( id_ )
"call the function widget, substitute the result for widget.",widget = widget ( )
update defaults dictionary with kwargs.,defaults . update ( kwargs )
"if six.PY3 is true,",if six . PY3 :
append old_app_dir to app_dirs.,app_dirs . append ( old_app_dir )
"call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,","models . signals . post_migrate . send ( sender = app_config , app_config = app_config , verbosity = verbosity , interactive = interactive , using = db )"
"call the function force_bytes with an argument password, substitute the result for password.",password = force_bytes ( password )
"if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,",if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
"get attribute class_name form the module object, return it.","return getattr ( module , class_name )"
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.,response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
"if option_label is an instance of list or tuple,","if isinstance ( option_label , ( list , tuple ) ) :"
derive the class Loader from the BaseLoader base class.,class Loader ( BaseLoader ) :
break the loop execution.,break
"if value has an attribute '__iter__' and value is not an instance of six.text_type,","if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :"
plist is an empty list.,plist = [ ]
"call the method imatch.group with an argument integer 1, substitute the result for g.",g = imatch . group ( 1 )
"call the function reloader with wrapped_main_func, args and kwargs as arguments.","reloader ( wrapped_main_func , args , kwargs )"
"call the function initial_value, substitute the result for initial_value.",initial_value = initial_value ( )
"where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '. append string '_name' to app_or_project, substitute it for base_name.",base_name = '%s_name' % app_or_project
"if data is not None,",if data is not None :
"if old_attr is None,",if old_attr is None :
"define the method __init__ with 3 arguments: self, tup and hash set to hash.","def __init__ ( self , tup , hash = hash ) :"
"raise an TemplateDoesNotExist exception with an argument string ""No template names provided"".","raise TemplateDoesNotExist ( ""No template names provided"" )"
define the function _parse_date_fmt.,def _parse_date_fmt ( ) :
"call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.","script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )"
"handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.","handler = SimplerXMLGenerator ( outfile , encoding )"
call the method self.xml.addQuickElement with an argument string 'None'.,"self . xml . addQuickElement ( ""None"" )"
"""path of at least one fixture in the command line."" define the method add_arguments with 2 arguments: self and parser.","def add_arguments ( self , parser ) :"
raise an exception.,raise
"if not,",else :
return s.,return s
"and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format. call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.","super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )"
"define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.","def delete_cookie ( self , key , path = '/' , domain = None ) :"
"from django.template import loader, Context and RequestContext into default name space.","from django . template import loader , Context , RequestContext"
substitute raw_data for data.,data = raw_data
"if check_path is true,",if check_path :
"try,",try :
define the function _get_timezone_name with an argument timezone.,def _get_timezone_name ( timezone ) :
"or with string 'models.' if it is not and field_type. if extra_params is true,",if extra_params :
"if not self.initial_extra is None. defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.","defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }"
"define the method use_argparse with an argument self,",def use_argparse ( self ) :
"call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.",plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
define the method cfg_convert with 2 arguments: self and value.,"def cfg_convert ( self , value ) :"
substitute first element of parts for view.,view = parts [ 0 ]
"if second element of sys.version_info is smaller than or equal to integer 1,",if sys . version_info [ 1 ] <= 1 :
"define the method id_for_label with arguments self, name, field, value, val, choices and none_value.","def create_select ( self , name , field , value , val , choices , none_value ) :"
"with an argument i, for 'prefix' and self.error_class for 'error_class'. if self.is_bound is true,",if self . is_bound :
"if type of result is ConvertingDict, ConvertingList or ConvertingTuple,","if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :"
call the method bpython.embed.,bpython . embed ( )
"call the method self.__text_cast, return the result.",return self . __text_cast ( )
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.,"super ( TypedMultipleChoiceField , self ) . validate ( value )"
"call the method self.translate_token with an argument token, append the result to mapped_tokens.",mapped_tokens . append ( self . translate_token ( token ) )
"if not,",else :
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.,logger . addHandler ( self . config [ 'handlers' ] [ h ] )
"call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.","unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )"
append new_filenames to _cached_filenames.,_cached_filenames += new_filenames
self._errors is None.,self . _errors = None
return boolean True.,return True
substitute idx-th element of self.choices for choice.,choice = self . choices [ idx ]
not_found is an empty list.,not_found = [ ]
define the function dictsortreversed with 2 arguments value and arg.,"def dictsortreversed ( value , arg ) :"
break from the loop execution.,break
"yield obj, as an return value of the generator.",yield obj
define the function is_ignored with arguments path and ignore_patterns.,"def is_ignored ( path , ignore_patterns ) :"
"zip elements of result and result_args into a list of tuples, for every item and args in the result,","for item , args in zip ( result , result_args ) :"
"try,",try :
"dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'. define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.","def handle ( self , * fixture_labels , ** options ) :"
"call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.","meth = cls . __promise__ ( resultclass , k , v )"
"if IndexError exception is caught,",except IndexError :
"call the method apps.get_app_configs, for app_config in the result,",for app_config in apps . get_app_configs ( ) :
self._errors is an empty list.,self . _errors = [ ]
"derive class LimitedStream from the object base class, making it a new-style class.",class LimitedStream ( object ) :
"if VariableDoesNotExist exception is caught,",except VariableDoesNotExist :
"if fext is a file,",if os . path . isfile ( fext ) :
"call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',","self . stdout . write ( 'examining files with the extensions: %s\n' % get_text_list ( list ( self . extensions ) , 'and' ) )"
define the function remove_tags with 2 arguments: html and tags.,"def remove_tags ( html , tags ) :"
"call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,",return force_text ( unquote ( force_str ( quoted_url ) ) )
call the method self._delete with argument k.,self . _delete ( k )
"if name is not None,",if name is not None :
from django.template.loader import BaseLoader into default name space.,from django . template . loader import BaseLoader
define the function valid_ident with an argument s.,def valid_ident ( s ) :
define the method __getattr__ with 2 arguments: self and attr set to None.,"def __getattr__ ( self , attr ) :"
"if ImportError exception is caught,",except ImportError :
value under the self.var_name key of the context dictionary is an empty list.,context [ self . var_name ] = [ ]
"otherwise, length of options.args is lesser than integer 1,",elif len ( options . args ) < 1 :
"and dictionary of arbitrary length **kwargs as arguments. call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,","_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )"
"if UnicodeError exception is caught,",except UnicodeError :
if length of fks_to_parent equals integer 1.,if len ( fks_to_parent ) == 1 :
return self.,return self
"if nesting is false,",if not nesting :
import module os.,import os
"if not,",else :
define the method __bytes_cast with an argument self.,def __bytes_cast ( self ) :
"for every format in BUILTIN_SERIALIZERS,",for format in BUILTIN_SERIALIZERS :
define the function validate_ipv46_address with an argument value.,def validate_ipv46_address ( value ) :
"'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput', 'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'. MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.","MEDIA_TYPES = ( 'css' , 'js' )"
return cls.,return cls
"if empty_label is not None,",if empty_label is not None :
substitute lib for value under the library_name key of libraries dictionary.,libraries [ library_name ] = lib
"return it. if PY3 is true,",if PY3 :
do nothing,pass
yield subnode.,yield subnode
"call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.","statements = sql_create ( app_config , self . style , connection )"
define the function get_urlconf with an argument default set to None.,def get_urlconf ( default = None ) :
return self._queryset.,return self . _queryset
"call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.","normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )"
"if err_log is true,",if err_log :
define the method content with an argument self.,def content ( self ) :
"call the private dict.__setitem__ method with self class instance, key and M as arguments.","dict . __setitem__ ( self , key , M )"
"define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.","def __init__ ( self , attrs = None , choices = ( ) ) :"
define the function find_filter with 2 arguments: self and filter_name.,"def find_filter ( self , filter_name ) :"
call the method parser.add_library with an argument lib.,parser . add_library ( lib )
"call the function re.compile with 2 arguments: raw string ""((?:[^\s'""]*(?:(?:""(?:[^""\\]|\\.)*"" | '(?:[^'\\]|\\.)*')[^\s'""]*)+) | \+)"",","smart_split_re = re . compile ( r"""""" ((?: [^\s'""]* (?: (?:""(?:[^""\\]|\\.)*"" | '(?:[^'\\]|\\.)*') [^\s'""]* )+ ) | \S+) """""" , re . VERBOSE )"
break the loop execution.,break
"if settings.FORCE_SCRIPT_NAME is not None,",if settings . FORCE_SCRIPT_NAME is not None :
call the method self.set_cdata_mode with tag as the argument.,self . set_cdata_mode ( tag )
result_args is a list containing an empty list.,result_args = [ [ ] ]
"call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,",if transaction . get_autocommit ( self . using ) :
raise an exception.,raise
"call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,","return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )"
"substitute the result for self.instance. try,",try :
from django.apps import apps into default name space.,from django . apps import apps
substitute logging.getLogger for getLogger.,getLogger = logging . getLogger
substitute sysid for self.sysid.,self . sysid = sysid
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.,"return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )"
"substitute '%r' in string ' gettext(%r) ' with result of the function join_tokens, called with 2 arguments: singular,","out . write ( ' gettext(%r) ' % join_tokens ( singular , trimmed ) )"
"try,",try :
define the function to_locale with 2 arguments language and to_lower set to boolean False.,"def to_locale ( language , to_lower = False ) :"
"if quote_double_quotes is true,",if quote_double_quotes :
"call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.",src_data = prepare_js_for_gettext ( src_data )
"get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.",self . interactive = options . get ( 'interactive' )
define the function deactivate_all.,def deactivate_all ( ) :
substitute value under the 'use_reloader' key of the options dictionary for use_reloader.,use_reloader = options . get ( 'use_reloader' )
derive the class ConvertingList from list base class.,class ConvertingList ( list ) :
"call the function is_aware with an argument date, if it evaluates to true,",if is_aware ( date ) :
"if self.verbosity is greater than integer 0,",if self . verbosity > 0 :
"msg is a string ""%s doesn't look like a module path"" formated with dotted_path.","msg = ""%s doesn't look like a module path"" % dotted_path"
from django.core.mail.message import sanitize_address into default name space.,from django . core . mail . message import sanitize_address
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
define the function get_git_changeset.,def get_git_changeset ( ) :
substitute message.error_dict for message.,message = message . error_dict
i is the reminder of the division of i by j.,i = i % j
"add ns_pattern and extra, substitute the result for ns_pattern.",ns_pattern = ns_pattern + extra
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
substitute subject for self.subject.,self . subject = subject
return list_ and boolean False.,"return list_ , False"
define the method __init__ with 2 arguments: self and s.,"def __init__ ( self , s ) :"
remove first two elements from bits.,bits = bits [ 2 : ]
"if self.fail_silently is false,",if not self . fail_silently :
"define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"return a dictionary with 2 elements: self._version for ""version"" and ""http://www.w3.org/2005/Atom"" for ""xmlns:atom"".","return { ""version"" : self . _version , ""xmlns:atom"" : ""http://www.w3.org/2005/Atom"" }"
substitute old_attr for new_attr.,new_attr = old_attr
"sum lead and opening, substitute the result for lead.",lead = lead + opening
"if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.",self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
"msg is a string ""Could not decode base64 data: %r"", where '%r' is replace with e.","msg = ""Could not decode base64 data: %r"" % e"
substitute name for self.name.,self . name = name
"add bits to a tuple, return it.",return tuple ( bits )
"call the method value.astimezone with an argument timezone, substitute the result for value.",value = value . astimezone ( timezone )
"if LookupError exception is caught,",except LookupError :
"format string ' pgettext(%r, %r) ' with message_context and g, write it to out.","out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )"
return iterable self.keyOrder.,return iter ( self . keyOrder )
"if not,",else :
"if self.pos is greater than or equal to self.tokens,",if self . pos >= len ( self . tokens ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
comment_notes is an empty list.,comment_notes = [ ]
"label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs. call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,","super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label , initial = initial , help_text = help_text , * args , ** kwargs )"
return name.,return name
"substitute the result for timezone. divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.","hour , minute = divmod ( timezone , 60 )"
"if settings.TEMPLATE_DEBUG is true and origin is None,",if settings . TEMPLATE_DEBUG and origin is None :
"call the email_message.recipients method, if it evaluates to false,",if not email_message . recipients ( ) :
define the method _cache with self class instance as an argument.,def _cache ( self ) :
raise an ValidationError with an argument errors.,raise ValidationError ( errors )
define the method reset with an argument self.,def reset ( self ) :
"try,",try :
"if exclude is true and f.name is contained in exclude,",if exclude and f . name in exclude :
"if not, shutdown_message is an empty string. if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.",quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
substitute options for self.options.,self . options = options
call the method connection.check_constraints with an arguments table_names set to table_names.,connection . check_constraints ( table_names = table_names )
"if self.sep is not contained in signed_value,",if self . sep not in signed_value :
"define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',","def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :"
"_iterkeys is a string ""keys"".","_iterkeys = ""keys"""
"finally perform,",finally :
"substitute elements of middle from length of opening index to the end, for middle.",middle = middle [ len ( opening ) : ]
databases is a list containing 2 elements: self.using and None.,"databases = [ self . using , None ]"
"call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.",pythonrc = os . path . expanduser ( pythonrc )
append string '0000' to new_ip.,new_ip . append ( '0000' )
"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.'. define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.","def handle_app_config ( self , app_config , ** options ) :"
"if self.data.hour is greater than inreger 12,",if self . data . hour > 12 :
derive the class Command from the AppCommand base class.,class Command ( AppCommand ) :
"if not,",else :
requires_system_checks is boolean False.,requires_system_checks = False
substitute base for m.,m = base
"call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the",value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
substitute level for self.level.,self . level = level
"substitute the resulting list for app_config. if not,",else :
"append string ""Field renamed because it wasn't a valid Python identifier."" to field_notes.","field_notes . append ( ""Field renamed because it wasn't a valid Python identifier."" )"
return res.,return res
"call the method writer.as_string, write the result to file fh.",fh . write ( writer . as_string ( ) )
"create lambda identity function which returns x for input parameter x, return the function.",return lambda x : x
"register.tag decorator,",@ register . tag
substitute self.field.widget for widget.,widget = self . field . widget
call the method self._assert_mutable.,self . _assert_mutable ( )
convert locale to lowercase and return it.,return locale . lower ( )
"if OverflowError or ValueError exceptions are caught,","except ( OverflowError , ValueError ) :"
"definition is an empty dictionary,",definition = { }
"append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',","args = [ 'xgettext' , '-d' , domain , '--language=Python' , '--keyword=gettext_noop' , '--keyword=gettext_lazy' , '--keyword=ngettext_lazy:1,2' , '--keyword=ugettext_noop' , '--keyword=ugettext_lazy' , '--keyword=ungettext_lazy:1,2' , '--keyword=pgettext:1c,2' , '--keyword=npgettext:1c,2,3' , '--keyword=pgettext_lazy:1c,2' , '--keyword=npgettext_lazy:1c,2,3' , '--output=-' ] + command . xgettext_options"
"if response is None,",if response is None :
"try,",try :
"default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'. call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',","parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False , help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )"
"if TemplateDoesNotExist exception is caught,",except TemplateDoesNotExist :
self.models is an empty set.,self . models = set ( )
"for every i and tuple containing dirpath and f, in enumerated list of locations,","for i , ( dirpath , f ) in enumerate ( locations ) :"
"empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr. append last_row to output.",output . append ( last_row )
"if ValueError exception is caught,",except ValueError :
"if pop_context is true,",if pop_context :
return self.,return self
"define the method __init__ with 3 arguments: self, offset set to None, name set to None.","def __init__ ( self , offset = None , name = None ) :"
"if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.",initial_value = initial if initial is not None else ''
"convert arg to an integer, substitute it for p.",p = int ( arg )
"define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.","def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :"
"create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.","defaults = dict ( defaults . __dict__ , ** options )"
return result.,return result
"call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.","duplicate = super ( Context , self ) . __copy__ ( )"
"call the function format_html with 2 arguments: string '<optgroup label=""{0}"">' and return value of the function force_text,","output . append ( format_html ( '<optgroup label=""{0}"">' , force_text ( option_value ) ) )"
"if the value under the 'test_flush' key of the options dictionary exists,","if options . get ( ""test_flush"" , False ) :"
"if basetype equals a string 'text',",if basetype == 'text' :
"register.tag decorator,",@ register . tag
"define the method write_po_file with arguments self, potfile and locale.","def write_po_file ( self , potfile , locale ) :"
"define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,","def mail_managers ( subject , message , fail_silently = False , connection = None , html_message = None ) :"
"for every x is the range of integers from level to the integer 2, in the reversed order,","for x in range ( level , 1 , - 1 ) :"
raise an exception.,raise
"call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.","truncate = pgettext ( 'String to return when truncating text' , '%(truncated_text)s...' )"
from django.conf import settings into default name space.,from django . conf import settings
"join elements of output into a string, separated by newline characters, return it.",return '\n' . join ( output )
"get the next element of the self._producer iterable, substitute it for output.",output = next ( self . _producer )
define the method listdir with arguments self and path.,"def listdir ( self , path ) :"
"return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.","return field . widget . value_from_datadict ( self . data , self . files , prefix )"
buffer_ is None.,buffer_ = None
"if t is not None,",if t is not None :
define the method __iter__ with argument self.,def __iter__ ( self ) :
substitute self._stream for stream.,stream = self . _stream
return _cached_filenames.,return _cached_filenames
update declared_fields dictionary with entry base.declared_fields.,declared_fields . update ( base . declared_fields )
"call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',","msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )"
define the method with reload with an argument self.,def __str__ ( self ) :
substitute gettext_noop for ugettext_noop.,ugettext_noop = gettext_noop
substitute complain for pop.,pop = complain
"otherwise if, type of s doesnt equal to six.text_type,",elif type ( s ) != six . text_type :
"for every item in self.items,",for item in self . items :
"if output is true,",if output :
from django.utils.datastructures import MultiValueDict into default name space.,from django . utils . datastructures import MultiValueDict
"if field.widget.needs_multipart_form is true,",if field . widget . needs_multipart_form :
"use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.",sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
substitute the result for exc_value. substitute exc for exc_value.__cause__.,exc_value . __cause__ = exc
"call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.","dir_name , file_name = os . path . split ( name )"
"replace all '%s' from string ""%s: %s%s%s"" with values of obj, id, self.msg and hint, respectively, return the result.","return ""%s: %s%s%s"" % ( obj , id , self . msg , hint )"
"if not,",else :
"self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,","self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )"
where '%s' is replaced with self.__class__.__name__. define the method flush with an argument self.,def flush ( self ) :
substitute the return value of the method self.object_list.count for self._count.,self . _count = self . object_list . count ( )
"if last_row doesnt ends with row_ender,",if not last_row . endswith ( row_ender ) :
return printable representation of self.value.,return repr ( self . value )
from copy import copy into default name space.,from copy import copy
"try,",try :
"call the method self.getvalue, return the result.",return self . getvalue ( )
"try,",try :
"call the function six.text_type with length of lines as an argument,",width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
"if self.max_value is not None,",if self . max_value is not None :
define the function _unpack_ipv4 with an argument ip_str.,def _unpack_ipv4 ( ip_str ) :
define the method A with an argument self.,def A ( self ) :
decorator register.filter.,@ register . filter
from django.utils import six into default name space.,from django . utils import six
"string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments: string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument: string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result. define the function localize with 2 arguments value and use_l10n set to None.","def localize ( value , use_l10n = None ) :"
"call the method form.add_prefix with an argument self._pk_field.name,",form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
substitute index for doublecolon_start.,doublecolon_start = index
"if path is not initialized,",if path is None :
"if six.PY2 is true,",if six . PY2 :
"if self.pk_field,",if self . pk_field :
"sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary. if path is not None,",if path is not None :
"otherwise if field.required is true,",elif field . required :
derive the class EmailField from the base class CharField class.,class EmailField ( CharField ) :
"self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,",self . file_permissions_mode = ( file_permissions_mode if file_permissions_mode is not None else settings . FILE_UPLOAD_PERMISSIONS )
"called with an argument text converted into a floating point number. if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,","except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :"
"if second element of url_fields is false,",if not url_fields [ 1 ] :
"convert args into a list, substitute it for args.",args = list ( args )
"get the value under the 'extensions' key of the options dictionary, substitute it for extensions.",extensions = options . get ( 'extensions' )
"if Exception, renamed to e, exception is caught,",except Exception as e :
"join usage and self.help into a string, separated by 2 new line characters, return it.","return '%s\n\n%s' % ( usage , self . help )"
"define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.","def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :"
"for every name in MEDIA_TYPES,",for name in MEDIA_TYPES :
"if attrs is true,",if attrs :
break from the endless loop.,break
do nothing.,pass
call the method self.write_migration_files with an argument changes.,self . write_migration_files ( changes )
return nothing.,return
"from django.conf import settings into default namespace,",from django . conf import settings
"call the function smart_urlquote with an argument middle, substitute the result for url.",url = smart_urlquote ( middle )
define the method utcoffset with 2 arguments self and dt.,"def utcoffset ( self , dt ) :"
define function dictitem with s as an argument.,def dictitem ( s ) :
"if not,",else :
"for every sql in custom_sql,",for sql in custom_sql :
"call the method self._prepare_data with an argument data, substitute the result for data.",data = self . _prepare_data ( data )
"if self.field.empty_label is not None,",if self . field . empty_label is not None :
"value is an instance of ConvertingList class, created with an argument value.",value = ConvertingList ( value )
close file file.,file . close ( )
return boolean False.,return False
substitute fields for self.fields.,self . fields = fields
derive the class InputStreamExhausted from the Exception base class.,class InputStreamExhausted ( Exception ) :
"and unpacked dictionary kwargs. call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.",self [ 'Location' ] = iri_to_uri ( redirect_to )
"if size is not zero,",if size :
derive the class BaseModelForm from the BaseForm base class.,class BaseModelForm ( BaseForm ) :
"while path is true,",while path :
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.,"shutil . rmtree ( path_to_remove , onerror = rmtree_errorhandler )"
"if last element of pieces is true,",if pieces [ - 1 ] :
"with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true, if not, an empty string for 'code'. return errors.",return errors
substitute key for result.key.,result . key = key
"call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,",obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
"call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.",base36 = BaseConverter ( BASE36_ALPHABET )
"otherwise if token_string starts with COMMENT_TAG_START,",elif token_string . startswith ( COMMENT_TAG_START ) :
define the method render with an argument self.,def render ( self ) :
call the method LocaleRegexProvider.__init__ with arguments self and regex.,"LocaleRegexProvider . __init__ ( self , regex )"
"property decorator,",@ property
"define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.","def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :"
call the method parser.delete_first_token.,parser . delete_first_token ( )
"call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,","return mark_safe ( func ( * args , ** kwargs ) )"
raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.,raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
"if memo is None,",if memo is None :
"get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,","return { '2' : True , True : True , 'True' : True , '3' : False , 'False' : False , False : False } . get ( value , None )"
"for every field in unique_check, if field is contained in form.cleaned_data. create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,","row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d for d in row_data )"
return message.,return message
return result.,return result
if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names,if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
define the method __iter__ with an argument self.,def __iter__ ( self ) :
and unpacked dictionary kwargs. define the method clean with 2 arguments: self and value.,"def clean ( self , value ) :"
"call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.","return super ( QueryDict , self ) . setlistdefault ( key , default_list )"
"if IOError, renamed to e, exception is caught,",except IOError as e :
"if protocol is not equal to string 'both' and unpack_ipv4 is true,",if protocol != 'both' and unpack_ipv4 :
"""to %s because it doesn't define __str__()."", replace %s with string value of klass.__name__. substitute __str__ filed of klass for __unicode__ field of klass.",klass . __unicode__ = klass . __str__
substitute hashlib.sha256 for digest.,digest = hashlib . sha256
call the method self.add_fallback with an argument default_translation.,self . add_fallback ( default_translation )
"split first element of hextet into parts by ':', append them to new_ip.",new_ip = hextet [ 0 ] . split ( ':' )
"if not self._mutable,",if not self . _mutable :
substitute style_func for self.style_func.,self . style_func = style_func
"for every app_name and model_list in return value of manifest.items function,","for app_name , model_list in manifest . items ( ) :"
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.,"setattr ( base , old_method_name , wrapper ( old_method ) )"
"call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.","data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )"
"decrement t by integer 1,",t -= 1
"return an empty string,",return ''
"if '.' is contained in words or '@' is contained in word or ':' is contained in word,",if '.' in word or '@' in word or ':' in word :
remove first element of result from self.keyOrder dictionary.,self . keyOrder . remove ( result [ 0 ] )
"open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.","sys . stdout = open ( out_log , 'a' , buffering )"
"append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.","field_notes . append ( 'max_digits and decimal_places have been guessed, as this ' 'database handles decimal fields as float' )"
"divide since by seconds, store the floored result in count.",count = since // seconds
define the method H with an argument self.,def H ( self ) :
"if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,",if self . match is None or self . match_re . search ( f ) :
error is an instance of ValidationError created with an argument error.,error = ValidationError ( error )
"substitute the result for connection. get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.",table_name_filter = options . get ( 'table_name_filter' )
"if incremental is true,",if not incremental :
"try,",try :
"if 'class' is contained in attrs,",if 'class' in attrs :
"if cache is None,",if cache is None :
"call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.",fields = list ( six . iteritems ( base . base_fields ) ) + fields
"if m is not None,",if m is not None :
call the method __init__ from the base class of the DTDForbidden class.,"super ( DTDForbidden , self ) . __init__ ( )"
"get name attribute of the self._out object, return it.","return getattr ( self . _out , name )"
"for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,","name_str = ""; "" . join ( ""%s in %s"" % ( "", "" . join ( names ) , app ) for app , names in conflicts . items ( ) )"
"define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.","def resolve ( self , context , ignore_failures = False ) :"
derive the class Node from object base class.,class Node ( object ) :
"define the method has_error with 3 arguments: self, field and code set to None.","def has_error ( self , field , code = None ) :"
"define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.","def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :"
define the function handle_default_options with an argument options.,def handle_default_options ( options ) :
"from yaml import SafeLoader, SafeDumper into default name space.","from yaml import SafeLoader , SafeDumper"
define the method s with an argument self.,def s ( self ) :
return None.,return None
"try,",try :
style is an instance of the dummy class.,style = dummy ( )
from django.core.mail.backends.base import BaseEmailBackend into default name space.,from django . core . mail . backends . base import BaseEmailBackend
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.,"def lru_cache ( maxsize = 100 , typed = False ) :"
"call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,",context_match = context_re . match ( imatch . group ( 2 ) )
"define the method get_many with 3 arguments: self, keys, and version set to None.","def get_many ( self , keys , version = None ) :"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
define the method __delitem__ with 2 arguments: self and key.,"def __delitem__ ( self , key ) :"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
len_item is integer 1.,len_item = 1
"replace '%s' in string ""processing locale %s\n"" with locale, write it to self.stdout.","self . stdout . write ( ""processing locale %s\n"" % locale )"
"under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None, call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.",return mark_safe ( self . render ( self . context ) )
"create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.",urlconf_repr = repr ( self . urlconf_name )
define the function phone2numeric_filter with an argument value.,def phone2numeric_filter ( value ) :
child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.,"child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )"
"return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',","return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) )"
skip this loop iteration.,continue
"_version is a string ""2.0"".","_version = ""2.0"""
"call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.","value , timestamp = result . rsplit ( self . sep , 1 )"
"with the result renamed to fp, perform the following: write msgs to fp.",fp . write ( msgs )
define the function escapejs_filter with an argument value.,def escapejs_filter ( value ) :
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return self . _html_output ( normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' , error_row = '<li>%s</li>' , row_ender = '</li>' , help_text_html = ' <span class=""helptext"">%s</span>' , errors_on_separate_row = False )"
return val.,return val
"if KeyError exception is caught,",except KeyError :
define the method __nonzero__ with an argument self.,def __nonzero__ ( self ) :
"if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,",if strings_only and is_protected_type ( s ) :
"if ttl is not None,",if ttl is not None :
"_assertRaisesRegex is a strnig ""assertRaisesRegexp"".","_assertRaisesRegex = ""assertRaisesRegexp"""
"if date is not None,",if date is not None :
define the method load with self class instance and rawdata as arguments.,"def load ( self , rawdata ) :"
define the method _isdst with 2 arguments self and dt.,"def _isdst ( self , dt ) :"
define the method decompress with 2 arguments: self and value.,"def decompress ( self , value ) :"
"call the function re.compile with an argument raw string ""(?<!%)%(?!%)"", substitute the result for one_percent_re.","one_percent_re = re . compile ( r""""""(?<!%)%(?!%)"""""" )"
"with return value of the function io.open with fname and string 'rb' as arguments, named as f,","with io . open ( fd , 'wb' ) as f :"
call the method self.reset.,self . reset ( )
return an empty string.,return ''
"try,",try :
"if base has an attribute 'declared_fields',","if hasattr ( base , 'declared_fields' ) :"
derive the class FileSystemStorage from the Storage base class.,class FileSystemStorage ( Storage ) :
import module sys.,import sys
return response.,return response
"and unpacked dictionary kwargs, return the result. property decorator,",@ property
"if fields is not None and f.name is not contained in fields,",if fields is not None and f . name not in fields :
"if OSError, renamed to err, is caught,",except OSError as err :
from functools import reduce into default name space.,from functools import reduce
"property decorator,",@ property
"if num_entries is lesser than self._max_entries,",if num_entries < self . _max_entries :
"call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,","super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )"
must_be_first is boolean True.,must_be_first = True
return self.file.,return self . file
"and use it as the name of the attribute to get from the self object, call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator, use the result as an argument for the call to the function mark_safe, return the result. define the method render_js with an argument self.",def render_js ( self ) :
"evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.","return timesince ( d , now , reversed = True )"
return last rollback elements of chunk.,return chunk [ : - rollback ]
return self.s.,return self . s
write msg to self.stderr stream.,self . stdout . write ( msg )
if ImportError exception is caught.,except ImportError :
"if not,",else :
return data.,return data
"if script_url is true,",if script_url :
"call the function zlib.compress with an argument data, substitute the result for compressed.",compressed = zlib . compress ( data )
"open filename file in write mode, with the file descriptor renamed to outfile, perform,","with open ( filename , 'wb' ) as outfile :"
"get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.",cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
"if source is an instance of Group class,","if isinstance ( source , Group ) :"
"RemovedInDjango19Warning and stacklevel set to integer 2. if data is None or data is an instance of dict type,","if data is None or isinstance ( data , dict ) :"
return content.,return content
"remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.","path = kwargs . pop ( 'path' , None )"
from django.utils.encoding import force_bytes into default name space.,from django . utils . encoding import force_bytes
"if value is contained in self.empty_values,",if value in self . empty_values :
"call the function force_text with an argument truncate, substitute the result for truncate.",truncate = force_text ( truncate )
"if new_attr is None,",if new_attr is None :
"if cc is true,",if cc :
"get the index of the first occurrence of tagname, substitute it for i.",i = open_tags . index ( tagname )
"try,",try :
"if not,",else :
"if options is true,",if options :
"if not,",else :
"if obj.pk is None,",if obj . pk is None :
"if chunk is None,",if chunk is None :
"define the method bound_data with arguments self, data and initial.","def bound_data ( self , data , initial ) :"
"call the function apps.get_app_configs, for every app_config in result,",for app_config in apps . get_app_configs ( ) :
"if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,",if token . token_type == TOKEN_BLOCK and token . contents == endtag :
"if string '()' is contained in config,",if '()' in config :
"get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.","id_ = final_attrs . get ( 'id' , None )"
"and unpacked dictionary kwargs. call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,","super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )"
define the __getitem__ method with self and alias arguments.,"def __getitem__ ( self , alias ) :"
"for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,","suffixes = ( '.' . join ( ext for ext in combo if ext ) for combo in product ( databases , ser_fmts , cmp_fmts ) )"
"if func is None,",if func is None :
"join trans_bit into a string separated with whitespaces, substitute the result for bit.",bit = ' ' . join ( trans_bit )
derive the class ErrorList from the UserList and list base classes.,"class ErrorList ( UserList , list ) :"
"call the function force_text with an argument formatstr, use the result as an argument for the call to the method,","for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :"
call the method archive.extract with arguments: filename and tempdir.,"archive . extract ( filename , tempdir )"
from django.core.mail.backends.base import BaseEmailBackend into default name space.,from django . core . mail . backends . base import BaseEmailBackend
form._meta.fields is a list created out of form._meta.fields elements.,form . _meta . fields = list ( form . _meta . fields )
"call the function local, substitute the result _urlconf.",_urlconfs = local ( )
raise an exception.,raise
substitute last for value under the PREV key of the link dictionary.,link [ PREV ] = last
substitute unicode for text_type.,text_type = unicode
call the method self.unclosed_block_tag with an argument parse_until.,self . unclosed_block_tag ( parse_until )
substitute value under name key of handlers dictionary for handler_config.,handler_config = handlers [ name ]
"substitute the result for value under the 'microsecond' key of the kw dictionary. remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.",tzinfo = kw . pop ( 'tzinfo' )
"decrement self.waiting_writers by integer 1,",self . waiting_writers -= 1
import module os.,import os
call the method value.encode with an argument charset.,value . encode ( charset )
"and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'. call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,"
"allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs. substitute path, match and recursive for self.path, self.match and self.recursive.","self . path , self . match , self . recursive = path , match , recursive"
"unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.","attrs = dict ( self . attrs , ** kwargs )"
append label_output to output.,output . append ( label_output )
"for every field in return value of the function _parse_date_fmt,",for field in _parse_date_fmt ( ) :
raise an ImportError exception.,raise ImportError
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.","return super ( LocalTimezone , self ) . _isdst ( dt )"
increment self.active_writers by 1.,self . active_writers += 1
"define the method get with 4 arguments, self class instance, key, default set to None and version set to None.","def get ( self , key , default = None , version = None ) :"
import module mimetypes.,import mimetypes
"if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.",self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
"call the function new_method_proxy with an argument bool, substitute the result for __bool__.",__bool__ = new_method_proxy ( bool )
"if not,",else :
"if not,",else :
"get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,","return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )"
"raise an base.DeserializationError exception with an argument string ""Invalid model identifier: '%s'"", where '%s' is replaced with model_identifier.","raise base . DeserializationError ( ""Invalid model identifier: '%s'"" % model_identifier )"
where '%s' is replaced with final_path and base_path. return final_path.,return final_path
return an empty string.,return ''
"call the method out.getvalue, return the result.",return out . getvalue ( )
"call the function post_callback with an argument retval, substitute the result for newretval.",newretval = post_callback ( retval )
"if not,",else :
"call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.","select_html = s . render ( field % name , val , local_attrs )"
"call the force_str function with an argument value, substitute the result for value.",value = force_str ( value )
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.,"class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :"
call the method context.render_context.push.,context . render_context . push ( )
"try,",try :
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"split s into parts by '.', substitute the result for name.",name = s . split ( '.' )
"and help set to 'Fixture labels.'. call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load ' 'fixtures into. Defaults to the ""default"" database.' )"
"define the method __init__ with 3 arguments: self, value and text.","def __init__ ( self , value , text ) :"
define the function add_metaclass with an argument metaclass.,def add_metaclass ( metaclass ) :
return boolean False.,return False
derive the class Library form the base class object.,class Library ( object ) :
"if character is not equal to a string '.',",if character != '.' :
"raise an base.DeserializationError exception with an argument string ""<%s> node has invalid model identifier: '%s'"",","raise base . DeserializationError ( ""<%s> node has invalid model identifier: '%s'"" % ( node . nodeName , model_identifier ) )"
return commands.,return commands
"if not,",else :
"call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.",data [ field . name ] = field . to_python ( field_value )
"try,",try :
derive the class Operator from the base class TokenBase.,class Operator ( TokenBase ) :
"define the method resolve_expression with 3 arguments: self, obj and context.","def resolve_expression ( self , obj , context ) :"
derive the class HttpResponseGone from the HttpResponse base class.,class HttpResponseGone ( HttpResponse ) :
"return an instance of SafeBytes, created with an argument t.",return SafeBytes ( t )
"if commit is true and form has an attribute 'save_m2m',","if commit and hasattr ( form , 'save_m2m' ) :"
"define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","def render ( self , name , value , attrs = None , choices = ( ) ) :"
"call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.",self . objects . append ( self . get_dump_object ( obj ) )
"call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.",__ne__ = new_method_proxy ( operator . ne )
return self.,return self
substitute length of values for len_values.,len_values = len ( values )
self._raw_ipv6 is boolean True.,self . _raw_ipv6 = True
if ImportError exception is caught.,except ImportError :
return obj.,return obj
from .html_parser import HTMLParser and HTMLParseError into default name space.,"from . html_parser import HTMLParser , HTMLParseError"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.",lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
define the function linenumbers with 2 arguments value and autoescape set to None.,"def linenumbers ( value , autoescape = None ) :"
substitute value for self.value.,self . value = value
"if self doesnt have '_queryset' attribute,","if not hasattr ( self , '_queryset' ) :"
substitute new_filenames for filelist.,filelist = new_filenames
"try,",try :
"string ""%s already exists, overlaying a project or app into an existing directory won't replace conflicting files"", where '%s"" is replaced with new_path. open old_path file in 'rb' mode, with file descriptor renamed to template_file,","with open ( old_path , 'rb' ) as template_file :"
import module struc.,import struct
from django.utils.six import StringIO into default name space.,from django . utils . six import StringIO
return EventHandler.modified_code.,return EventHandler . modified_code
substitute takes_context for self.takes_context.,self . takes_context = takes_context
from __future__ import absolute_import into default name space.,from __future__ import absolute_import
"sort the result and substitute it for options. for every option in options,",for option in options :
value is None.,value = None
"try,",try :
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.,self . template_cache [ key ] = TemplateDoesNotExist
"call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,","become_daemon ( our_home_dir = options [ ""workdir"" ] , ** daemon_kwargs )"
derive the class TemplateSyntaxError form the base class Exception.,class TemplateSyntaxError ( Exception ) :
define the method __len__ with an argument self.,def __len__ ( self ) :
ns_pattern is an empty string.,ns_pattern = ''
month_field is a string '%s_month'.,month_field = '%s_month'
"if self.parsed is true,",if self . parsed :
"call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.",translated = func ( ** kwargs )
"substitute return value of call to the function _set_response_etag with response as an argument, for response.",response = _set_response_etag ( response )
return an empty string.,return ''
"call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.",results [ predicate ( item ) ] . append ( item )
"if attr equals any of the strings ""__file__"", ""__name__"" or ""__path__"" and self.mod is not contained in sys.modules,","if ( attr in ( ""__file__"" , ""__name__"" , ""__path__"" ) and self . mod not in sys . modules ) :"
extend errors list with e.error_list.,errors . extend ( e . error_list )
"if fields is true and f.name is not contained in fields,",if fields and f . name not in fields :
"call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.","return klass ( fail_silently = fail_silently , ** kwds )"
"otherwise if field is contained in self.fields,",elif field in self . fields :
return result.,return result
"ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',","ISO_INPUT_FORMATS = { 'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) , 'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) , 'DATETIME_INPUT_FORMATS' : ( '%Y-%m-%d %H:%M:%S' , '%Y-%m-%d %H:%M:%S.%f' , '%Y-%m-%d %H:%M' , '%Y-%m-%d' ) , }"
import module datetime.,import datetime
"call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.",field_value = getInnerText ( node ) . strip ( )
from the base class of the class TypedMultipleChoiceField. define the method _coerce with arguments self and value.,"def _coerce ( self , value ) :"
"call the function force_text with an argument text, substitute the result for text.",text = force_text ( text )
"define the method __setattr__ with 3 arguments: self, name and value.","def __setattr__ ( self , name , value ) :"
"if old_style_list is true,",if old_style_list :
"call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,",month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.,raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
"and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list. if length of fks_to_parent is integer 1,",if len ( fks_to_parent ) == 1 :
return EndToken.,return EndToken
"append string ', ' to field_desc.","field_desc += ', '"
"define function no_style, without input arguments.",def no_style ( ) :
"if not,",else :
"call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,","for filepath in self . get_template_sources ( template_name , template_dirs ) :"
"get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,","_ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )"
"if not,",else :
"raise an TemplateSyntaxError exception with an argument string ""'now' statement takes one argument"".","raise TemplateSyntaxError ( ""'now' statement takes one argument"" )"
"if number equals a integer 1 and self.allow_empty_first_page is true,",if number == 1 and self . allow_empty_first_page :
set the file position pointer at file_pos.,file . seek ( file_pos )
"if val is an instance of tuple,","if isinstance ( val , tuple ) :"
"if keys is true,",if keys :
call the method operations.extend with an argument smigration.operations.,operations . extend ( smigration . operations )
"description is a string ""An instance of the '%s' class"" with '%s' replaced by value of receiver.__class__.__name__.","description = ""An instance of the '%s' class"" % receiver . __class__ . __name__"
define the function infix with 2 arguments bp and func.,"def infix ( bp , func ) :"
media is an instance of Media class.,media = Media ( )
define the function get_library with an argument library_name.,def get_library ( library_name ) :
"raise an TemplateSyntaxError exception with an argument string ""'%s' received too many positional arguments"",","raise TemplateSyntaxError ( ""'%s' received too many positional arguments"" % name )"
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.,"def get_language_from_request ( request , check_path = False ) :"
derive the class CommandError from the base class Exception.,class CommandError ( Exception ) :
from django.core.serializers.base import SerializerDoesNotExist into default name space.,from django . core . serializers . base import SerializerDoesNotExist
define the method from_dict with argument cls and file_dict.,"def from_dict ( cls , file_dict ) :"
"and boolean False, append the result to result. return result.",return result
"if ValueError exception is caught,",except ValueError :
"replace '%s' in string ""System check identified some issues:\n%s"" with msg, substitute it for msg.","msg = ""System check identified some issues:\n%s"" % msg"
"for every renamed_method in cls.renamed_methods,",for renamed_method in cls . renamed_methods :
"smart_text function, return the result. if not,",else :
"if not,",else :
"call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,","instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )"
"decorator total_ordering,",@ total_ordering
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
"call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"substitute the '%s' with table and list containing key, respectively. call the cursor.fetchone method, substitute the result for row.",row = cursor . fetchone ( )
"define the method push with 3 arguments: self, name and block.","def push ( self , name , block ) :"
"join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,","return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )"
return base.,return base
position file self.file pointer at the pos position.,self . file . seek ( pos )
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
"get the value under the 'format' key of the options dictionary, substitute the result for format.",format = options . get ( 'format' )
"define the method delete with self, key and version set to None as arguments.","def delete ( self , key , version = None ) :"
"call the method self._get_size_from_underlying_file, substitute the result for self._size.",self . _size = self . _get_size_from_underlying_file ( )
"if timeout is greater than integer 2592000,",if timeout > 2592000 :
"source and previous result. if TemplateDoesNotExist exception is caught,",except TemplateDoesNotExist :
call the method self.xml.startElement with an argument string 'natural'.,"self . xml . endElement ( ""natural"" )"
call the method block_context.push with 2 arguments: self.name and push.,"block_context . push ( self . name , push )"
derive the class CsrfTokenNode from Node base class.,class CsrfTokenNode ( Node ) :
do nothing.,pass
"otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,",elif total_forms > self . max_num >= 0 :
define the method content with an argument self.,def content ( self ) :
"if value is not contained in result,",if value is not result :
"for every pattern in reversed list self.url_patterns,",for pattern in reversed ( self . url_patterns ) :
where '%s' is replaced with name and taglib. call the method parser.add_library with an argument temp_lib.,parser . add_library ( temp_lib )
"raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.","v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
from django.utils.functional import total_ordering into default name space.,from django . utils . functional import total_ordering
define the function next_char with an argument input_iter.,def next_char ( input_iter ) :
"substitute '%s' in a string ""\nCreated new merge migration %s"" with writer path, write it to self.stdout.","self . stdout . write ( ""\nCreated new merge migration %s"" % writer . path )"
"define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.","def entity_decl ( self , name , is_parameter_entity , value , base , sysid , pubid , notation_name ) :"
return nothing.,return
"try,",try :
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.,"date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )"
do nothing.,pass
"if not,",else :
from django.utils.functional import allow_lazy into default name space.,from django . utils . functional import allow_lazy
"return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.","return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )"
"call the function random_module.choice with an argument value, return the result.",return random_module . choice ( value )
"substitute the result for value. call the function avoid_wrapping with an argument value, return the result.",return avoid_wrapping ( value )
check_for_language is lambda function that returns boolean True for every argument x.,check_for_language = lambda x : True
derive the class AssignmentNode form the base class TagHelperNode.,class AssignmentNode ( TagHelperNode ) :
substitute xreadlines for __iter__.,__iter__ = xreadlines
remove entry at the key key of the attrs dictionary.,attrs . pop ( key )
"if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.","has_new_option = hasattr ( self , 'requires_system_checks' )"
"otherwise if value is an instance of datetime.datetime,","elif isinstance ( value , datetime . datetime ) :"
substitute it for localedir. use_null_fallback is boolean True.,use_null_fallback = True
"call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.",msg = self . style . HTTP_NOT_MODIFIED ( msg )
"instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,",exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
import module hashlib.,import hashlib
"if ValueError or TypeError exceptions occurred,","except ( ValueError , TypeError ) :"
"call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.","template , origin = find_template ( template_name , dirs )"
"raise an TemplateSyntaxError exception with an argument string ""Malformed arguments to url tag"".","raise TemplateSyntaxError ( ""Malformed arguments to url tag"" )"
fp is a instance of a class six.StringIO.,fp = six . StringIO ( )
define the method display with an argument self.,def display ( self ) :
"call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.","super ( DateTimeBaseInput , self ) . __init__ ( attrs )"
"define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.","def as_textarea ( self , attrs = None , ** kwargs ) :"
"if self._dir file path does not exists,",if not os . path . exists ( self . _dir ) :
define the method __str__ with an argument self.,def __str__ ( self ) :
"separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop, substitute '%s' with reversed_text. define the method __iter__ with an argument self.",def __iter__ ( self ) :
define the method split_contents with an argument self.,def split_contents ( self ) :
"call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,","proxy = lazy ( func , resultclass ) ( ** kwargs )"
return boolean False.,return False
"slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.",new_path = path [ match . end ( ) : ]
"derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:","class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :"
"call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method get_by_natural_key,",return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
"call the os.path.getsize function with argument self.file.name, return the result.",return os . path . getsize ( self . file . name )
"use the result as an argument for the call to the json.dumps function, return the result. define the method as_text with an argument self.",def as_ul ( self ) :
"if not,",else :
substitute operator.getitem for indexbytes.,indexbytes = operator . getitem
"if not,",else :
"for every s_opt in parser.option_list. for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,",prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
"call the method app_config.get_models, substitute the result fr model_list.",model_list = app_config . get_models ( )
"otherwise if ch is contained in string ""*?+{"",","elif ch in ""*?+{"" :"
"if resource_string is not None,",if resource_string is not None :
"define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,","def __init__ ( self , dict_ = None , autoescape = True , current_app = None , use_l10n = None , use_tz = None ) :"
"for every name and var in return value of the function six.iteritems called with an argument self.extra_context. if self.isolated_context is true,",if self . isolated_context :
from django.conf import settings into default name space.,from django . conf import settings
do nothing.,pass
define the method start_index with an argument self.,def start_index ( self ) :
"call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.",field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
substitute length for self._remaining.,self . _remaining = length
"if default is true and RAISE_ERROR is false,",if default is not RAISE_ERROR :
"if mem_args is contained in cache,",if mem_args in cache :
"first element of bits and first element of remaining_bits. call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.","nodelist = parser . parse ( ( 'endwith' , ) )"
"evaluate the self.has_key method with key as argument, return the result.",return self . has_key ( key )
"define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList ) :"
"categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.",categories = [ force_text ( c ) for c in categories ]
from django.utils.functional import curry and Promise into default name space.,"from django . utils . functional import curry , Promise"
append string '</select>' to output.,output . append ( '</select>' )
"define the method get_many with 3 arguments, self class instance, keys and version set to None.","new_keys = [ self . make_key ( x , version = version ) for x in keys ]"
"if source is an instance of inst class,","if isinstance ( source , inst ) :"
directory_created is an empty dictionary.,directory_created = { }
substitute auto_id for value under the 'id' key of the attrs dictionary.,attrs [ 'id' ] = auto_id
"call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.",db = router . db_for_write ( self . cache_model_class )
"if as_ is not equal to string 'as',",if as_ != 'as' :
"(?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)"", where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string ""\w\."", 'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR, anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR. call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,","filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )"
"if not,",else :
label is a string 'label',label = 'label'
substitute timeout for self.timeout.,self . timeout = timeout
"call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:","handler . addQuickElement ( ""category"" , """" , { ""term"" : cat } )"
"if self.localize is true,",if self . localize :
derive the class Truncator form the SimpleLazyObject class.,class Truncator ( SimpleLazyObject ) :
"where '%s' is replaced with parse_until elements joined into a string, separated with ', '. define the method compile_filter_error with 3 arguments: self, token and e.","def compile_filter_error ( self , token , e ) :"
"if ImportError, renamed to exc, exception is caught,",except ImportError as exc :
"gett self.attr from the module object, return it.","return getattr ( module , self . attr )"
"if not,",else :
old_style_list is boolean True.,old_style_list = True
"substitute the result for value under the index key of the hextets dictionary. get the value under the index key of the hextets dictionary, if it is false,",if not hextets [ index ] :
"call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.","url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )"
return boolean False.,return False
"call the method self.max_expr.resolve with an argument context, substitute the result for max_value.",max_value = self . max_expr . resolve ( context )
substitute localize for self.localize.,self . localize = localize
"call the method self.iteritems, return list of results.",return list ( self . iteritems ( ) )
define the function safeseq with an argument value.,def safeseq ( value ) :
"get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,","isolated_context = options . get ( 'only' , False )"
"call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.","data = data . encode ( fp . encoding , errors )"
"define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.","def __wrapper__ ( self , * args , ** kw ) :"
define the function escape_quotes with an argument m.,def escape_quotes ( m ) :
"finally perform,",finally :
"from .. import Warning, register and Tags into default name space.","from . . import Warning , register , Tags"
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
do nothing.,pass
raise an exception.,raise
child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.,"child_nodelists = ( 'nodelist_true' , 'nodelist_false' )"
"if attrvalue is not an empty string,",if attrvalue :
"if bcc is true,",if bcc :
"get the value under the 'indent' key of self.options dictionary, if it is true,",if self . options . get ( 'indent' ) :
cache is an empty dictionary.,cache = dict ( )
"define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
call the method parser.delete_first_token.,parser . delete_first_token ( )
"call the method block_context.pop with an argument self.name, assign the result to push and block.",push = block = block_context . pop ( self . name )
"call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,","starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )"
substitute second element of elt for param.,param = elt [ 1 ]
"define the method emit_post_migrate with arguments verbosity, interactive and database.","def emit_post_migrate ( verbosity , interactive , database ) :"
"if ImportError exception is caught,",except ImportError :
append a tuple with 2 entries lang and priority to result.,"result . append ( ( lang , priority ) )"
set attr attribute of the self object to value.,"setattr ( self , attr , value )"
"if not,",else :
"return dictionary created out of tuple elements k and printable representation of v,","return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )"
format_key is a string 'DATETIME_INPUT_FORMATS'.,format_key = 'DATETIME_INPUT_FORMATS'
derive the class IPAddressField from the base class CharField class.,class IPAddressField ( CharField ) :
return self.__to_language.,return self . __to_language
"if not,",else :
"special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.","special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]"
"if item_date is true,",if item_date :
"open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.","sys . stderr = open ( err_log , 'a' , buffering )"
set opname attribute of cls object to opfunc.,"setattr ( cls , opname , opfunc )"
define the method _should_delete_form with an argument self.,"def _should_delete_form ( self , form ) :"
"call the method urlparse with an argument url, substitute the result for bits.",bits = urlparse ( url )
import module os.,import os
from django.dispatch import Signal into default name space.,from django . dispatch import Signal
"if middle starts with opening,",if middle . startswith ( opening ) :
"sum bottom and self.per_page, substitute the result for top.",top = bottom + self . per_page
"call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.","base , ext = os . path . splitext ( base )"
"from django.utils.html import format_html, format_html_join and escape into default name space.","from django . utils . html import format_html , format_html_join , escape"
call the method self.configure_root with an argument root.,self . configure_root ( root )
"call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.","formfield = formfield_callback ( f , ** kwargs )"
"if not,",else :
"if not,",else :
"if localized_fields is not None,",if localized_fields is not None :
"substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,","return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )"
replace tags for check.tags.,check . tags = tags
"self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,","self . connection = connection_class ( self . host , self . port , ** connection_params )"
"call the method node.render with an argument context, return the result.",return node . render ( context )
call the method closable.close.,closable . close ( )
derive the class MediaDefiningClass from the type base class.,class MediaDefiningClass ( type ) :
substitute prefix for common_prefix.,common_prefix = prefix
"if verbosity is greater or equal to integer 2,",if verbosity >= 2 :
append f.name to ignored list.,ignored . append ( f . name )
"value under the 'primary_key' key of the extra_params dictionary is boolean True,",extra_params [ 'primary_key' ] = True
"if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,","return ( ( not url_info . netloc or url_info . netloc == host ) and ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )"
"call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,",if self . domain_regex . match ( domain_part ) :
"if self.is_bound is true,",if self . is_bound :
import module os.,import os
"call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,","self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )"
print opt_label to the standard output.,print ( opt_label )
"if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.","safe_input = isinstance ( text , SafeData )"
from django.core.management import call_command into default name space.,from django . core . management import call_command
"if KeyError exception is caught,",except KeyError :
"define the function get_template_from_string with 3: source, origin set to None and name set to None.","def get_template_from_string ( source , origin = None , name = None ) :"
substitute digits for self.digits.,self . digits = digits
return proxy.,return proxy
"if new_name is contained in used_column_names,",if new_name in used_column_names :
"if _globs_ is None,",if _globs_ is None :
substitute _globs_ with an argument _locs_.,_locs_ = _globs_
"get frag attribute from found object, substitute it for found.","found = getattr ( found , frag )"
do nothing,pass
lineno_comment_map is an dictionary.,lineno_comment_map = { }
"split server with ';' as delimiter, substitute the result for self._servers.",self . _servers = server . split ( ';' )
"if code is None,",if code is None :
"where '%d' is replaced with name, dlen subtracted from alen, and plen. return boolean True.",return True
append None to bits.,bits . append ( None )
return default.,return default
"call the function get_token with an argument request, substitute the result for token.",token = get_token ( request )
append str_hidden to output.,output . append ( str_hidden )
return dec.,return dec
"append the result to pieces. otherwise if piece is true,",elif piece :
"for every key in self,",for key in self :
"if indent is false,",if not indent :
"call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.",options = parser . parse_args ( argv [ 2 : ] )
do nothing.,pass
"call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.","return super ( BaseModelFormSet , self ) . initial_form_count ( )"
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.,raise ContentNotRenderedError ( 'The response content must be ' 'rendered before it can be pickled.' )
"help is a string ""Updates database schema. Manages both apps with migrations and those without."".","help = ""Updates database schema. Manages both apps with migrations and those without."""
EventHandler.modified_code is FILE_MODIFIED.,EventHandler . modified_code = FILE_MODIFIED
"decorator stringfilter,",@ stringfilter
"if fname file path exists,",if os . path . exists ( fname ) :
define the method add_aguments with arguments self and parser.,"def add_arguments ( self , parser ) :"
"bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.",MAXSIZE = int ( ( 1 << 63 ) - 1 )
field_list is an empty list.,field_list = [ ]
return response.,return response
return None.,return None
import module gettext as gettext_module.,import gettext as gettext_module
"call the function check_for_language with an argument lang, if it evaluates to false,",if not check_for_language ( lang ) :
value is None.,value = None
"define the initialization method __init__ with 3 arguments: self, name and params.","def __init__ ( self , name , params ) :"
"call the method self._iteritems, for every k and v in the result,","for k , v in self . _iteritems ( ) :"
result is an integer 0.,result = 0
"call the method content.decode with an argument string 'utf-8', substitute it for content.",content = content . decode ( 'utf-8' )
"if level is not None,",if level is not None :
define the function save_m2m.,def save_m2m ( ) :
"if not,",else :
"replace every occurrence of '\\' in tok with 'U', substitute the result for tok.","tok = tok . replace ( ""\\"" , ""U"" )"
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.,class DjangoTranslation ( gettext_module . GNUTranslations ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
combined is an instance of Media class.,combined = Media ( )
define the method __eq__ with arguments self and other.,"def __eq__ ( self , other ) :"
"get property attribute _get_width, and substitute it for width.",width = property ( _get_width )
substitute pickled for value under the key key of self._cache dictionary.,self . _cache [ key ] = pickled
return input_val.,return input_val
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.,raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
"if value is false,",if not value :
"if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.",is_relation = i in relations
"call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.","val1 = self . var1 . resolve ( context , True )"
define the method url with arguments self and name.,"def url ( self , name ) :"
substitute warning for self.warning.,self . warning = warning
call the function cache.close.,cache . close ( )
"call the function get_callable with an argument callback, return the result and an empty dictionary.","return get_callable ( callback ) , { }"
"if m is false,",if not m :
"if cleaned_line ends with ';' character,","if cleaned_line . endswith ( "";"" ) :"
"where '%s' is replaced with first upto elements of token string, token string elements from upto to start index, and token string elements from start index to the end. if var_obj is None,",if var_obj is None :
"if OSError, renamed to e, exception is caught,",except OSError as e :
"if self is an instance of nodetype,","if isinstance ( self , nodetype ) :"
"if sub_tried is not None,",if sub_tried is not None :
return msg_count.,return msg_count
"call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.","self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )"
return an empty string.,return ''
import pickle.,import pickle
decorator function wraps with an argument fdel.,@ wraps ( fdel )
define the method _cache with argument self.,def _cache ( self ) :
from django.core.files.utils import FileProxyMixin into default name space.,from django . core . files . utils import FileProxyMixin
"if value is boolean True, string 'True' or string '1',","if value in ( True , 'True' , '1' ) :"
"RemovedInDjango19Warning and integer 2 as arguments. if self does not have an '_request' attribute,","if not hasattr ( self , '_request' ) :"
"define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.","def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :"
"define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,","def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :"
"call the method match.end, substitute the result for upto.",upto = match . end ( )
"name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset, and content_type_extra set to self.content_type_extra, return it. define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.","def load_handler ( path , * args , ** kwargs ) :"
from django.conf import settings into default name space.,from django . conf import settings
call the s.serialize method with arguments queryset and unpacked dictionary options.,"s . serialize ( queryset , ** options )"
define the method read with self class instance and size set to None as arguments.,"def read ( self , size = None ) :"
otherwise if name equals a string 'id'.,elif name == 'id' :
from django.apps import apps into default name space.,from django . apps import apps
"substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,",last [ NEXT ] = root [ PREV ] = cache [ key ] = link
define the function gettext with an argument message.,def gettext ( message ) :
TOKEN_VAR is integer 1,TOKEN_VAR = 1
"otherwise if self.reason_phrase is None,",elif self . reason_phrase is None :
"call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.",b64encoded = b64encoded . decode ( 'latin1' )
"split ip_str into parts by ':', if '.' is contained in the last element of the result,",if '.' in ip_str . split ( ':' ) [ - 1 ] :
"call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,","with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :"
d is an instance of Decimal class created with an argument input_val.,d = Decimal ( input_val )
"try,",try :
for every cache in return value of the function caches.all.,for cache in caches . all ( ) :
call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.,stream . unget ( chunk [ header_end + 4 : ] )
"if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.",available_shells = [ shell ] if shell else self . shells
append template_dir to app_template_dirs.,app_template_dirs . append ( template_dir )
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.,"from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist"
"password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection. call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,","messages = [ EmailMessage ( subject , message , sender , recipient , connection = connection ) for subject , message , sender , recipient in datatuple ]"
"if message is an instance of dict type,","if isinstance ( message , dict ) :"
return self._upload_handlers.,return self . _upload_handlers
substitute value for field.name key of self._current dictionary.,self . _current [ field . name ] = value
"if response.streaming is boolean False,",if not response . streaming :
"call the method parser.compile_filter with an argument first element of bits, substitute the result for target.",target = parser . compile_filter ( bits [ 1 ] )
return all the results in a list. decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"if not,",else :
new_second_item is an empty list.,new_second_item = [ ]
define the method IE_sanitize with arguments self and filename.,"def IE_sanitize ( self , filename ) :"
"split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.","name , value = main_value_pair . split ( ':' , 1 )"
"try,",try :
return None.,return None
import module decimal.,import decimal
"if i-th element of subject is '""' character or ""'"" character,","if subject [ i ] in ( '""' , ""'"" ) :"
call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.,"mail . attach_alternative ( html_message , 'text/html' )"
define the method __call__ with arguments self and value.,"def __call__ ( self , value ) :"
"replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.",basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs if os . path . isdir ( basedir ) ]
return r.,return r
current_len is equal to integer 0.,current_len = 0
"help is a tuple containing a string ""Runs the command-line client for specified database, or the default database if none is provided."".","help = ( ""Runs the command-line client for specified database, or the "" ""default database if none is provided."" )"
"call the method self.create_token with 2 arguments bit and in_tag, append the result to result.","result . append ( self . create_token ( bit , in_tag ) )"
"try,",try :
define the method __getstate__ with an argument self.,def __getstate__ ( self ) :
substitute size for self.size.,self . size = size
"call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,","handler . addQuickElement ( ""lastBuildDate"" , rfc2822_date ( self . latest_post_date ( ) ) )"
"where '%s' is replaced with opts.object_name and fail_message, respectively. define the function save_m2m.",def save_m2m ( ) :
"call the method match.groupdict, substitute the result for kw.",kw = match . groupdict ( )
"substitute the '%s' with table and list containing key, respectively. fetch one entry from the database that cursor points at, substitute it for the result.",result = cursor . fetchone ( )
define the method sign with arguments self and value.,"def sign ( self , value ) :"
"help is a string ""Squashes an existing set of migrations (from first until specified) into a single new one."".","help = ""Squashes an existing set of migrations (from first until specified) into a single new one."""
substitute self.fk.name for name.,name = self . fk . name
"if _serializers is false,",if not _serializers :
do nothing.,pass
call the function _load_serializers.,_load_serializers ( )
"call the function middleware_method with the request and response as the arguments, assign the result to response.","response = middleware_method ( request , response )"
"call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.",input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
streaming is boolean True.,streaming = True
self._files is an instance of class MultiValueDict. define the method close with an argument self.,def close ( self ) :
import module sys.,import sys
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","handler . addQuickElement ( ""link"" , """" , { ""rel"" : ""self"" , ""href"" : self . feed [ 'feed_url' ] } )"
inplural is boolean True.,inplural = True
"if self.data.hour equals integer 0,",if self . data . hour == 0 :
"if filename ends with string '.mo',",if filename . endswith ( '.mo' ) :
define the method handle with 3 arguments: self and unpacked dictionary options.,"def handle ( self , ** options ) :"
"raise an CommandError exception with an argument string ""%r is not a valid port number."", where '%r' is repaced with self.port.","raise CommandError ( ""%r is not a valid port number."" % self . port )"
"split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.",project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
derive the class HttpResponseBase from the six.Iterator base class.,class HttpResponseBase ( six . Iterator ) :
import module warnings.,import warnings
"get the value under the key 'exclude' of the options dictionary, substitute it for exclude.",exclude = options . get ( 'exclude' )
"call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.","output . append ( self . render_option ( selected_choices , option_value , option_label ) )"
"call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.","nm = Header ( nm , encoding ) . encode ( )"
define the function _generator.,def _generator ( ) :
"if self.fail_silently is boolean False,",if not self . fail_silently :
"if key is not contained in self,",if key not in self :
"try,",try :
"define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , input_formats = None , * args , ** kwargs ) :"
derive the class MergeDict from the object base class.,class MergeDict ( object ) :
from django.template.base import TemplateDoesNotExist into default name space.,from django . template . base import TemplateDoesNotExist
"write string "" Installing indexes...\n"" to the standard output.","self . stdout . write ( "" Installing indexes...\n"" )"
import module time.,import time
"call the method self.nodelist.render with an argument context, return the result.",return self . nodelist . render ( context )
"get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.",excludes = options . get ( 'exclude' )
"call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,","handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )"
"if query_string is an instance of bytes,","if isinstance ( query_string , bytes ) :"
status_code is an integer 200.,status_code = 200
call the add_arguments method from the base class of the class Command with parser as an argument.,"super ( Command , self ) . add_arguments ( parser )"
from django.db.migrations import Migration into default name space.,from django . db . migrations import Migration
output_transaction is boolean True.,output_transaction = True
self.error_class is a string 'errorlist'.,self . error_class = 'errorlist'
"slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.",self . __starttag_text = rawdata [ i : endpos ]
"call the method self.as_ul, return the result.",return self . as_ul ( )
substitute first size elements of self.buffer for result.,result = self . buffer [ : size ]
"call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,","callback , param_dict = resolver . resolve_error_handler ( 500 )"
"call the method m.end with an argument integer 0, substitute the result for pos.",pos = m . end ( 0 )
"define the method handle_m2m_field with argument self, obj and field.","def handle_m2m_field ( self , obj , field ) :"
"return an empty string,",return ''
remove first 2 and last 2 elements from var.,var = var [ 2 : - 1 ]
"call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.","contents = one_percent_re . sub ( '%%' , t . contents )"
settings.USE_I18N is boolean True.,settings . USE_I18N = True
"and help set to string 'One or more application label.'. define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.","def handle ( self , * app_labels , ** options ) :"
"if field_value is an instance of the str type,","if isinstance ( field_value , str ) :"
write data bytes to outfile.,outfile . write ( data )
call the method command.stdout.write with an argument errors.,command . stdout . write ( errors )
"default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'. call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.","parser . add_argument ( '--addrport' , default = '' , help = 'Port number or ipaddr:port to run the server on.' )"
insert token at the beginning of self.tokens.,"self . tokens . insert ( 0 , token )"
from django.core.management import call_command into default name space.,from django . core . management import call_command
if data is an instance of bytes.,"if isinstance ( data , bytes ) :"
"decorator stringfilter,",@ stringfilter
"get the position of the file self.file pointer, substitute it for size.",size = self . file . tell ( )
"if app_config.models_module is None,",if app_config . models_module is None :
"if error has an attribute 'error_dict',","if hasattr ( error , 'error_dict' ) :"
"name is a string ""_%d"" formated with num_args.","name = ""_%d"" % num_args"
"get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.","value = data . get ( name , None )"
"define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.","def load_template_source ( self , template_name , template_dirs = None ) :"
"get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","return iter ( getattr ( d , _iterkeys ) ( ** kw ) )"
define the method __repr__ with argument self.,def __repr__ ( self ) :
substitute _iterkeys for __iter__.,__iter__ = _iterkeys
"from django.core.urlresolvers import reverse, NoReverseMatch.","from django . core . urlresolvers import reverse , NoReverseMatch"
return self._errors.,return self . _errors
define the method _get_name with argument self.,def _get_name ( self ) :
"call the function datetime.utcnow, substitute the result for now.",now = datetime . utcnow ( )
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:,"context [ self . var_name ] = [ { 'grouper' : key , 'list' : list ( val ) } for key , val in groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) ) ]"
"call the function force_text with an argument message, return the result.",result = force_text ( message )
"if register_to is true,",if register_to :
"msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.","msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )"
return the value under the language_code key of the self._reverse_dict dictionary.,return self . _reverse_dict [ language_code ]
"if exception LookupError is caught,",except LookupError :
"get format_type attribute of module object, substitute the result for val.","val = getattr ( module , format_type )"
"if not,",else :
"if not,",else :
"if self.verbosity is greater or equal to integer 1,",if self . verbosity >= 1 :
"call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively. append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,",digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
"call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.",wrapped_callback = self . make_view_atomic ( callback )
return guessed_path.,return guessed_path
truncate the last element of filename.,filename = filename [ : - 1 ]
"if not,",else :
define the method clean with arguments self and value.,"def clean ( self , value ) :"
"call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.","return super ( SimpleTemplateResponse , self ) . __iter__ ( )"
"try,",try :
"if value is None,",if value is None :
"if self.required is true,",if self . required :
do nothing.,pass
"try,",try :
"call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.",default_translation = translation ( settings . LANGUAGE_CODE )
"call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.","values = self . sequence . resolve ( context , True )"
"if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.",PY2 = sys . version_info [ 0 ] == 2
define the method as_json with 2 arguments self and escape_html set to boolean False.,"def as_json ( self , escape_html = False ) :"
"raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both ""requires_model_validation"" '","raise ImproperlyConfigured ( 'Command %s defines both ""requires_model_validation"" ' 'and ""requires_system_checks"", which is illegal. Use only ' '""requires_system_checks"".' % self . __class__ . __name__ )"
"call the method m.groupdict, substitute the result for d.",d = m . groupdict ( )
"if six.PY2 is boolean True,",if six . PY2 :
define the function get_script_prefix.,def get_script_prefix ( ) :
"try,",try :
from django.utils import six into default name space.,from django . utils import six
substitute second element of bits without the first and last element for format_string.,format_string = bits [ 1 ] [ 1 : - 1 ]
"replace ""%s"" from the string ' class=""%s""' with css_classes, substitute it for html_class_attr.","html_class_attr = ' class=""%s""' % css_classes"
"call the method self.stdout.write with an argument string ""Installed %d object(s) (of %d) from %d fixture(s)"",","self . stdout . write ( ""Installed %d object(s) (of %d) from %d fixture(s)"" % ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )"
substitute i-th element of self.forms for form.,form = self . forms [ i ]
call the function _load_serializers.,_load_serializers ( )
"get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.",register_to = kwargs . get ( 'register_to' )
"define the method get with 3 arguments: self, header and alternate set to None.","def get ( self , header , alternate = None ) :"
from django.utils.encoding import python_2_unicode_compatible into default name space.,from django . utils . encoding import python_2_unicode_compatible
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"do nothing,",pass
"if year is lesser than integer 70,",if year < 70 :
define the method _send with arguments self and email_message.,"def _send ( self , email_message ) :"
"if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,",label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None else self . form . label_suffix )
"call the self._lock.writer method, with the result perform the following,",with self . _lock . writer ( ) :
"flat is an empty dictionary,",flat = { }
"DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space. __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',","__all__ = [ 'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' , 'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' , 'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' , 'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' , 'mail_managers' , ]"
define the function do_if with 2 arguments: parser and token.,"def do_if ( parser , token ) :"
"if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.",self . extra_headers = headers or { }
"for every key_value in natural,",for key_value in natural :
"description is a string ""The '%s' function"" replaced by value of receiver.__name__.","description = ""The '%s' function"" % receiver . __name__"
"get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.",self . keep_pot = options . get ( 'keep_pot' )
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
parser._namedCycleNodes is an empty dictionary.,parser . _namedCycleNodes = { }
"if 'date' is not in header_names,",if 'date' not in header_names :
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
define the function center with 2 arguments value and arg.,"def center ( value , arg ) :"
"if bad_app_labels is true,",if bad_app_labels :
define the method __getitem__ with an argument self.,"def __getitem__ ( self , i ) :"
import module calendar.,import calendar
"otherwise if value is an instance of datetime.time,","elif isinstance ( value , datetime . time ) :"
"call the function datetime_safe.new_datetime with an argument date, substitute the result for date.",date = datetime_safe . new_datetime ( date )
call the method logger.removeHandler with an argument h.,logger . removeHandler ( h )
import module warnings.,import warnings
object_data is an empty dictionary.,object_data = { }
substitute self.files for value under the 'files' key of the defaults dictionary.,defaults [ 'files' ] = self . files
"decorator stringfilter,",@ stringfilter
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
"for every handler in handlers,",for handler in handlers :
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.,"parser . add_argument ( 'name' , help = 'Name of the application or project.' )"
return attachment.,return attachment
"filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,","print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )"
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.,"class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :"
call the function os.unlink with an argument work_file.,os . unlink ( work_file )
if ending is None substitute self.ending for ending.,ending = self . ending if ending is None else ending
"define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,","def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , cc = None ) :"
do nothing.,pass
"if not,",else :
from django.core.exceptions import ValidationError into default name space.,from django . core . exceptions import ValidationError
return self._fqdn.,return self . _fqdn
return the length of self.children.,return len ( self . children )
"from django.utils.text import Truncator, wrap and phone2numeric into default name space.","from django . utils . text import Truncator , wrap , phone2numeric"
from django.db import models into default name space.,from django . db import models
"if ImportError exception is caught,",except ImportError :
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.,"params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }"
"try,",try :
help is a string 'Runs a development server with data from the given fixture(s).'.,help = 'Runs a development server with data from the given fixture(s).'
"if SystemExit exception is caught,",except SystemExit :
"call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.","proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )"
"if not,",else :
"return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,","return lambda text : colorize ( text , opts , ** kwargs )"
"define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,","def modelform_factory ( model , form = ModelForm , fields = None , exclude = None , formfield_callback = None , widgets = None , localized_fields = None , labels = None , help_texts = None , error_messages = None ) :"
yield string 'day' as an return value of the generator.,yield 'day'
"'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'. if value under the 'feed_url' key of the self.feed dictionary is not None,",if self . feed [ 'feed_url' ] is not None :
"if middleware has an attribute 'process_response',","if hasattr ( middleware , 'process_template_response' ) :"
"if i is greater than, or equal to subject,",if i >= len ( subject ) :
supported is boolean True.,supported = True
"raise a TypeError exception,",raise TypeError
"decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and ""@',","decorator = Node ( syms . decorator , [ Leaf ( token . AT , ""@"" ) , Name ( 'python_2_unicode_compatible' ) ] )"
plural is an empty list.,plural = [ ]
break from the smallest enclosing loop execution.,break
define the method close with an argument self.,def close ( self ) :
can_import_settings is boolean False.,can_import_settings = False
"if id_ is true,",if id_ :
"bring integer 36 to the power of factor, substitute the result for j.",j = 36 ** factor
return raw_data.,return raw_data
return get_git_changeset.cache.,return get_git_changeset . cache
"convert new_name to a string and append string 'field' to it, substitute the result for new_name.",new_name = '%sfield' % new_name
"get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,","for match in regexes [ state ] . finditer ( text , start ) :"
"if not,",else :
"try,",try :
bits is an empty list.,bits = [ ]
import module io.,import io
"calculate length of chunk modulo integer 4, substitute the result for over_bytes.",over_bytes = len ( chunk ) % 4
"define the method getlist with 3 arguments: self, key and default set to None.","def getlist ( self , key , default = None ) :"
"for every d in reversed list self.dicts,",for d in reversed ( self . dicts ) :
"get self.to_field attribute of self.parent_instance, substitute it for orig.","orig = getattr ( self . parent_instance , self . to_field )"
"define the method receive_data_chunk with arguments: self, raw_data and start.","def receive_data_chunk ( self , raw_data , start ) :"
cal the method self.startElement with 2 arguments: name and attrs.,"self . startElement ( name , attrs )"
do nothing.,pass
"raise an ValueError with an argument string ""The %s could not be %s because the data didn't validate."",","raise ValueError ( ""The %s could not be %s because the data didn't"" "" validate."" % ( opts . object_name , fail_message ) )"
"if record.exc_info is true,",if record . exc_info :
substitute complain for remove.,remove = complain
"for every key and value in data.items function return value,","for key , value in data . items ( ) :"
"call the method formats.sanitize_separators with an argument value, substitute the result for value.",value = formats . sanitize_separators ( value )
"if _time.daylight is true,",if _time . daylight :
if encoding equals to string 'utf-8'.,if encoding == 'utf-8' :
args is an empty tuple.,args = ( )
"call the method time.localtime with an argument stamp, substitute the result for tt.",tt = time . localtime ( stamp )
"call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,","msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )"
"if year is lesser than integer 100,",if year < 100 :
_format_cache is an empty dictionary.,_format_cache = { }
"for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,","for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :"
"call the method arg.resolve with an argument context, append the result to arg_vals.",arg_vals . append ( arg . resolve ( context ) )
"convert number to string, if first element equals to sign,",if str ( number ) [ 0 ] == sign :
from django.utils.text import normalize_newlines into default name space.,from django . utils . text import normalize_newlines
do nothing.,pass
"if not,",else :
cache_key is a tuple with 2 argumetns: format_type and lang.,"cache_key = ( format_type , lang )"
substitute value for self.value.,self . value = value
"if header list is not None,",if headerlist is not None :
biggest_number is integer 1.,biggest_number = 1
define the method __bool__ with argument self.,def __bool__ ( self ) :
"substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.",host = self . META [ 'HTTP_HOST' ]
"with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively. if self.show_traceback is true,",if self . show_traceback :
"if jan1_weekday is greater than integer 4,",if jan1_weekday > 4 :
if self._cull_frequency equals to integer 0.,if self . _cull_frequency == 0 :
derive the class RegroupNode from Node base class.,class RegroupNode ( Node ) :
nodelist_false is an instance of NodeList class.,nodelist_false = NodeList ( )
DEBUG is integer 10.,DEBUG = 10
call the method deactivate.,deactivate ( )
"candidate_pat formated with candidate_subs and re.UNICODE. candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,","candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )"
"with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise. call the response.render() method and assign the return to the response.",response = response . render ( )
substitute sup_cls.media for base.,base = sup_cls . media
do nothing.,pass
skip this loop iteration.,continue
"call the method pretty_name with an argument name, substitute the result for self.label.",self . label = pretty_name ( name )
return base and ext.,"return base , ext"
"if email_messages is false,",if not email_messages :
"if not,",else :
import module sys.,import sys
"and _allow_fallback set to boolean True, extend the output with the result. return output.",return output
return nothing.,return
"convert items of attrs dictionary to list of tuples, for every attr and value in it,","for attr , value in list ( attrs . items ( ) ) :"
"try,",try :
self.charset is None.,self . charset = None
"substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.","extra , resolver = resolver . namespace_dict [ ns ]"
"call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.","attrs = super ( IntegerField , self ) . widget_attrs ( widget )"
"call the method time.mktime with an argument tt, substitute the result for stamp.",stamp = time . mktime ( tt )
define the emethod parse with 2 arguments: self and parse_until set to None.,"def parse ( self , parse_until = None ) :"
element of data at the index last equals to carriage return bytes character.,if data [ last : last + 1 ] == b'\r' :
"where '%s' is replaced with filter_name. call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.","nodelist = parser . parse ( ( 'endfilter' , ) )"
"substitute DEFAULT_MAX_NUM for max_num,",max_num = DEFAULT_MAX_NUM
"call the method m.groups, substitute the first element of the result for idx.",idx = m . groups ( ) [ 0 ]
"replace every occurrence of ""'"" in s with ""\\'"".","s = s . replace ( ""'"" , ""\\'"" )"
"replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.","return name . replace ( '_' , ' ' ) . capitalize ( )"
import module warnings.,import warnings
import module os.,import os
substitute cls.__text_cast for cls.__text_cast.,cls . __unicode__ = cls . __text_cast
define the method __len__ with argument self.,def __len__ ( self ) :
"call the method self.nodelist.render with an argument context, substitute the result for output.",output = self . nodelist . render ( context )
"if not,",else :
"call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.","prefix , rest = self . split_leading_dir ( path )"
"compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.",WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
define the function csrf with an argument request.,def csrf ( request ) :
"define the method add_arguments, with 2 arguments self and parser.","def add_arguments ( self , parser ) :"
substitute self.field.label for self.label.,self . label = self . field . label
"call the method token.contents.split, substitute the result for bits.",bits = token . contents . split ( )
"call the method self.make_key with key and version set to version as arguments, substitute it for key.","key = self . make_key ( key , version = version )"
meta is a string '<could not parse>'.,meta = '<could not parse>'
write msg to self.stderr stream.,self . stderr . write ( msg )
"call the function color_style, substitute the result for self.style.",self . style = color_style ( )
"replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string ""unicode_escape"",","return unicode ( s . replace ( r'\\' , r'\\\\' ) , ""unicode_escape"" )"
iterator is None.,iterator = None
"if initial is not equal to data, return boolean True, if it is return boolean False.",return initial != data
substitute first element of level for common_ancestor.,common_ancestor = level [ 0 ]
return data.,return data
return boolean False.,return False
return attrs.,return attrs
remove dirname from the dirnames.,dirnames . remove ( dirname )
"if not,",else :
"if not,",else :
substitute i-th element of self.forms for form.,form = self . forms [ i ]
define the method write with 2 arguments: self and value.,"def write ( self , content ) :"
return boolean False.,return False
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.,"default_attrs = { 'cols' : '40' , 'rows' : '10' }"
"if LookupError exception is caught,",except LookupError :
"for every format in settings.SERIALIZATION_MODULES,",for format in settings . SERIALIZATION_MODULES :
"if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.",return self . is_bound and not self . errors
substitute self.registered_checks for checks.,checks = self . registered_checks
substitute out for self._out.,self . _out = out
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,","self . max_length = kwargs . pop ( 'max_length' , None )"
"if not,",else :
"define the method create_table with arguments self, database and tablename.","def create_table ( self , database , tablename ) :"
"call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.",sql_statements = executor . collect_sql ( plan )
"return instance of _HashedSeq class, created with an argument key.",return _HashedSeq ( key )
"call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.",self . _current [ field . name ] = field . value_to_string ( obj )
"for every model in model_list,",for model in model_list :
"if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',",if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
"if not,",else :
"call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.","value = bytes_to_text ( value , self . encoding )"
"call the method __init__ from the base class of the class Textarea, with an argument default_attrs.","super ( Textarea , self ) . __init__ ( default_attrs )"
define the method __eq__ with self and other arguments:,"def __eq__ ( self , other ) :"
return exclude.,return exclude
"try,",try :
"if filter_name is contained in self.filters,",if filter_name in self . filters :
"if not,",else :
substitute the second element of result for current_expires.,current_expires = result [ 1 ]
"if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.","autoescape = autoescape and not isinstance ( value , SafeData )"
request is None.,request = None
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.,"setattr ( base , old_method_name , wrapper ( new_method ) )"
"if lang_code is not contained in _supported and replacement is contained in _supported,",if lang_code not in _supported and replacement in _supported :
"for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.",return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
from django.db import connection into default name space.,from django . db import connection
"if ValidationError, substituted for e, exception is caught,",except ValidationError as e :
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'. return value.,return value
"if tried is true,",if tried :
if val equals an empty list.,if val == [ ] :
call the method cursor.execute with an argument sql.,cursor . execute ( sql )
"for second and third element of args, respectively. if length of args equals integer 2,",if len ( args ) == 2 :
define the function linebreaks_filter with 2 arguments value and autoescape set to None.,"def linebreaks_filter ( value , autoescape = None ) :"
"call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,","response = wrapped_callback ( request , * callback_args , ** callback_kwargs )"
self.pointer is integer 0.,self . pointer = 0
match is boolean True.,match = True
"if has_old_option is true,",if has_old_option :
"html set to boolean True and truncate set to string ' ...', return the result. decorator function register.filter with an argument is_safe set to boolean False.",@ register . filter ( is_safe = False )
"try,",try :
"call the method cache.set with cache_key, an empty list and cache_timeout as arguments.","cache . set ( cache_key , [ ] , cache_timeout )"
"if lang_code is not None,",if lang_code is not None :
"get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,",post = ( pformat ( POST_override ) if POST_override is not None else pformat ( request . POST ) )
skip this loop iteration.,continue
from django.db.utils import DatabaseError into default name space.,from django . db . utils import DatabaseError
self.cc is an empty list.,self . cc = [ ]
"sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.","return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )"
define the function Deserializer with arguments object_list and unpacked dictionary options.,"def Deserializer ( object_list , ** options ) :"
define the method clear with argument self.,def clear ( self ) :
"if IndexError exception is caught,",except IndexError :
app_dirs is an empty list.,app_dirs = [ ]
"substitute the result for proxy. if not,",else :
"if css_classes is true,",if css_classes :
existing_headers is a set containing lowercase strings header for every header in vary_headers.,existing_headers = set ( header . lower ( ) for header in vary_headers )
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.,"os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )"
"call the os.umask function with argument integer 0, substitute the result for old_umask.",old_umask = os . umask ( 0 )
"call the function re.compile with an argument string ""([\u0080-\uffff])"", substitute the result for ustring_re.","ustring_re = re . compile ( ""([\u0080-\uffff])"" )"
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.,kwargs [ 'label' ] = labels [ f . name ]
"while factor is greater or equal to integer 0,",while factor >= 0 :
return text.,return text
"call the method self.__class__ with an argument self, return the result.",return self . __class__ ( self )
define the method copy with an argument self.,def copy ( self ) :
define the method reset with an argument self.,def reset ( self ) :
call the django.setup method.,django . setup ( )
"if not,",else :
call the method self.connection.ehlo.,self . connection . ehlo ( )
return value.,return value
append data to self.children.,self . children . append ( data )
"substitute the result for sequence. call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.","nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )"
"if only_initial is false,",if not only_initial :
"call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,",return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
call the method settings.configure with an argument USE_I18N set to boolean True.,settings . configure ( USE_I18N = True )
"call the self.stderr.write method with string "" Installing index for %s.%s model\n"" as argument,","self . stdout . write ( "" Installing index for %s.%s model\n"" % ( app_name , model . _meta . object_name ) )"
"call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',","parser . add_argument ( '--traceback' , action = 'store_true' , help = 'Raise on exception' )"
"call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.","return super ( QueryDict , self ) . setdefault ( key , default )"
"join app_config.path and string 'templates' into file path, substitute it for template_dir.","template_dir = os . path . join ( app_config . path , 'templates' )"
write it to self.stdout. substitute Command for BaseRunserverCommand.,BaseRunserverCommand = Command
raise a ValidationError exception with arguments self.message and code set to self.code.,"raise ValidationError ( self . message , code = self . code )"
substitute settings.STATIC_URL for prefix.,prefix = settings . STATIC_URL
"if active has an attribute 'value',","if hasattr ( _active , ""value"" ) :"
"call the method template.render with an argument context, return the result.",return template . render ( context )
substitute resolver_match for request.resolver_match.,request . resolver_match = resolver_match
"ba_serializer is a instance of BadSerializer class, created with an argument exc.",bad_serializer = BadSerializer ( exc )
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.,lineno_comment_map [ comment_lineno_cache ] = [ ]
"if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string ""Cannot call lazy() with both bytes and text return types."".","assert not ( cls . _delegate_bytes and cls . _delegate_text ) , ""Cannot call lazy() with both bytes and text return types."""
"call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.",dow = days [ date . weekday ( ) ]
"if mail doesnt have an 'outbox' attribute,","if not hasattr ( mail , 'outbox' ) :"
"if settings.configured,",if settings . configured :
"call the method self.make_key with key and version set to version as arguments, substitute it for key.","key = self . make_key ( key , version = version )"
import module warnings.,import warnings
"if is_relation,",if is_relation :
return self.data.month.,return self . data . month
define the method update with 2 arguments: self and other_dict.,"def update ( self , other_dict ) :"
"substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.","usage = '%%prog %s [options] %s' % ( subcommand , self . args )"
from django.apps import apps into default name space.,from django . apps import apps
"BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: ""django.core.serializers.xml_serializer"" for ""xml"",","BUILTIN_SERIALIZERS = { ""xml"" : ""django.core.serializers.xml_serializer"" , ""python"" : ""django.core.serializers.python"" , ""json"" : ""django.core.serializers.json"" , ""yaml"" : ""django.core.serializers.pyyaml"" , }"
"decorator stringfilter,",@ stringfilter
from django.forms.extras.widgets import SelectDateWidget into default name space.,from django . forms . extras . widgets import SelectDateWidget
"return value, if it is None return arg.",return value or arg
yield emitting as result of the generator.,yield emitting
from threading import RLock.,from threading import RLock
_get_request is getter function for REQUEST attribute of this class.,REQUEST = property ( _get_request )
self.saved_forms is an empty list.,self . saved_forms = [ ]
"define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.","def load_template_source ( self , template_name , template_dirs = None ) :"
import time module.,import time
po_path is a string containing joined directory path from dirpath and f.,"po_path = os . path . join ( dirpath , f )"
append name to self._changed_data list.,self . _changed_data . append ( name )
define the function to_locale with an argument language.,def to_locale ( language ) :
"call the function __current_timezone with an argument value, return the result.",return from_current_timezone ( value )
"get the value under the 'database' key of the options dictionary, substitute it for self.database.",self . using = options . get ( 'database' )
"convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,",if str ( '\n' ) in value or str ( '\r' ) in value :
"if not,",else :
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.,"default_error_messages = { 'required' : _ ( 'This field is required.' ) , }"
raise an exception.,raise
derive the class DateFormat from the base class TimeFormat.,class DateFormat ( TimeFormat ) :
return fixture_files.,return fixture_files
"try,",try :
"self.object._meta.object_name and self.object.pk, respectively. define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.","def save ( self , save_m2m = True , using = None ) :"
"only if member.name is not equal to string 'pax_global_header'. call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.",leading = self . has_leading_dir ( x . name for x in members )
and unpacked dictionary kwargs. define the method render with 2 arguments self and context.,"def render ( self , context ) :"
"write it to self.stdout. for every migration in migrations_to_squash,",for migration in migrations_to_squash :
all_unique_checks is union of all_unique_checks set and unique_checks set.,all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
self.verbatim is boolean False.,self . verbatim = False
"if not,",else :
define the function check_1_7_compatibility with argument kwargs dictionary.,def check_1_7_compatibility ( ** kwargs ) :
"if loader is an instance of tuple or list,","if isinstance ( loader , ( tuple , list ) ) :"
"if template_tuple is contained in TemplateDoesNotExist,",if template_tuple is TemplateDoesNotExist :
substitute SafeBytes for SafeString.,SafeString = SafeBytes
"define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.",truncate = property ( lambda self : self . file . truncate )
define the method extra_forms with an argument self.,def extra_forms ( self ) :
and pattern.default_args. substitute lookups for the value under language_code key of the self._reverse_dict dictionary.,self . _reverse_dict [ language_code ] = lookups
"if show_traceback is true,",if show_traceback :
"if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
"define the method strptime with arguments self, value and format.","def strptime ( self , value , format ) :"
"if push is not None,",if push is not None :
call the method self.xml.addQuickElement with an argument string 'None'.,"self . xml . addQuickElement ( ""None"" )"
"action set to string 'append', default as an empty list and help set to a string: 'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'. define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.","def handle ( self , app_or_project , name , target = None , ** options ) :"
"define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.","def render_to_string ( template_name , dictionary = None , context_instance = None , dirs = None ) :"
"call the method parser.next_token, substitute the result for token.",token = parser . next_token ( )
import module re.,import re
from django.utils import six into default name space.,from django . utils import six
substitute origin for self.origin.,self . origin = origin
"if fake is true,",if fake :
substitute i for p.,p = i
from django.utils import six into default name space.,from django . utils import six
skip this loop iteration.,continue
substitute arg converted into a integer for length.,length = int ( arg )
"call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.",ip_str = _explode_shorthand_ip_string ( ip_str )
file is an instance of BytesIO class created with an argument: return value of the method data.read.,file = BytesIO ( data . read ( ) )
"create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.","return Signer ( b'django.http.cookies' + key , salt = salt )"
"if self.verbosity is greater than integer 1,",if self . verbosity > 0 :
"raise an base.SerializationError exception with argument string ""Non-model object (%s) encountered during serialization"",","raise base . SerializationError ( ""Non-model object (%s) encountered during serialization"" % type ( obj ) )"
singular is an empty list.,singular = [ ]
substitute _iterkeys for keys.,keys = _iterkeys
from django.db import connections and DEFAULT_DB_ALIAS into default namespace.,"from django . db import connections , DEFAULT_DB_ALIAS"
"define the method __init__ with 3 arguments: self, args and kw.","def __init__ ( self , args , kw ) :"
"self._files is an instance of class MultiValueDict. if not,",else :
"add decimal_sep and dec_part, substitute the result for dec_part.",dec_part = decimal_sep + dec_part
"call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to print the SQL for. Defaults to the ' '""default"" database.' )"
"open out_log flie in append mode with buffering size of input buffer, substitute the result for so.","so = open ( out_log , 'a+' , buffering )"
call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix set to string '_download'.,"tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )"
define the method _setup with an argument self.,def _setup ( self ) :
"substitute the '%s' in the string ""The view %s.%s didn't return an HttpResponse object. It returned None instead."",","raise ValueError ( ""The view %s.%s didn't return an HttpResponse object. It returned None instead."" % ( callback . __module__ , view_name ) )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
substitute title for sublist_item.,sublist_item = title
return replacement.,return replacement
extend the self.error_list list with message.error_list.,self . error_list . extend ( message . error_list )
filemsg is an empty string.,filemsg = ''
call the function re.compile with 2 arguments:,"html_gunk_re = re . compile ( r'(?:<br clear=""all"">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )"
"call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.","result = super ( ChoiceField , self ) . __deepcopy__ ( memo )"
substitute callback for self._callback_str.,self . _callback_str = callback
"assign the result to the value under the string "".moves.urllib_parse"" appended to __name__ key of the sys.modules dictionary, and to the value under the string "".moves.urllib.parse"" appended to __name__ key of the sys.modules dictionary. derive class Module_six_moves_urllib_error from the _LazyModule base class.",class Module_six_moves_urllib_error ( _LazyModule ) :
define the method _load_post_and_files with an argument self.,def _load_post_and_files ( self ) :
"call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.",context . render_context [ self ] = itertools_cycle ( self . cyclevars )
define the method root_attributes with an argument self.,def root_attributes ( self ) :
"try,",try :
"if filter_func has an attribute ""_decorated_function"",","if hasattr ( filter_func , ""_decorated_function"" ) :"
call the method parts.reverse.,parts . reverse ( )
substitute limit for self.remaining.,self . remaining = limit
"if tt.tm_isdst is greater than integer 0, return the result.",return tt . tm_isdst > 0
"call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.","field_type = connection . introspection . get_field_type ( row [ 1 ] , row )"
"call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.","return types . MethodType ( func , obj , obj . __class__ )"
return self.file.size.,return self . file . size
"calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.",pad = b'=' * ( - len ( s ) % 4 )
"if commit is true,",if commit :
"if not, self.merge is boolean False. get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,","self . empty = options . get ( 'empty' , False )"
"try,",try :
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.,raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
"if not,",else :
"tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.",tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
"dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'. call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to flush. Defaults to the ""default"" database.' )"
raise an StopIteration exception.,raise StopIteration ( )
"define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.","def get_template_sources ( self , template_name , template_dirs = None ) :"
"if six.PY2 is true,",if six . PY2 :
define the method __init__ with 2 arguments self and file.,"def __init__ ( self , file ) :"
if self.__dispatch is None.,if self . __dispatch is None :
define the function _is_shorthand_ip with an argument ip_str.,def _is_shorthand_ip ( ip_str ) :
substitute EscapeText for EscapeUnicode.,EscapeUnicode = EscapeText
derive the class Command from the AppCommand base class.,class Command ( AppCommand ) :
"if ImportError or AttributeError exception occurred,","except ( ImportError , AttributeError ) :"
delete entry under the oldkey key of the cache dictionary.,del cache [ oldkey ]
"if self.field.label is None,",if self . field . label is None :
"for ext in pathext,",for ext in pathext :
"get frag attribute from found object, substitute it for found.","found = getattr ( found , frag )"
define the function firstof with 2 arguments: parser and token.,"def firstof ( parser , token ) :"
return lookup_view,return lookup_view
delete element under 'warning' key of kwargs dictionary.,del kwargs [ 'warning' ]
define the function templatize with 2 arguments: src and origin set to None.,"def templatize ( src , origin = None ) :"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
substitute include_html for self.include_html.,self . include_html = include_html
"if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,","self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
return self._changed_data.,return self . _changed_data
self._is_rendered is boolean False.,self . _is_rendered = False
define the method new with 2 arguments: self and values set to None.,"def new ( self , values = None ) :"
"call the method self.get_date_error_message with an argument date_check, append the result to errors.",errors . append ( self . get_date_error_message ( date_check ) )
raise an TypeError with an argument s.,raise TypeError ( s )
table_names is an empty list.,table_names = [ ]
delete the value under the 'liveserver' key of the options dictionary.,del options [ 'liveserver' ]
"join root and f in path, substitute the result for f.","f = os . path . join ( root , f )"
"if not,",else :
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.,"from django . views . debug import ExceptionReporter , get_exception_reporter_filter"
"replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.","e . reason += ', HTTP response headers must be in %s format' % charset"
define the method get_fqdn with argument self.,def get_fqdn ( self ) :
"if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,","if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :"
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
"if not,",else :
"call the function force_bytes with argument content, substitute it for content.",content = force_bytes ( content )
derive class _MovedItems from the _LazyModule base class.,class _MovedItems ( _LazyModule ) :
call the method HttpResponse.content.fset with 2 arguments: self and value.,"HttpResponse . content . fset ( self , value )"
"convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.",return bool ( initial ) != bool ( data )
import module re.,import re
substitute ngettext for ungettext.,ungettext = ngettext
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
call the method self._assert_mutable.,self . _assert_mutable ( )
"if key is not contained in self,",if key not in self :
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
define the method end_object with arguments self and obj.,"def end_object ( self , obj ) :"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
"if sys.platform starts with string 'java',","if sys . platform . startswith ( ""java"" ) :"
"if settings.DEBUG is true,",if settings . DEBUG :
"return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.","return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]"
yield d.,yield d
return boolean False.,return False
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
pk_value is None.,pk_value = None
line is an empty string.,line = ''
derive the class RendererMixin from the object base class.,class RendererMixin ( object ) :
"if inverse_match is not None,",if inverse_match is not None :
"if subcommand is contained in no_settings_commands,",if subcommand in no_settings_commands :
"with arguments cookie_value and max_age set to max_age. if signing.BadSignature exception is caught,",except signing . BadSignature :
"return the absolute path of file path filepath, substitute it for filepath.",filepath = os . path . abspath ( filepath )
res is an empty string.,res = ''
"for every app_config and model_list in app_list,","for app_config , model_list in app_list :"
define the method _post_clean with an argument self.,def _post_clean ( self ) :
"if _active has an attribute ""value"",","if hasattr ( _active , ""value"" ) :"
"if VariableDoesNotExist exception is not caught,",except VariableDoesNotExist :
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
define the method app_dict with an argument self.,def app_dict ( self ) :
"if widgets is not None,",if widgets is not None :
"call the function warnings.warn with 3 argument: string ""AppCommand.handle_app() is superseded by AppCommand.handle_app_config()."",","warnings . warn ( ""AppCommand.handle_app() is superseded by "" ""AppCommand.handle_app_config()."" , RemovedInDjango19Warning , stacklevel = 2 )"
"raise an TypeError with an argument string ""relative imports require the 'package' argument"".","raise TypeError ( ""relative imports require the 'package' argument"" )"
self.keyOrder is an empty list.,self . keyOrder = [ ]
"try,",try :
return number.,return number
define the function get_major_version with an argument version defaulting to None.,def get_major_version ( version = None ) :
"if OSError, renamed to e, is caught,",except OSError as e :
"if not,",else :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","return iter ( getattr ( d , _iteritems ) ( ** kw ) )"
"get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,","setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )"
if self.variable_name is true.,if self . variable_name :
return nothing.,return
if self has an '_files' attribute.,"if hasattr ( self , '_files' ) :"
TOKEN_BLOCK is integer 2,TOKEN_BLOCK = 2
"if match is true,",if match :
substitute used_name for guessed_filename.,guessed_filename = used_name
"define the method create_token with 4 arguments: self, token_string, source and in_tag.","def create_token ( self , token_string , source , in_tag ) :"
substitute boolean False for cache_choices.,cache_choices = False
"if name equals string ""_wrapped"",","if name == ""_wrapped"" :"
"call the function all_locale_paths, for every path is the result,",for path in all_locale_paths ( ) :
"define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.","def load_template_source ( self , template_name , template_dirs = None ) :"
skip this loop iteration.,continue
"convert settings.FIXTURE_DIRS to a list, extend dirs by it.",dirs . extend ( list ( settings . FIXTURE_DIRS ) )
"if ch equal a string '(',",if ch == '(' :
"rais an AppRegistryNotReady exception with an argument string ""The translation infrastructure cannot be initialized before the ""","raise AppRegistryNotReady ( ""The translation infrastructure cannot be initialized before the "" ""apps registry is ready. Check that you don't make non-lazy "" ""gettext calls at import time."" )"
"decorator deconstructible,",@ deconstructible
"if TypeError or VariableDoesNotExist exceptions are caught,","except ( TypeError , VariableDoesNotExist ) :"
"and help set to string 'Raise on exception'. call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',","parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False , help = ""Don't colorize the command output."" )"
"call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,",if node . hasAttribute ( 'pk' ) :
return neg and res.,"return neg , res"
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' )
"define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.",fileno = property ( lambda self : self . file . fileno )
"try,",try :
silent is boolean False.,silent = False
class_types is a tuple with 2 elements: type and types.ClassType.,"class_types = ( type , types . ClassType )"
return an empty string.,return ''
"call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.","return self . _text_chars ( length , truncate , text , truncate_len )"
"call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,","return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True , autoescape = autoescape ) )"
"call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.","return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )"
"call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.","parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )"
"define the method __setitem__ with 3 arguments: self, key and value.","def __setitem__ ( self , key , value ) :"
return result.,return result
"call the method match.groups, assign the result to name and value, respectively.","name , value = match . groups ( )"
"if _cached_modules equals to module_values,",if _cached_modules == module_values :
"help is a string ""Runs this project as a FastCGI application. Requires flup."".","help = ""Runs this project as a FastCGI application. Requires flup."""
"filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.","filename = ( 'utf-8' , '' , filename )"
return the value under the filter_name key of the self.filters dictionary.,return self . filters [ filter_name ]
"if TemplateDoesNotExist exception is caught,",except TemplateDoesNotExist :
define the function convert_old_style_list with an argument list_.,def convert_old_style_list ( list_ ) :
docs_version is a string 'dev'.,docs_version = 'dev'
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.,"def _dec ( * args , ** kwargs ) :"
output is an empty string.,output = [ ]
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.","self . _current [ field . name ] = str ( getattr ( obj , field . name ) )"
"if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.",loop_dict [ 'last' ] = ( i == len_values - 1 )
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.","header = header . upper ( ) . replace ( '-' , '_' )"
"if not,",else :
"call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,","all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )"
substitute name for filter_func._filter_name.,filter_func . _filter_name = name
"call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,","return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) ) for key , value in self . items ( ) ] )"
substitute sign for self.sign.,self . sign = sign
return value converted into a list.,return list ( value )
define the function create_bound_function with 2 arguments: func and obj.,"def create_bound_method ( func , obj ) :"
"if format_module_path is true,",if format_module_path :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if not self.isolated_context is boolean False. call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,","super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )"
"get 'render' attribute of template object, if it is callable,","if not callable ( getattr ( template , 'render' , None ) ) :"
"for every name in formatters,",for name in formatters :
return name.,return name
define the method size with arguments self and name.,"def size ( self , name ) :"
"m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.",m2m_value = lambda value : value . natural_key ( )
"if value under the 'indent' key of the self.options dictionary is true,","if self . options . get ( ""indent"" ) :"
exit the program with the code integer 1.,os . _exit ( 1 )
define the function b64_encode with an argument s.,def b64_encode ( s ) :
"for every form in self.forms append form to a list, if function form.is_valid evaluates to true,",valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
return new_key.,return new_key
"yield field and ValidationError object converted to an list, created with an argument errors.","yield field , list ( ValidationError ( errors ) )"
name is an empty list.,name = [ ]
substitute subject elements from p-th to i-th index for res.,res = subject [ p : i ]
"if six.PY3 is true,",if six . PY3 :
decrement end by one.,end -= 1
yield choice.,yield choice
"substitute the result for tag. if tag is false or current_len is greater or equal to truncate_len,",if not tag or current_len >= truncate_len :
"compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.",RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
"if not,",else :
"call the function mark_safe with an argument contents, return the result.",return mark_safe ( contents )
"if self.ignore is true and field_name is not contained in model_fields,",if self . ignore and field_name not in model_fields :
"if nofollow is true nofollow_attr is a string ' rel=""nofollow""', otherwise nofollow_attr is an empty string.","nofollow_attr = ' rel=""nofollow""' if nofollow else ''"
"if self.field.choice_cache is None,",if self . field . choice_cache is None :
"call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,","sql_list = sql_flush ( self . style , connection , only_django = True , reset_sequences = reset_sequences , allow_cascade = allow_cascade )"
"if OverflowError or ValueError exceptions are caught,","except ( ValueError , KeyError ) :"
substitute file_or_path for file.,file = file_or_path
"substitute boolean False for ignore. for every d in object_list,",for d in object_list :
"if LookupError exception is caught,",except LookupError :
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.,"shutil . copyfileobj ( extracted , outfile )"
"call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.","MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )"
"call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.","check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )"
substitute NumberInput for widget.,widget = NumberInput
return klass.,return klass
"call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',","simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )"
"if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.",delta = ( d - now ) if reversed else ( now - d )
"model._meta.app_label, model._meta.object_name, fk_name, respectively. if not,",else :
substitute the settings.MEDIA_ROOT for location.,location = settings . MEDIA_ROOT
"convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.",docs_version = '%d.%d' % django . VERSION [ : 2 ]
"from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.","from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin"
"if not,",else :
"where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','. return lib.",return lib
import module logging.,import logging
import module copy.,import copy
set the file pointer at the beginning of the self.file file.,self . file . seek ( 0 )
"return string 'https' if value under the ""HTTPS"" key of the os.environ dictionary equals string 'on', if not return 'http'.","return 'https' if os . environ . get ( ""HTTPS"" ) == ""on"" else 'http'"
"split path in two parts by '\\' string, return the result.","return path . split ( '\\' , 1 )"
"subtract decimals from digits, substitute the result for whole_digits.",whole_digits = digits - decimals
"call the function mark_safe with an argument string ' selected=""selected""', substitute the result for selected_html.","selected_html = mark_safe ( ' selected=""selected""' )"
"if self.path equals other.path, return boolean True, if not return boolean False.",return self . path == other . path
"otherwise if value is not an instance of list ot tuple type,","elif not isinstance ( value , ( list , tuple ) ) :"
"define the method __init__ with self class instance, file, and name defaulting to None as arguments.","def __init__ ( self , file , name = None ) :"
from django.utils import six into default name space.,from django . utils import six
"try,",try :
"as long k is smaller than endpos,",while k < endpos :
call the method start_ipython with an argument argv as an empty list.,start_ipython ( argv = [ ] )
"return an instance of Media class, created with definition as an argument.",return Media ( definition )
"sum absolute p with units an integer 1, substitute the result for prec.",prec = abs ( p ) + units + 1
"if iterations is lesser than integer 0, raise an error.",assert iterations > 0
"call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.","MIMEText . __init__ ( self , text , subtype , None )"
"use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method. if target_app_labels_only is true,",if target_app_labels_only :
"if p is greater or equal to integer 0,",if p >= 0 :
"call the function force_str with an argument value, substitute the result for value.",value = force_str ( value )
"evaluate the boolean expression: locale is None and exclude is false and process_all is false,",if ( locale is None and not exclude and not process_all ) or self . domain is None :
"define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.","def build_attrs ( self , extra_attrs = None , ** kwargs ) :"
"write the string "" Creating tables...\n"" to the standard output.","self . stdout . write ( "" Creating tables...\n"" )"
call the self._cull method.,self . _cull ( )
substitute first element of fks_to_parent for fk.,fk = fks_to_parent [ 0 ]
"if TYPE equals to RAW,",if TYPE == RAW :
from django.core import validators into default name space.,from django . core import validators
define the method __str__ with argument self.,def __str__ ( self ) :
skip this loop iteration.,continue
"call the function escape with an argument word, substitute the result for i-th element of words.",words [ i ] = escape ( word )
return out.,return out
self.error_dict is an empty dictionary.,self . error_dict = { }
from django.utils import six into default name space.,from django . utils import six
return value.,return value
"if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.",formatted = ( color_style ( ) . ERROR ( force_str ( e ) ) if e . is_serious ( ) else color_style ( ) . WARNING ( force_str ( e ) ) for e in issues )
"put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,",additional_headers = [ newheader for newheader in newheaders if newheader . lower ( ) not in existing_headers ]
for every frag in name.,for frag in name :
"in the string ""<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>"", replace '%s' with the name of the type of this class instance,","return ""<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>"" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )"
"and substitute the return value for value under the key 'Expires' of dictionary response. call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.","patch_cache_control ( response , max_age = cache_timeout )"
define the method __deepcopy__ with arguments self and memo.,"def __deepcopy__ ( self , memo ) :"
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
import module warnings.,import warnings
"raise an exception parser.error_class with an argument string ""Unexpected end of expression in if tag."".","raise parser . error_class ( ""Unexpected end of expression in if tag."" )"
call the method self.exit_command.,self . exit_command ( )
"get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.","inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )"
"raise an TemplateSyntaxError exception with an argument string ""'%s' is not a valid tag library: %s"",","raise TemplateSyntaxError ( ""'%s' is not a valid tag library: %s"" % ( taglib , e ) )"
"call the function phone2numeric with an argument value, return the result.",return phone2numeric ( value )
"if with_base_fields is true,",if with_base_fields :
"try,",try :
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.,"self . month_none_value = ( 0 , empty_label [ 1 ] )"
create directories from the elements in filename.,os . makedirs ( dirname )
substitute _make_key for make_key.,make_key = _make_key
substitute second element of plan_node for title.,title = plan_node [ 1 ]
"call the method self.nodelist_true.render with an argument context, return the result.",return self . nodelist_true . render ( context )
define the function reset_cache with an argument unpacked dictionary kwargs.,def reset_cache ( ** kwargs ) :
"evaluate the function smart_text with an argument value, return the result.",return smart_text ( value )
"format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',","last_row = ( normal_row % { 'errors' : '' , 'label' : '' , 'field' : '' , 'help_text' : '' , 'html_class_attr' : html_class_attr } )"
assign value and params to the value under the name key of the outdict dictionary.,"outdict [ name ] = value , params"
substitute labels for value under the 'labels' key of attrs dictionary.,attrs [ 'labels' ] = labels
"append '.' to frag, append the result to used.",used += '.' + frag
"add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,",templatetags_modules_candidates += [ '%s.templatetags' % app_config . name for app_config in apps . get_app_configs ( ) ]
return a list with an element tuple with 2 elements: an empty string and an empty list.,"return [ ( '' , [ ] ) ]"
"append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.",doy = self . year_days [ self . data . month ] + self . data . day
"format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.",y = data . get ( self . year_field % name )
program_options is list containing string '--check-format'.,program_options = [ '--check-format' ]
"if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,",if not settings . DEBUG and not settings . ALLOWED_HOSTS :
"call the function re.compile with an argument raw string ""^\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?'))\s*"", substitute the result for context_re.","context_re = re . compile ( r""""""^\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?'))\s*"""""" )"
import module sys.,import sys
"write string ""Flush cancelled.\n"" to self.stdout stream.","self . stdout . write ( ""Flush cancelled.\n"" )"
substitute self.deleted_forms for forms_to_delete.,forms_to_delete = self . deleted_forms
"sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.","formatted = ""\n"" . join ( sorted ( formatted ) )"
"substitute FIELD for TYPE,",TYPE = FIELD
"from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.","from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError , DatabaseError )"
"call the os.stat function with argument src, substitute the result for st.",st = os . stat ( src )
"if ImportError exception is caught,",except ImportError :
skip this loop iteration.,continue
"for every tok in rules,",for tok in rules :
return translated.,return translated
return None.,return None
call the method self.enter_command with 2 arguments command and token.,"self . enter_command ( command , token )"
"if Exception exception is caught,",except Exception :
"if length of list_ equals integer 1,",if len ( list_ ) == 1 :
"substitute '%s' in a string ""Full migrations file '%s':"" with writer.filename, append newline to it,","self . stdout . write ( self . style . MIGRATE_HEADING ( ""Full migrations file '%s':"" % writer . filename ) + ""\n"" )"
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.,"handler . addQuickElement ( ""id"" , unique_id )"
"call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,","return lazy ( func , * resultclasses ) ( * args , ** kwargs )"
"finally, perform,",finally :
"try,",try :
"define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.","def __init__ ( self , out , style_func = None , ending = '\n' ) :"
"if path starts with string 'http://' or string 'https://' or with string '/',","if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :"
"raise an ValueError with an argument string ""Non-reversible reg-exp portion: '(?%s'"" formated with ch.","raise ValueError ( ""Non-reversible reg-exp portion: '(?%s'"" % ch )"
"if use_grouping is true,",if use_grouping :
self.request is None.,self . request = request
"call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name, params and notes, respectively.","att_name , params , notes = self . normalize_col_name ( column_name , used_column_names , is_relation )"
"call the method MIMEText.__setitem__ with arguments self, name and val.","MIMEText . __setitem__ ( self , name , val )"
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.,from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
return value.,return value
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
from django.utils.six.moves import _dummy_thread as thread into default name space.,from django . utils . six . moves import _dummy_thread as thread
"take subject elements from p-th to i-th index, substitute it for s.",s = subject [ p : i ]
"if config_string is false,",if not config_string :
"if smtplib.SMTPException exception is caught,",except smtplib . SMTPException :
self._done is boolean True.,self . _done = True
import module re.,import re
"raise an CommandError exception with an argument string ""Multiple fixtures named '%s' in %s. Aborting."", where '%s' is replaced with:","raise CommandError ( ""Multiple fixtures named '%s' in %s. Aborting."" % ( fixture_name , humanize ( fixture_dir ) ) )"
from django.apps import apps into default name space.,from django . apps import apps
"convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.",return int ( value ) % int ( arg ) == 0
"code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'. call the method self.run_validators with an argument value.",self . run_validators ( value )
define the function media with an argument request.,def media ( request ) :
from django.utils.six.moves import xrange into default name space.,from django . utils . six . moves import xrange
"for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,","out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]"
"_func_defaults is a string ""__defaults__"".","_func_defaults = ""__defaults__"""
"then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result. derive the class DateInput from the DateTimeBaseInput base class.",class DateInput ( DateTimeBaseInput ) :
"call the function copy with an argument self, substitute the result for new_context.",new_context = copy ( self )
decorator lru_cache.lru_cache with an argument maxsize set to None.,@ lru_cache . lru_cache ( maxsize = None )
"if dirname starts with character '.' or dirname equals a string '__pycache__',",if dirname . startswith ( '.' ) or dirname == '__pycache__' :
substitute new_second_item with second_item.,second_item = new_second_item
"try,",try :
"if threading is true,",if threading :
"convert self.changed_data into boolean, return it.",return bool ( self . changed_data )
for integer representation of z converted into a string. define the function escapejs with an argument value.,def escapejs ( value ) :
"return an instance of SafeText, created with an argument s converted into a string.",return SafeString ( str ( s ) )
"call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,","super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )"
"if not,",else :
and unpacked dictionary kwargs. substitute streaming_content for self.streaming_content.,self . streaming_content = streaming_content
from django.http.cookie import SimpleCookie and parse_cookie into default name space.,"from django . http . cookie import SimpleCookie , parse_cookie"
"define the method delete_many with arguments self, keys and version defaulting to None.","def delete_many ( self , keys , version = None ) :"
"if the value of the kwargs dictionary under the key k is not equal to v,","if kwargs . get ( k , v ) != v :"
"if value is contained in self.empty_values,",if value in self . empty_values :
server_address is a tuple containing 2 initial elements: addr and port.,"server_address = ( addr , port )"
"append string ""System check identified %s (%s silenced)."" to msg, replace first '%s' for: string ""no issues"",","msg += ""System check identified %s (%s silenced)."" % ( ""no issues"" if visible_issue_count == 0 else ""1 issue"" if visible_issue_count == 1 else ""%s issues"" % visible_issue_count , len ( all_issues ) - visible_issue_count , )"
"url_markup_template is a string '<a href=""{0}"">{1}</a>'.","url_markup_template = '<a href=""{0}"">{1}</a>'"
define the method __str__ with an argument self.,def __str__ ( self ) :
"use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout. for every migration in app_migrations,",for migration in app_migrations :
"if not,",else :
"if values is None,",if values is None :
"if value is None,",if value is None :
"call the method self.error_class with an argument error_class as an string 'nonfield',",self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
"for every d in self.dicts,",for d in self . dicts :
"if SkipFile exception is caught,",except SkipFile :
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.,"self . _archive . printdir ( * args , ** kwargs )"
"substitute the result for offset. if first element of tzinfo equals '-',",if tzinfo [ 0 ] == '-' :
"if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,","if ( getattr ( meta , 'fields' , fields ) is None and getattr ( meta , 'exclude' , exclude ) is None ) :"
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.,"handler . addQuickElement ( ""ttl"" , self . feed [ 'ttl' ] )"
comment is an empty list.,comment = [ ]
extend final_output with alter_sql.,final_output . extend ( alter_sql )
substitute serialize for __bytes__.,__bytes__ = serialize
new_value is a sum of value and delta.,new_value = value + delta
"if not,",else :
substitute connection for self.connection.,self . connection = connection
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.,"class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :"
"and token. otherwise if token.token_type equals integer 1,",elif token . token_type == 1 :
label is an empty string.,help_text = ''
"if settings.SETTINGS_MODULE is true,",if settings . SETTINGS_MODULE :
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
substitute filepath for self.filepath.,self . filepath = filepath
return self.,return self
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.,raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
"for every path in self.locale_paths,",for path in self . locale_paths :
"if not,",else :
"define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.","def external_entity_ref_handler ( self , context , base , sysid , pubid ) :"
return unbound.,return unbound
"data is an empty dictionary,",data = { }
"if self._content_length equals integer 0,",if self . _content_length == 0 :
"call the method __init__ with an argument lexer, from the base class of the class DebugParser.","super ( DebugParser , self ) . __init__ ( lexer )"
return result.,return result
"evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.","return debug . technical_500_response ( request , * exc_info )"
"if KeyError exception is caught,",except KeyError :
"call the function mark_for_escaping with an argument new_obj, substitute the result for obj.",obj = mark_for_escaping ( new_obj )
"if field is not contained in self.errors,",if field not in self . errors :
define the method _set_name with arguments self and name.,"def _set_name ( self , name ) :"
"call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.",return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
derive the class ComboField from the base class Field class.,class ComboField ( Field ) :
define the function with arguments self and filename.,"def extract ( self , filename ) :"
"'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet', and 'inlineformset_factory'. ALL_FIELDS is a string '__all__'.",ALL_FIELDS = '__all__'
"apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,","if reduce ( operator . eq , level ) :"
"call the function force_text with an argument url, return the result.",return force_text ( url )
define the method end_index with an argument self.,def end_index ( self ) :
"if condition is not None,",if condition is not None :
"where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments: unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and', return the result. define the method get_date_error_message with 2 arguments: self and date_check.","def get_date_error_message ( self , date_check ) :"
from IPython.Shell import IPShell into default namespace.,from IPython . Shell import IPShell
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"call the OVERLAPPED function, substitute the result for overlapped.",overlapped = OVERLAPPED ( )
"subtract timestamp from the return value of the function time.time, substitute the result for age.",age = time . time ( ) - timestamp
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
define the method read with an argument self.,def read ( self ) :
"replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,","return str ( '<%s %s (%s:%s) %s>' ) % ( self . __class__ . __name__ , urlconf_repr , self . app_name , self . namespace , self . regex . pattern )"
"for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,","for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :"
parsed is boolean False.,parsed = False
from django.utils import six into default name space.,from django . utils import six
"call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.","obj = base . build_instance ( Model , data , self . db )"
"method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,",@ lru_cache . lru_cache ( maxsize = None )
allow_multiple_selected is boolean True.,allow_multiple_selected = True
"define the method __init__ with arguments self, stream and boundary.","def __init__ ( self , stream , boundary ) :"
"call the method parser.parse, substitute the result for nodelist.",nodelist = parser . parse ( )
"'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string, 'Enter a complete value.' for 'incomplete'. define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , fields = ( ) , * args , ** kwargs ) :"
"if ImportError exception is caught,",except ImportError :
"from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.","from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable"
crate a file named init_path.,"open ( init_path , ""w"" ) . close ( )"
call the method gettext_module.GNUTranslations.__init__ with an argument self.,gettext_module . GNUTranslations . __init__ ( self )
"define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.","def handle ( self , * args , ** options ) :"
define the method configure_custom with 2 arguments: self and config.,"def configure_custom ( self , config ) :"
"if exclude is true and f.name is contained in exclude,",if exclude and f . name in exclude :
"call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.","return not module_has_submodule ( package , module )"
substitute app_name for self.app_name.,self . app_name = app_name
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.,BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
"substitute '%s' in the string "" (%s squashed migrations)"" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.","title += "" (%s squashed migrations)"" % len ( graph . nodes [ plan_node ] . replaces )"
"try,",try :
"append orig_file to string '#: ', substitute it for new.",new = '#: ' + orig_file [ 2 : ]
"if not,",else :
"if TypeError or ValueError exceptions are caught,","except ( ValueError , TypeError ) :"
"get property attribute _get_height, and substitute it for width.",height = property ( _get_height )
import module copy.,import copy
"and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'. call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',","parser . add_argument ( '--liveserver' , action = 'store' , dest = 'liveserver' , default = None , help = 'Overrides the default address where the live server (used ' 'with LiveServerTestCase) is expected to run from. The ' 'default value is localhost:8081.' ) ,"
call the method self._update_errors with an argument e.,self . _update_errors ( e )
return boolean False.,return False
increment num by one.,num += 1
from django.utils.html import escape into default name space.,from django . utils . html import escape
define the method __next__ with an argument self.,def __next__ ( self ) :
"define the method write with 3 arguments: self, outfile and encoding.","def write ( self , outfile , encoding ) :"
"get the next element of the iterable pattern_iter, assign the result for ch.",ch = next ( input_iter )
derive the class BaseEmailBackend from the object base class.,class BaseEmailBackend ( object ) :
define the function ssi with 2 arguments: parser and token.,"def ssi ( parser , token ) :"
"streaming_content.setter decorator,",@ streaming_content . setter
"if first element of message_context equals to character '""',","if message_context [ 0 ] == '""' :"
"call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.","addr = Header ( addr , encoding ) . encode ( )"
"format with it a string '# %s', write it to out. comment_lineno_cache is None,",comment_lineno_cache = None
return nothing.,return
return it. define the function iterlists with 2 arguments: d and unpacked dictionary kw.,"def iterlists ( d , ** kw ) :"
call the self.start_object with an argument obj.,self . start_object ( obj )
"if Exception, renamed to e, exception is caught,",except Exception as e :
define the function slice_filter with 2 arguments value and arg.,"def slice_filter ( value , arg ) :"
DNS_NAME is a instance of CachedDnsName class.,DNS_NAME = CachedDnsName ( )
"assign the result for year_val, month_val and day_val, respectively. html is an empty dictionary.",html = { }
"if settings.SECURE_PROXY_SSL_HEADER is true,",if settings . SECURE_PROXY_SSL_HEADER :
substitute self.rawdata for rawdata.,rawdata = self . rawdata
"call the function remove_tags with 2 arguments value and tags, return the result.","return remove_tags ( value , tags )"
"if 'needs_autoescape' attribute of func object exists and is true,","if getattr ( func , 'needs_autoescape' , False ) :"
"if language is contained in _DJANGO_DEPRECATED_LOCALES,",if language in _DJANGO_DEPRECATED_LOCALES :
"try,",try :
"if length of bits equals integer 4,",if len ( bits ) == 4 :
"if not,",else :
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
_localtime is an instance of LocalTimezone class.,_localtime = LocalTimezone ( )
do nothing.,pass
pieces is an empty list.,pieces = [ ]
"call the method self.render_node with 2 arguments: node and context, substitute the result for bit.","bit = self . render_node ( node , context )"
"raise an ValueError with an argument string ""MultiValueDict.update() takes either a MultiValueDict or dictionary"".","raise ValueError ( ""MultiValueDict.update() takes either a MultiValueDict or dictionary"" )"
"get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.",old_method = base . __dict__ . get ( old_method_name )
"join m and n into a string, separated by '.', substitute the result for lookup_view_s.","lookup_view_s = ""%s.%s"" % ( m , n )"
"evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,","flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL | getattr ( os , 'O_BINARY' , 0 ) )"
"if sys.platform starts with string 'java',",if sys . platform . startswith ( 'java' ) :
"if mimetype is None, raise an error.",assert mimetype is not None
"append string "" %s"", where '%s' is replaced by name to the usage.","usage . append ( "" %s"" % name )"
"endless while loop,",while 1 :
"call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.","obj . children = copy . deepcopy ( self . children , memodict )"
"call the function force_str with argument self.obj, substitute the result for obj.",obj = force_str ( self . obj )
"call the method attrs.copy, substitute the result for self.attrs.",self . attrs = attrs . copy ( )
import module time.,import time
"call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,","value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )"
activate is a lambda function which returns None for any argument x.,activate = lambda x : None
"call the getvalue method of the base class of the PythonSerializer class, return the result.","return super ( PythonSerializer , self ) . getvalue ( )"
"yield string ""# * Make sure each model has one field with primary_key=True"" as the result.","yield ""# * Make sure each model has one field with primary_key=True"""
"return an string ""[Included template had syntax error: %s]"", where '%s' is replaced with e.","return ""[Included template had syntax error: %s]"" % e"
seen_data is an empty set.,seen_data = set ( )
call the method attachment.set_payload with an argument content.,attachment . set_payload ( content )
substitute self.count for top.,top = self . count
call the method os.chdir with an argument our_home_dir.,os . chdir ( our_home_dir )
return j.,return j
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.,"while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :"
define the method __delattr__ with self and name as arguments.,"def __delattr__ ( self , name ) :"
"call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,","translation = gettext_module . translation ( domain = 'django' , localedir = localedir , languages = [ self . __locale ] , codeset = 'utf-8' , fallback = use_null_fallback )"
raise an FieldError exception with an argument message.,raise FieldError ( message )
call the method handler.endElement with an argument string 'channel'.,"handler . endElement ( ""channel"" )"
"call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.",input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
"replace '%s' in string ""Cache table '%s' already exists."" with tablename, write it to the self.stdout stream.","self . stdout . write ( ""Cache table '%s' already exists."" % tablename )"
"append string "".moves.urllib_response"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.","response = sys . modules [ __name__ + "".moves.urllib_response"" ]"
"join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.","curs . execute ( ""\n"" . join ( full_statement ) )"
"raise an CommandError exception with an argument string ""You can only use --pks option with one model"".","raise CommandError ( ""You can only use --pks option with one model"" )"
"use the result as an argument for the call to the self.stdout.write method. if run_syncdb and executor.loader.unmigrated_apps exist,",if run_syncdb and executor . loader . unmigrated_apps :
import module sys.,import sys
"if KeyError exception is caught,",except KeyError :
return self._post.,return self . _post
"raise an VariableDoesNotExist exception with an argument string ""Failed lookup for key [%s] in %r"",","raise VariableDoesNotExist ( ""Failed lookup for key "" ""[%s] in %r"" , ( bit , current ) )"
"for every field in model._meta.many_to_many,",for field in model . _meta . many_to_many :
"created with an argument widget set to HiddenInput. value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,",self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
"if not,",else :
if whitelist is not None,if whitelist is not None :
"call the timezone.now function, substitute the result for now.",now = timezone . now ( )
return html.,return html
append string '.' to result.,"result . append ( ""."" )"
substitute callback for self.callback.,self . callback = callback
"define the method has_changed with arguments self, initial and data.","def _has_changed ( self , initial , data ) :"
"define the __init__ method with arguments: self, text, subtype and charset.","def __init__ ( self , text , subtype , charset ) :"
found is boolean False.,found = False
"call the middleware_method with request and e as the arguments, substitute the result for response.","response = middleware_method ( request , e )"
"if _win is true,",if _win :
"raise an CommandError exception with an argument string ""currently makemessages only supports domains 'django' and 'djangojs'"".","raise CommandError ( ""currently makemessages only supports domains "" ""'django' and 'djangojs'"" )"
"if min_num is None,",if min_num is None :
"if deps is true,",if deps :
"call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,","output . append ( format_html ( self . inner_html , choice_value = choice_value , sub_widgets = sub_ul_renderer . render ( ) ) )"
define the method add_arguments with arguments self and parser.,"def add_arguments ( self , parser ) :"
"if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.",initial_forms = len ( self . initial ) if self . initial else 0
data is an empty dictionary.,data = { }
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.,"patch_response_headers ( response , cache_timeout = - 1 )"
substitute self.waiting_readers for t.,t = self . waiting_readers
call the function os.remove with argument fname.,os . remove ( fname )
"return boolean True if tag is contained in self.tags_available method return value, return False otherwise.",return tag in self . tags_available ( )
"get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.",palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
"call the method regex.match with an argument date, substitute the result for m.",m = regex . match ( date )
"if data is None,",if data is None :
"sum m and class Media created with definition, return the result.",return m + Media ( definition )
"otherwise if child.nodeType equals to child.ELEMENT_NODE,",elif child . nodeType == child . ELEMENT_NODE :
derive the class TokenParser form the base class object.,class TokenParser ( object ) :
substitute value under the the 'forloop' key of the context dictionary for parentloop.,parentloop = context [ 'forloop' ]
"for every d in reversed list self.dicts,",for d in reversed ( self . dicts ) :
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.,NamedTemporaryFile = tempfile . NamedTemporaryFile
"otherwise if ch equals a string '(',",elif ch == '(' :
"if template_dirs is false,",if not template_dirs :
call the method self.registered_checks.append with argument check.,self . registered_checks . append ( check )
"call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.",stream_or_string = stream_or_string . decode ( 'utf-8' )
"for every f in fields,",for f in fields :
"while rbp is smaller than self.current_token.lbp,",while rbp < self . current_token . lbp :
from django.conf import settings into default name space.,from django . conf import settings
define the method reset with an argument self.,def reset ( self ) :
return last element of value.,return value [ - 1 ]
"define the function build_instance with 3 arguments: Model, data and db.","def build_instance ( Model , data , db ) :"
"if converter is true,",if converter :
from django.core.files.move import file_move_safe into default name space.,from django . core . files . move import file_move_safe
"if self._errors is None,",if self . _errors is None :
"from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.","from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK , TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )"
"if field is not contained in self.fields,",if field not in self . fields :
from django.core.serializers.base import DeserializationError into default name space.,from django . core . serializers . base import DeserializationError
found is boolean False.,found = False
return boolean False.,return False
substitute _iterlists for iterlists.,iterlists = _iterlists
"default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,","default_error_messages = { 'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) , 'invalid_list' : _ ( 'Enter a list of values.' ) , }"
define the method create_nodelist with an argument self.,def create_nodelist ( self ) :
field_type is a string 'TextField'.,field_type = 'TextField'
"convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',","elif options [ ""daemonize"" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :"
from importlib.util import find_spec as importlib_find.,from importlib . util import find_spec as importlib_find
"call the method loader.select_template with an argument template, return the result.",return loader . select_template ( template )
import module shutil.,import shutil
"for every model in model_list,",for model in model_list :
define the function get_current_timezone_name.,def get_current_timezone_name ( ) :
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.,"handler . addQuickElement ( ""link"" , self . feed [ 'link' ] )"
status_code is an integer 410.,status_code = 410
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.,"handler . startElement ( 'feed' , self . root_attributes ( ) )"
"call the method handler.startElement with 2 arguments: string ""rss"" and result of the method self.rss_attributes.","handler . startElement ( ""rss"" , self . rss_attributes ( ) )"
shells is a list containing 2 elements: string 'ipython' and string 'bpython'.,"shells = [ 'ipython' , 'bpython' ]"
"try,",try :
define get_script_name function with environ as an argument.,def get_script_name ( environ ) :
"if count of occurrence of '::' in ip_str is greater than integer 1,",if ip_str . count ( '::' ) > 1 :
"reverse the order of colors elements,",colors . reverse ( )
"otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding. if six.PY3 is true or os.name equals a string 'nt',",if six . PY3 or os . name == 'nt' :
parent is a tuple with 2 arguments: form.Meta and object.,"parent = ( form . Meta , object )"
substitute nodelist_loop for self.nodelist_loop.,self . nodelist_loop = nodelist_loop
substitute elements of s from the end index to end for s.,s = s [ end : ]
"call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.","label_output = self . handle_label ( label , ** options )"
define the method validate with arguments self and value.,"def validate ( self , value ) :"
"get 'getvalue' attribute of the self.stream object, if it exists and is callable,","if callable ( getattr ( self . stream , 'getvalue' , None ) ) :"
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
"skip this loop iteration,",continue
"endless loop,",while True :
"if self.can_import_settings is false,",if not self . can_import_settings :
"for every app_config in return value of the method apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
"call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,","file_ , _ , _ = imp . find_module ( module_name , [ entry ] )"
"call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.","parser . add_argument ( 'app_label' , help = 'App label of the application containing the migration.' )"
define the method save_new_objects with 2 arguments: self and commit set to boolean True.,"def save_new_objects ( self , commit = True ) :"
substitute regex for self.regex.,self . regex = regex
"if parse_until is true,",if parse_until :
"if status is not equal to STATUS_OK,",if status != STATUS_OK :
append digit to int_part_gd.,int_part_gd += digit
"if ZeroDivisionError exception is caught,",except ZeroDivisionError :
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.,from django . utils . deprecation import RemovedInNextVersionWarning
"call the function format_html with 2 arguments: string ""<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />"",","return format_html ( ""<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />"" , csrf_token )"
"if cls is false,",if not cls :
"dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'. def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.","def get_handler ( self , * args , ** options ) :"
do nothing.,pass
substitute 'n' for answer.,"answer = ""n"""
append filename to filenames.,filenames . append ( filename )
"if self.timeout is not None,",if self . timeout is not None :
"for every field, error_list in self.error_dict.items method return value,","for field , error_list in self . error_dict . items ( ) :"
return data.,return data
"replace '%s' in string ""### %s = %s"" with key and value under the key key of the user_setting dictionary, append it to the output.","output . append ( ""### %s = %s"" % ( key , user_settings [ key ] ) )"
"and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out. for every part in singular,",for part in singular :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the method self.style.MIGRATE_HEADING with an argument string ""Will squash the following migrations:"",","self . stdout . write ( self . style . MIGRATE_HEADING ( ""Will squash the following migrations:"" ) )"
"define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,","def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :"
from django.utils._os import upath into default name space.,from django . utils . _os import upath
substitute code_changed for fn.,fn = code_changed
import module re.,import re
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.,final_attrs [ 'checked' ] = 'checked'
"self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt. define the method signature with arguments self and value.","def signature ( self , value ) :"
"call the function re.compile with an argument raw string '\S', substitute it for dot_re.",dot_re = re . compile ( r'\S' )
return _dec.,return _dec
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.","def __exit__ ( self , exc_type , exc_value , traceback ) :"
"call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,","if not re . search ( r'^[_a-zA-Z]' , name ) :"
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
"if num is greater than self._max_entries,",if num > self . _max_entries :
"instantiate class Module_six_moves_urllib with an argument, string "".moves.urllib"" appended to __name__,","sys . modules [ __name__ + "".moves.urllib"" ] = Module_six_moves_urllib ( __name__ + "".moves.urllib"" )"
"s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d. decompress is boolean False.",decompress = False
define the function format with 2 arguments: value and format_string.,"def format ( value , format_string ) :"
"call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.",value = connections [ db ] . ops . process_clob ( row [ 1 ] )
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.,"from django . core . management . sql import sql_flush , emit_post_migrate_signal"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
define the method extract with 2 arguments self and to_path.,"def extract ( self , to_path ) :"
"call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.",logger . setLevel ( _checkLevel ( level ) )
"if not,",else :
"define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.","def format_html ( format_string , * args , ** kwargs ) :"
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.,"self . _archive . list ( * args , ** kwargs )"
"call the method self.create_nodelist, substitute the result for nodelist.",nodelist = self . create_nodelist ( )
define the method __newobj__ with 2 arguments cls and unpacked list args.,"def __newobj__ ( cls , * args ) :"
called with an argument BlockNode. define the method __repr__ with an argument self.,def __repr__ ( self ) :
"'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'. define the method to_python with arguments self and value.","def to_python ( self , value ) :"
"call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,","initial_value = field . to_python ( hidden_widget . value_from_datadict ( self . data , self . files , initial_prefixed_name ) )"
call the method self.add_filters with 2 arguments: result and filters.,"self . add_filters ( result , filters )"
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.,raise ContentNotRenderedError ( 'The response content must be ' 'rendered before it can be accessed.' )
"for every potfile in potfiles,",for potfile in potfiles :
"call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.",seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
substitute the result for key. pdict is an empty dictionary.,pdict = { }
"if cc contains item 'public' and kwargs contains item 'private',",elif 'public' in cc and 'private' in kwargs :
return self.limit_choices_to.,return self . limit_choices_to
derive the class BaseInlineFormSet from the BaseModelFormSet base class.,class BaseInlineFormSet ( BaseModelFormSet ) :
return value.,return value
"separated by newline, use it as an argument for the call to the function mark_safe, return the result. define the method as_ul with an argument self.",def as_ul ( self ) :
"if not,",else :
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:","handler . addQuickElement ( ""category"" , """" , { ""term"" : cat } )"
define the method get_version with an arguments self.,def get_version ( self ) :
from django.utils.encoding import force_str and force_text into default name space.,"from django . utils . encoding import force_str , force_text"
call the method self.__deepcopy__ with an empty dictionary as an argument.,return self . __deepcopy__ ( { } )
"call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.","timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )"
if s is an instance of an object Promise.,"if isinstance ( s , Promise ) :"
"strings ""Please submit %d or more forms."", ""Please submit %d or more forms."" and self.min_num, where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'. call the method self.clean.",self . clean ( )
"finally perform,",finally :
if truncate_len equals integer 0.,if truncate_len == 0 :
define the method reload with an argument self.,def reload ( self ) :
return boolean True.,return True
"define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.",softspace = property ( lambda self : self . file . softspace )
define the method __contains__ with 2 arguments: self and other.,"def __contains__ ( self , other ) :"
"CONTEXT_SEPARATOR is a string ""\x04"".","CONTEXT_SEPARATOR = ""\x04"""
"define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.","def __init__ ( self , children = None , connector = None , negated = False ) :"
where '%s' is replaced with filename. return cls.,return cls
"try,",try :
cls is None.,cls = None
substitute TemporaryFile for NamedTemporaryFile.,NamedTemporaryFile = TemporaryFile
"if neg is true,",if neg :
"if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string, content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator, return the result. derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.",class RadioFieldRenderer ( ChoiceFieldRenderer ) :
substitute _itervalues for values.,values = _itervalues
return attrs.,return attrs
"get the 'silent_variable_failure' attribute of e object, if it exists and is true,","if getattr ( e , 'silent_variable_failure' , False ) :"
int_part_gd is an empty string.,int_part_gd = ''
return property object with _media as getter function.,return property ( _media )
"call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.",phone2numeric = allow_lazy ( phone2numeric )
"otherwise if self.verbosity equals integer 3,",elif self . verbosity == 3 :
"if not, self.hide_empty is boolean False. get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.",self . verbosity = options . get ( 'verbosity' )
"property decorator,",@ property
substitute '%r' with name and compile_function. define the method tag_function with 2 argument: self and func.,"def tag_function ( self , func ) :"
"strip message_context of ""'"" characters from both ends, substitute the result for message_context.","message_context = message_context . strip ( ""'"" )"
define the method merge with 2 arguments self and other.,"def merge ( self , other ) :"
"if f.db_index is true,",if f . db_index :
define the method __delitem__ with 2 arguments: self and header.,"def __delitem__ ( self , header ) :"
"if return value of function response.has_header with string 'Vary' as argument is boolean False,",if not response . has_header ( 'Vary' ) :
if size equals to integer zero.,if size == 0 :
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"value under the MISSES key of the stats dictionary, maxsize and length of cache. define the function cache_clear.",def cache_clear ( ) :
return boolean True.,return True
call the method val.encode with argument string 'ascii'.,val . encode ( 'ascii' )
"if not,",else :
DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode. define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.,"def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :"
"remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.","filters = config . pop ( 'filters' , None )"
substitute i-th element of value for widget_value.,widget_value = value [ i ]
define the method pk_is_not_editable with an argument pk.,def pk_is_not_editable ( pk ) :
"put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string. evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.","return six . text_type ( s ) . encode ( encoding , errors )"
define the method send_messages with arguments self and messages.,"def send_messages ( self , messages ) :"
return boolean False.,return False
"call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.",translation = self . _new_gnu_trans ( localedir )
_encoding is None.,_encoding = None
"append resolved_args to a list containing context element, substitute it for resolved_args.",resolved_args = [ context ] + resolved_args
"register.tag decorator,",@ register . tag
return value under the key key of d dictionary.,return d [ key ]
"call the method style.NOTICE with an argument string ""Note that only Django core commands are listed as settings are not properly configured (error: %s)."", where '%s' is replaced by self.settings_exception, append the result to usage.","usage . append ( style . NOTICE ( ""Note that only Django core commands are listed "" ""as settings are not properly configured (error: %s)."" % self . settings_exception ) )"
"if _cookie_encodes_correctly is boolean False,",if not _cookie_encodes_correctly :
"format string '\x1b[%sm' with RESET, return the result.",return '\x1b[%sm' % RESET
"if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.",return self . pointer < len ( self . subject )
"_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',","_js_escapes = { ord ( '\\' ) : '\\u005C' , ord ( '\'' ) : '\\u0027' , ord ( '""' ) : '\\u0022' , ord ( '>' ) : '\\u003E' , ord ( '<' ) : '\\u003C' , ord ( '&' ) : '\\u0026' , ord ( '=' ) : '\\u003D' , ord ( '-' ) : '\\u002D' , ord ( ';' ) : '\\u003B' , ord ( '\u2028' ) : '\\u2028' , ord ( '\u2029' ) : '\\u2029' }"
"if response is None,",if response is None :
substitute asvar for self.asvar.,self . asvar = asvar
self.backout is an empty list.,self . backout = [ ]
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
return self._client.,return self . _client
self.lineno is None.,self . lineno = None
"call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.","return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )"
"with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively. if self.verbosity is greater or equal to integer 1,",if self . verbosity >= 1 :
"split token.contents into separate words, substitute the first element of the result for command.",command = token . contents . split ( ) [ 0 ]
"call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,",obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
"substitute the result for queryset. if primary_keys is true,",if primary_keys :
operations is an empty list.,operations = [ ]
"call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,","prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]"
"if self.alternatives is true,",if self . alternatives :
"try,",try :
"join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.",tags_re = '(%s)' % '|' . join ( tags )
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
"call the M.set method with the key, real_value, coded_value as the arguments.","M . set ( key , real_value , coded_value )"
"property decorator,",@ property
"call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.","pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )"
"append string "" You may need to add %r to ALLOWED_HOSTS."" to msg, where '%s' is replaced with domain.","msg += "" You may need to add %r to ALLOWED_HOSTS."" % domain"
return the string. define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.,"def make_style ( opts = ( ) , ** kwargs ) :"
"call the function func with request and response as arguments, assign the result to response.","response = func ( request , response )"
"if StandardError, renamed to e, exception is caught,",except StandardError as e :
"decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.",month = months [ date . month - 1 ]
"if not,",else :
allow_multiple_selected is boolean False.,allow_multiple_selected = False
"if value is an instance of six.string_types and value is not equal to ALL_FIELDS,","if isinstance ( value , six . string_types ) and value != ALL_FIELDS :"
"if index is not None,",if index is not None :
raise an exception.,raise
convert value into boolean and substitute it for value.,value = bool ( value )
substitute length for self._length.,self . length = length
define the method is_secure with an argument self.,def is_secure ( self ) :
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.,BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
content_subtype is a string 'plain'.,content_subtype = 'plain'
old_field_name is None.,old_field_name = None
return None.,return None
field_notes is an empty list.,field_notes = [ ]
close fd file.,os . close ( fd )
substitute self.literal for value.,value = self . literal
self.resolver_match is None.,self . resolver_match = None
substitute key for result.key.,result . key = key
"call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.",self . connection = get_connection ( fail_silently = fail_silently )
"call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.","self . set_payload ( text , utf8_charset )"
"call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".'","parser . add_argument ( '--pythonpath' , help = 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".' )"
return self.__offset.,return self . __offset
FILTER_ARGUMENT_SEPARATOR is a string ':'.,FILTER_ARGUMENT_SEPARATOR = ':'
return nothing.,return
"call the method self.set with key, value, timeout and version as arguments.","self . set ( key , value , timeout , version )"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"substitute the result for trimmed. middle is a string '<a href=""%s""%s>%s</a>' formated with url, nofollow_attr and trimmed.","middle = '<a href=""%s""%s>%s</a>' % ( url , nofollow_attr , trimmed )"
return boolean True.,return True
append bytes to chunks.,chunks . append ( bytes )
"call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,",obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
"call the function to_language with an argument language, substitute it for self.__to_language.",self . __to_language = to_language ( language )
"get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.",connection = connections [ options [ 'database' ] ]
"get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,","return self . form . errors . get ( self . name , self . form . error_class ( ) )"
increment line by buffer_.,line = buffer_ + line
"if filename is not contained in _error_files,",if filename not in _error_files :
return chunk.,return chunk
"replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs. call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,","with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :"
"evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.",literal_match = self . literal_regex . match ( domain_part )
"call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.","item , old_style_list = convert_old_style_list ( sublist )"
import module os.,import os
"replace '%s' in string ""copying plural forms: %s\n"" with plural_form_line, write it to self.stdout.","self . stdout . write ( ""copying plural forms: %s\n"" % plural_form_line )"
"raise an TemplateSyntaxError exception with an argument string '""with"" in %r tag needs at least one keyword argument.',","raise TemplateSyntaxError ( '""with"" in %r tag needs at least ' 'one keyword argument.' % bits [ 0 ] )"
substitute block for value under the 'block' key of context dictionary.,context [ 'block' ] = block
call the method parser.delete_first_token.,parser . delete_first_token ( )
return boolean False.,return False
"try,",try :
return boolean False.,return False
"append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.","patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]"
"try,",try :
"if locales is true,",if locales :
convert value to lowercase and return the result.,return value . lower ( )
"define the function npgettext with 4 arguments: context, singular, plural and number.","def npgettext ( context , singular , plural , number ) :"
raise an exception.,raise
"try,",try :
"compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.",DIGIT_PATTERN = re . compile ( r'^\d+$' )
"split label by '.', assign the result to app_label and model_label, respectively.","app_label , model_label = label . split ( '.' )"
self.vals is an empty list.,self . vals = [ ]
"def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.","def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :"
"substitute the result for formatters dictionary value under name key. if StandardError, renamed to e, exception is caught,",except StandardError as e :
"if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.",return self . choice_value in self . value
"define the function dec with an argument func,",def dec ( func ) :
"try,",try :
"sort loader.migrated_apps, substitute it for app_names.",app_names = sorted ( loader . migrated_apps )
"if six.PY3 is true,",if six . PY3 :
return the result. define the method unclosed_block_tag with 2 arguments: self and parse_until.,"def unclosed_block_tag ( self , parse_until ) :"
domain_whitelist is a list containing string 'localhost'.,domain_whitelist = [ 'localhost' ]
"if value is an instance of bytes class,","if isinstance ( value , bytes ) :"
from django.template.base import TemplateDoesNotExist into default name space.,from django . template . base import TemplateDoesNotExist
"call the function os.path.basename with an arguments path, substitute the result for filename.",filename = os . path . basename ( path )
"call the import_string with app_path as an argument, return the result.",return import_string ( app_path )
"call the method parser.next_token, substitute the result for token.",token = parser . next_token ( )
define the function code_changed.,def code_changed ( ) :
"if opname is not contained in roots,",if opname not in roots :
"if self.help is true,",if self . help :
import module zlib.,import zlib
args is an empty tuple.,args = ( )
derive the class Critical from base class CheckMessage.,class Critical ( CheckMessage ) :
import module sys.,import sys
"call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.","d = datetime . datetime ( d . year , d . month , d . day )"
"call the function warnings.warn with 3 arguments: string ""SortedDict is deprecated and will be removed in Django 1.9."",","warnings . warn ( ""SortedDict is deprecated and will be removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"
substitute var_name for self.var_name.,self . var_name = var_name
if check is not contained in self.registered_checks.,if check not in self . registered_checks :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"otherwise if disable_existing is true,",elif disable_existing :
"call the method self.options.copy, substitute the result for self.json_kwargs.",self . json_kwargs = self . options . copy ( )
"if LookupError exception is caught,",except LookupError :
from threading import local into default name space.,from threading import local
"if self._options exists,",if self . _options :
derive the class Rss201rev2Feed from the RssFeed base class.,class Rss201rev2Feed ( RssFeed ) :
define the method is_valid with an argument self.,def is_valid ( self ) :
return attrs.,return attrs
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.,"self . instance . full_clean ( exclude = exclude , validate_unique = False )"
from django.utils.translation import ugettext_lazy as _ into default name space.,from django . utils . translation import ugettext_lazy as _
"if AttributeError exception is caught,",except AttributeError :
"key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments: value, encoding and errors set to string 'replace'. call the method mutable substitute for self._mutable.",self . _mutable = mutable
define the method id_for_label with arguments self and id.,"def id_for_label ( self , id_ ) :"
"both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.","both_before = [ Tok ( ""comment"" , r""/\*(.|\n)*?\*/"" ) , Tok ( ""linecomment"" , r""//.*?$"" ) , Tok ( ""ws"" , r""\s+"" ) , Tok ( ""keyword"" , literals ( """""" break case catch class const continue debugger default delete do else enum export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with """""" , suffix = r""\b"" ) , next = 'reg' ) , Tok ( ""reserved"" , literals ( ""null true false"" , suffix = r""\b"" ) , next = 'div' ) , Tok ( ""id"" , r"""""" ([a-zA-Z_$ ]|\\u[0-9a-fA-Z]{4}) # first char ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})* # rest chars """""" , next = 'div' ) , Tok ( ""hnum"" , r""0[xX][0-9a-fA-F]+"" , next = 'div' ) , Tok ( ""onum"" , r""0[0-7]+"" ) , Tok ( ""dnum"" , r"""""" ( (0|[1-9][0-9]*) # DecimalIntegerLiteral \. # dot [0-9]* # DecimalDigits-opt ([eE][-+]?[0-9]+)? # ExponentPart-opt | \. # dot [0-9]+ # DecimalDigits ([eE][-+]?[0-9]+)? # ExponentPart-opt | (0|[1-9][0-9]*) # DecimalIntegerLiteral ([eE][-+]?[0-9]+)? # ExponentPart-opt ) """""" , next = 'div' ) , Tok ( ""punct"" , literals ( """""" >>>= === !== >>> <<= >>= <= >= == != << >> && || += -= *= %= &= |= ^= """""" ) , next = ""reg"" ) , Tok ( ""punct"" , literals ( ""++ -- ) ]"" ) , next = 'div' ) , Tok ( ""punct"" , literals ( ""{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : ="" ) , next = 'reg' ) , Tok ( ""string"" , r'""([^""\\]|(\\(.|\n)))*?""' , next = 'div' ) , Tok ( ""string"" , r""'([^'\\]|(\\(.|\n)))*?'"" , next = 'div' ) , ]"
"iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.","iterator = ChunkIter ( stream_or_iterable , 16384 )"
"try,",try :
if count is equal to integer 0.,if count == 0 :
"otherwise if rhs is an instance of SafeBytes,","elif isinstance ( rhs , SafeBytes ) :"
"pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.","self . stream = kwargs . pop ( 'stream' , sys . stdout )"
if self.stream is None:,if self . stream is None :
"get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.","self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )"
"if set is empty return string '(none)' instead, append the previous to the string "" Apply all migrations: "", use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL, use the result as an argument for the call to the method self.stdout.write. if not,",else :
"if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,","if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :"
"concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,","sys . modules [ __name__ + "".moves."" + attr . name ] = attr"
"call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.","return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )"
"call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.","statements = connection . ops . sequence_reset_sql ( self . style , models )"
"self.instance and unpacked dictionary kwargs. if form._meta.fields is true,",if form . _meta . fields :
"string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'. define the method __init__ with 13 arguments: self, queryset, empty_label set to a string ""---------"", cache_choices set to None,","def __init__ ( self , queryset , empty_label = ""---------"" , cache_choices = None , required = True , widget = None , label = None , initial = None , help_text = '' , to_field_name = None , limit_choices_to = None , * args , ** kwargs ) :"
"append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,","options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in parser . option_list ]"
if mw_instance has an attribute named 'process_template_response'.,"if hasattr ( mw_instance , 'process_template_response' ) :"
"if status is not equal to STATUS_OK,",if status != STATUS_OK :
do nothing.,pass
define the method _get_to_python with 2 arguments: self and field.,"def _get_to_python ( self , field ) :"
"call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.","t = get_template ( template_name , dirs )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.,VARIABLE_ATTRIBUTE_SEPARATOR = '.'
"to_locale called with an argument lang_code, if the result is not None, return boolean True.",return True
from django.utils import datetime_safe into default name space.,from django . utils import datetime_safe
"call the method MIMEMessage.__setitem__ with arguments self, name and val.","MIMEMessage . __setitem__ ( self , name , val )"
"call the method field.hidden_widget, substitute the result for field.hidden_widget.",hidden_widget = field . hidden_widget ( )
define the method __getstate__ with an argument self.,def __getstate__ ( self ) :
append string '_0' to id_.,id_ += '_0'
return string 'StopUpload: Halt current upload.'.,return 'StopUpload: Halt current upload.'
"subtract _cached_modules from module_values, assign the result to new_modules.",new_modules = module_values - _cached_modules
"if timezone is None,",if timezone is None :
if content is not None raise an error.,assert content is not None
substitute template_string for self.template_string.,self . template_string = template_string
"extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude', min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min', validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts', and error_messages for 'error_messages'. call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.","FormSet = modelformset_factory ( model , ** kwargs )"
import module sys.,import sys
"action set to 'append', default is a list containing string 'py' and help set to string: 'The file extension(s) to render (default: ""py""). Separate multiple extensions with commas, or use -e multiple times.'. call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',","parser . add_argument ( '--name' , '-n' , dest = 'files' , action = 'append' , default = [ ] , help = 'The file name(s) to render. ' 'Separate multiple extensions with commas, or use ' '-n multiple times.' )"
"if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,","if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :"
"extend errors list with m for every m in e.error_list, only if m is not in errors.",errors . extend ( m for m in e . error_list if m not in errors )
remove symlink_path file.,os . remove ( symlink_path )
substitute string 'ascii' for encoding.,encoding = 'ascii'
statement is an empty list.,statement = [ ]
"dest set to string 'no_location', default as boolean False and help as a string ""Don't write '#: filename:line' lines."". call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',","parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' , default = False , help = ""Remove obsolete message strings."" )"
"compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.",CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if BLOCK_CONTEXT_KEY is not contained in context.render_context,",if BLOCK_CONTEXT_KEY not in context . render_context :
derive the class LocMemCache from the base class BaseCache.,class LocMemCache ( BaseCache ) :
"name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None. append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:","getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )"
"call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.","return self . _base_set ( 'add' , key , value , timeout )"
skip this loop execution.,continue
from django.core.management.color import color_style into default name space.,from django . core . management . color import color_style
"get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.",self . verbosity = options . get ( 'verbosity' )
define the method to_python with 2 arguments: self and value.,"def to_python ( self , value ) :"
"raise an exception,",raise
"try,",try :
"if length of bits is smaller than integer 1,",if len ( bits ) < 1 :
"decorator stringfilter,",@ stringfilter
"where '%r' is replaced with name and filter_func, respectively. define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.","def filter_function ( self , func , ** flags ) :"
define the method send_messages with arguments self and email_messages.,"def send_messages ( self , email_messages ) :"
"call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path, and info, respectively.","the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )"
"if accept_lang equals '*',",if accept_lang == '*' :
"call the os.path.normpath with argument path, return the result.",return os . path . normpath ( path )
derive the class FilePathField from the base class ChoiceField class.,class FilePathField ( ChoiceField ) :
from django.conf import settings into default name space.,from django . conf import settings
return value.,return value
"fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively. otherwise if length of fks_to_parent is zero,",elif len ( fks_to_parent ) == 0 :
"if not,",else :
call the method field_params.update with an argument new_params.1,field_params . update ( new_params )
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',","parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' , help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )"
"call the method self.stdout.write with an argument string ""Loading '%s' fixtures..."", where '%s' is replaced with fixture_name.","self . stdout . write ( ""Loading '%s' fixtures..."" % fixture_name )"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
delete attr.,del attr
"if app_label is not contained in executor.loader.migrated_apps,",if app_label not in executor . loader . migrated_apps :
"if PY3 is true,",if PY3 :
"define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.","def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :"
"call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.",request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
"if errors is true,",if errors :
substitute formfield.limit_choices_to for limit_choices_to.,limit_choices_to = formfield . limit_choices_to
"call the function render_value_in_context with 2 arguments: value and context, return the result.","return render_value_in_context ( value , context )"
define the function url with 2 arguments: parser and token.,"def url ( parser , token ) :"
"if not,",else :
"if content is None, raise an error.",assert content is not None
return wrapped.,return wrapped
"call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.",resource = resource . decode ( settings . FILE_CHARSET )
define the method a with an argument self.,def a ( self ) :
"try,",try :
"try,",try :
"if months is true,",if months :
"raise an BadSignature exception with an argument string 'No ""%s"" found in value', where '%s' is replaced by self.sep.","raise BadSignature ( 'No ""%s"" found in value' % self . sep )"
"raise an TemplateSyntaxError exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"",","raise TemplateSyntaxError ( ""Searching for value. Unexpected "" ""end of string in column %d: %s"" % ( i , subject ) )"
"Meta is an instance of class with name 'Meta', parent base class and fields attrs.","Meta = type ( str ( 'Meta' ) , parent , attrs )"
"call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.","localpart , domain = addr . split ( '@' , 1 )"
"if extra_classes has an attribute 'split',","if hasattr ( extra_classes , 'split' ) :"
_format_modules_cache is an empty dictionary.,_format_modules_cache = { }
"for every match in the result, substitute match.lastgroup for name.",name = match . lastgroup
"if length of hextet is greater than integer 1,",if len ( hextet ) > 1 :
"re.U and re.S, substitute the result for re_chars. call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.",re_newlines = re . compile ( r'\r\n|\r' )
"if length of s is greater than integer 13,",if len ( s ) > 13 :
return an empty string.,return ''
"call the method self.attach with arguments filename, content and mimetype.","self . attach ( filename , content , mimetype )"
"define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.","def serialize ( format , queryset , ** options ) :"
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.,"self . day_none_value = ( 0 , empty_label [ 2 ] )"
from django.core import signals into default name space.,from django . core import signals
"if is_templatized is true,",if is_templatized :
"and re.VERBOSE, substitute the result for accept_language_re. call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,","language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )"
call the function import_module with an argument project_name.,import_module ( project_name )
define the function compile_filter with 2 arguments: self and token.,"def compile_filter ( self , token ) :"
"define the method __new__ with 4 arguments: mcs, name, bases and attrs.","def __new__ ( mcs , name , bases , attrs ) :"
"if primary_keys is true,",if primary_keys :
"if incremental is true,",if incremental :
"options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead. call the self.xml.startDocument method.",self . xml . startDocument ( )
"join callback.__module__, character ""."" and callback.__class__.__name__ together, substitute the result for lookup_str.","lookup_str = callback . __module__ + ""."" + callback . __class__ . __name__"
"if self._validate_unique is true,",if self . _validate_unique :
"define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.","def normalize_col_name ( self , col_name , used_column_names , is_relation ) :"
substitute self._pk_field.name for name.,name = self . _pk_field . name
VARIABLE_TAG_START is a string '{{'.,VARIABLE_TAG_START = '{{'
return ZERO.,return ZERO
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
call the method self.connection.starttls.,self . connection . starttls ( )
skip this loop iteration.,continue
substitute opts for value under the 'opts' key of definition dictionary.,definition [ 'opts' ] = opts
define the function get_language_info with an argument lang_code.,def get_language_info ( lang_code ) :
"for every cache_alias in settings.CACHES,",for cache_alias in settings . CACHES :
define the method __bool__ with argument self.,def __bool__ ( self ) :
"call the function render_value_in_context with 2 arguments output and context, return the result.","return render_value_in_context ( output , context )"
derive the class SlugField from the base class CharField class.,class SlugField ( CharField ) :
from importlib import import_module into default name space.,from importlib import import_module
skipped is an empty list.,skipped = [ ]
"join elements of output into a string, separated with newlines, return the result.",return '\n' . join ( output )
"call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.","statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )"
"help set to a string 'The file extension(s) to examine (default: ""html,txt"", or ""js"" ' 'if the domain is ""djangojs""). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'. call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',","parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' , default = False , help = 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.' )"
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.,"from django . utils . functional import allow_lazy , SimpleLazyObject"
define the method list with an argument self.,def list ( self ) :
raise an LookupError with an argument lang_code.,raise LookupError ( lang_code )
"if k is contained in seen,",if k in seen :
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
define the method end_object with argument self and obj.,"def end_object ( self , obj ) :"
"call the function timezone.make_aware with arguments value and current_timezone, return the result.","return timezone . make_aware ( value , current_timezone )"
"if not,",else :
call the method o.isoformat substitute the result for r.,r = o . isoformat ( )
"join self.path and f in path, substitute the result for full_file.","full_file = os . path . join ( self . path , f )"
remove the entry under the 'fields' key of the self.json_kwargs dictionary.,"self . json_kwargs . pop ( 'fields' , None )"
substitute the result of the function data.temporary_file_path for file.,file = data . temporary_file_path ( )
call the method clean with an argument value from the base class of the EmailField class.,"return super ( EmailField , self ) . clean ( value )"
"call the function data with 3 arguments: self.year, self.month and self.day, return the result.","return date ( self . year , self . month , self . day )"
"call the method self.find_files with an argument string '.', substitute the result for file_list.","file_list = self . find_files ( ""."" )"
define the function get_fixed_timezone with an argument offset.,def get_fixed_timezone ( offset ) :
while RUN_RELOADER is true.,while RUN_RELOADER :
"if filename ends with '/' or with '\\',","if filename . endswith ( ( '/' , '\\' ) ) :"
"join app_config.path and string 'management' into a file path, substitute it for path.","path = os . path . join ( app_config . path , 'management' )"
"call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.","super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )"
"for every f in file_field_list,",for f in file_field_list :
define the method rendered_content with an argument self.,def rendered_content ( self ) :
"if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.",tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
"if sys.platform starts with a string 'java',",if sys . platform . startswith ( 'java' ) :
widget_value is None.,widget_value = None
"call the method Module_six_moves_urllib_request with an argument: string "".moves.urllib.error"" appended to __name__,","sys . modules [ __name__ + "".moves.urllib_error"" ] = sys . modules [ __name__ + "".moves.urllib.error"" ] = Module_six_moves_urllib_error ( __name__ + "".moves.urllib.error"" )"
"if value is an instance of str type,","if isinstance ( value , str ) :"
"return an string ""<%s: %r>"", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.","return ""<%s: %r>"" % ( self . __class__ . __name__ , self . var )"
substitute length of item for len_item.,len_item = len ( item )
self._post is an instance of QueryDict class created with an empty string as argument.,self . _post = QueryDict ( '' )
break from the loop execution.,break
"finally perform,",finally :
shown is an empty set.,shown = set ( )
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.,kwargs [ 'widget' ] = widgets [ f . name ]
return an instance of CommentNode class.,return CommentNode ( )
"dest set to string 'no_color' default set to boolean False and help set to a string ""Don't colorize the command output."". for every opt in self.option_list,",for opt in self . option_list :
call the function func with an argument path.,func ( path )
return errors.,return errors
define the method __repr__ with an argument self.,def __repr__ ( self ) :
silent is boolean True.,silent = True
"define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.","def _BaseCookie__set ( self , key , real_value , coded_value ) :"
"if m is None,",if m is None :
"ext_list is an empty list,",ext_list = [ ]
"message is a string 'use only numbers, letters and underscores'.","message = 'use only numbers, letters and underscores'"
"call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.","resolver = get_ns_resolver ( ns_pattern , resolver )"
define the method items with an argument self.,def items ( self ) :
append tuple containing element attr to boolean_attrs.,"boolean_attrs . append ( ( attr , ) )"
"for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,","for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :"
streaming is boolean False.,streaming = False
"if ascii value of char is smaller than integer 33 or is equal to integer 127,",if ord ( char ) < 33 or ord ( char ) == 127 :
"call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.",return os . path . exists ( self . path ( name ) )
"call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to print the SQL for. Defaults to the ' '""default"" database.' )"
"get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.","self . fields = getattr ( options , 'fields' , None )"
"call the function block_re.match with an argument t.contents, substitute the result for bmatch.",bmatch = block_re . match ( t . contents )
"get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.","DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )"
define the function csrf_token with 2 arguments: parser and token.,"def csrf_token ( parser , token ) :"
"with field_value as an argument, substitute the result for obj_pk. return obj_pk.",return obj_pk
and errors set to the result of self.default_error_messages.copy.,errors = self . default_error_messages . copy ( )
"if not,",else :
call the method __init__ from the base class of the EntitiesForbidden class.,"super ( EntitiesForbidden , self ) . __init__ ( )"
"if takes_context is true,",if takes_context :
return an empty string.,return ''
substitute self._meta for opts.,opts = self . _meta
substitute format_string for self.format_string.,self . format_string = format_string
"call the function conditional_escape with an argument checkbox_name,",substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
"call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,","super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix , queryset = qs , ** kwargs )"
"if max_value is not None,",if max_value is not None :
"if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.",return data_set != initial_set
"called with an argument w, and sub_widgets as an empty string, append the result to output. call the function format_html with 3 arguments: self.outer_html,","return format_html ( self . outer_html , id_attr = format_html ( ' id=""{0}""' , id_ ) if id_ else '' , content = mark_safe ( '\n' . join ( output ) ) )"
"where string '%s' is replaced by lookup_view and mod_name, respectively. if not,",else :
import module random.,import random
"get the position of the self.file file pointer, substitute it for pos.",pos = self . file . tell ( )
"if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,",if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
"define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
define the function modelform_defines_fields with an argument form_class.,def modelform_defines_fields ( form_class ) :
remove item from self dictionary.,self . remove ( item )
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.,last [ NEXT ] = root [ PREV ] = link
"for field in self if field.is_hidden is true, append field to a list, return the resulting list.",return [ field for field in self if field . is_hidden ]
"call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.","simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )"
"raise an ViewDoesNotExist exception with an argument string ""Could not import '%s.%s'. View is not callable."",","raise ViewDoesNotExist ( ""Could not import '%s.%s'. View is not callable."" % ( mod_name , func_name ) )"
"register.tag decorator,",@ register . tag
"call the function _ with an argument string 'PM', return the result.",return _ ( 'PM' )
from django.utils.six.moves import cPickle as pickle into default name space.,from django . utils . six . moves import cPickle as pickle
from django.template.defaultfilters import date into default name space.,from django . template . defaultfilters import date
"in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,","field_desc += ', ' . join ( [ '%s=%s' % ( k , strip_prefix ( repr ( v ) ) ) for k , v in extra_params . items ( ) ] )"
import module copy.,import copy
"self.config is an instance of ConvertingDict, called with an argument config.",self . config = ConvertingDict ( config )
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.,"parser . add_argument ( 'args' , nargs = '*' )"
define the method symlinks_supported.,def symlinks_supported ( ) :
insert none_value at the beginning of the choices list.,"choices . insert ( 0 , none_value )"
"call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.","super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )"
delete the value under the header converted to lowercase key of the self._headers dictionary.,del self . _headers [ header . lower ( ) ]
"if settings.TEMPLATE_DEBUG is true,",if settings . TEMPLATE_DEBUG :
"call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.","parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' , help = 'Path(s) to fixtures to load before running the server.' )"
"if unpack is true,",if unpack :
skip this loop iteration.,continue
"if not,",else :
substitute charset for self.charset.,self . charset = charset
decrement mtime by stat.st_ctime.,mtime -= stat . st_ctime
substitute conn_type for self.connector.,self . connector = conn_type
"RemovedInDjango19Warning and stacklevel set to integer 2. define the function _resolve_name with 3 arguments: name, package and level.","def _resolve_name ( name , package , level ) :"
from django.utils._os import safe_join into default name space.,from django . utils . _os import safe_join
define the function get_key_func with argument key_func.,def get_key_func ( key_func ) :
"if self has an attribute '_choices',","if hasattr ( self , '_choices' ) :"
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.,_DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
get maximal element from roots and substitute it for root.,root = max ( roots )
"call the function warnings.warn with 2 arguments: string ""``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead."" and RemovedInDjango19Warning.","warnings . warn ( ""``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead."" , RemovedInDjango19Warning )"
substitute notation_name for self.notation_name.,self . notation_name = notation_name
call the function validate_ipv46_address with an argument ip_address.,validate_ipv46_address ( ip_address )
"call the function os.path.dirname with an argument django.__file__, join the result into a path,",django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
self._view_middleware is an empty list.,self . _view_middleware = [ ]
"call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.","app_output = self . handle_app_config ( app_config , ** options )"
otherwise if message is an instance of the list type.,"elif isinstance ( message , list ) :"
"get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.","return data . get ( name , None )"
"if not, substitute func.__name__ for name. call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.","return self . filter ( name , func , ** flags )"
escaped is boolean False.,escaped = False
"call the encode method on the result with string 'latin-1' as an argument, return the result. define the method loads with arguments self and data.","def loads ( self , data ) :"
"call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,","substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )"
"for every model in app_models,",for model in app_models :
"if content is an instance of a EmailMessage class,","if isinstance ( content , EmailMessage ) :"
"try,",try :
"call the function restart_with_reloader, substitute the return value for exit_code.",exit_code = restart_with_reloader ( )
"call the method d.as_tuple, substitute the result for tupl.",tupl = d . as_tuple ( )
return __wrapper__.,return __wrapper__
"try,",try :
"and unpacked dictionary kwargs, substitute the result for form. if self.save_as_new is true,",if self . save_as_new :
"if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,","if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :"
from django.conf import settings into default name space.,from django . conf import settings
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.,"f . save_form_data ( instance , cleaned_data [ f . name ] )"
"if not,",else :
call the function sys.exit with an argument integer 1.,sys . exit ( 1 )
remove first element of unhandled_params.,unhandled_params . pop ( 0 )
"if KeyError exception is caught,",except KeyError :
substitute self._regex for regex.,regex = self . _regex
"if the 'fake' key doesnt exists set fake to boolean False, as arguments. call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.","emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )"
"if name is None and compile_function is None,",if name is None and compile_function is None :
define the method copy with an argument self.,def copy ( self ) :
choice_input_class is None.,choice_input_class = None
"use the result as an argument for the call to the function mark_safe, return the result. if p equals integer 0,",if p == 0 :
"return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for ""xml:lang"",","return { ""xmlns"" : self . ns , ""xml:lang"" : self . feed [ 'language' ] }"
"if value equals self.empty_value or value is contained in self.empty_values,",if value == self . empty_value or value in self . empty_values :
"for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren', and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'. append string '_fork' to flup_module.",flup_module += '_fork'
substitute base.__name__ for class_name.,class_name = base . __name__
"return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,","return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )"
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return self . _html_output ( normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' , error_row = '<tr><td colspan=""2"">%s</td></tr>' , row_ender = '</td></tr>' , help_text_html = '<br /><span class=""helptext"">%s</span>' , errors_on_separate_row = False )"
"if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,",if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
"try,",try :
"substitute the result for origin. try,",try :
"return an raw string '\""'.","return r'\""'"
"call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.",key = force_bytes ( settings . SECRET_KEY )
define the method tell with an argument self.,def tell ( self ) :
substitute cls for obj.__class__.,obj . __class__ = cls
"call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,","call_command ( 'flush' , verbosity = max ( self . verbosity - 1 , 0 ) , interactive = False , database = db , reset_sequences = False , inhibit_post_migrate = True , )"
"define the method compile_filter_error with 3 arguments: self, token and e.","def compile_filter_error ( self , token , e ) :"
from django.utils import six into default name space.,from django . utils import six
"if self.loaded_object_count is greater than zero,",if self . loaded_object_count > 0 :
self._regex_dict is an empty dictionary.,self . _regex_dict = { }
"boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.","boundarystream = InterBoundaryIter ( self . _stream , self . _separator )"
"join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.","msg [ 'Cc' ] = ', ' . join ( self . cc )"
return Operator.,return Operator
"call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,",return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
"call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,","six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )"
"if field is contained in self.errors return boolean True, if not, return boolean False.",return field in self . errors
"if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.","f . error_messages . setdefault ( 'incomplete' , self . error_messages [ 'incomplete' ] )"
"call the method imatch.group with an argument integer 1, if it evaluates to true,",if imatch . group ( 2 ) :
self.choices is an empty list.,self . choices = [ ]
"if old_handler is not None,",if old_handler is not None :
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.,"for field_node in node . getElementsByTagName ( ""field"" ) :"
return value.,return value
"if base.DeserializationError exception is caught,",except base . DeserializationError :
"if not,",else :
substitute base for self.base.,self . base = base
"call logging.getLogger method with string 'django.request' as argument, store the result in logger.",logger = logging . getLogger ( 'django.request' )
increment stats dictionary value under the MISSES key by integer 1.,stats [ MISSES ] += 1
substitute args for self.args.,self . args = args
derive the class MaxValueValidator form the BaseValidator base class.,class MaxValueValidator ( BaseValidator ) :
"call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.",key = ':' . join ( urlquote ( var ) for var in vary_on )
"integer 212, integer 243, integer 273, integer 304 and integer 334. define the method b with an argument self.",def b ( self ) :
"raise an BadHeaderError exception with argument string ""Header values can't contain newlines (got %r for header %r)"",","raise BadHeaderError ( ""Header values can't contain newlines (got %r for header %r)"" % ( val , name ) )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
docsring,""""""" Set a value in the cache if the key does not already exist. If timeout is given, that timeout will be used for the key; otherwise the default cache timeout will be used. Returns True if the value was stored, False otherwise. """""""
"with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments. for every attr in _moved_attributes,",for attr in _moved_attributes :
define the method handle_charref with 2 arguments self and name.,"def handle_charref ( self , name ) :"
"try,",try :
"call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.",__nonzero__ = new_method_proxy ( bool )
"if AttributeError exception is caught,",except AttributeError :
"if other equals list containing elements of self, return boolean True, otherwise return boolean False.",return list ( self ) == other
define class dummy.,class dummy :
"call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.",url = smart_urlquote ( 'http://%s' % middle )
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field_name)s which must be unique for,","return ugettext ( ""Please correct the duplicate data for %(field_name)s "" ""which must be unique for the %(lookup)s in %(date_field)s."" ) % { 'field_name' : date_check [ 2 ] , 'date_field' : date_check [ 3 ] , 'lookup' : six . text_type ( date_check [ 1 ] ) , }"
from collections import namedtuple.,from collections import namedtuple
"call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.","return self . filter_function ( name , ** flags )"
do nothing.,pass
"'""Upload a valid image. The file you uploaded was either not an image or a corrupted image.""' for 'invalid_image'. define the method to_python with arguments self and data.","def to_python ( self , data ) :"
"if not,",else :
derive the class Parser from the base class object.,class Parser ( object ) :
"while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,",while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
substitute new_result for result.,result = new_result
define the function has_bom with fn as argument.,def has_bom ( fn ) :
"if t is not None,",if t is not None :
"try,",try :
derive the class HttpRequest from the object base class.,class HttpRequest ( object ) :
"call the method timezone.is_aware with an argument expires, if it evaluates to true,",if timezone . is_aware ( expires ) :
"shell is an instance of IPShell class, created with an argument argv as an empty list.",shell = IPShell ( argv = [ ] )
"call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.","return do_ifequal ( parser , token , False )"
"subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,","subject = '%s (%s IP): %s' % ( record . levelname , ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS else 'EXTERNAL' ) , record . getMessage ( ) )"
"get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.",cookiedict [ key ] = c . get ( key ) . value
"raise an ValueError with string ""This file is not accessible via a URL."" as argument.","raise ValueError ( ""This file is not accessible via a URL."" )"
"if initial is None,",if initial is None :
"if not,",else :
"fname is a string ""%s-%s.log"", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.","fname = ""%s-%s.log"" % ( timestamp , abs ( id ( self ) ) )"
"call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.","super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )"
"attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.","attachment = SafeMIMEMessage ( content , subtype )"
"for every attr in self.child_nodelists,",for attr in self . child_nodelists :
"encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:","encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )"
"call the function warnings.warn with string ""'get_cache' is deprecated in favor of 'caches'."", RemovedInDjango19Warning,","warnings . warn ( ""'get_cache' is deprecated in favor of 'caches'."" , RemovedInDjango19Warning , stacklevel = 2 )"
"if not,",else :
re raise an exception.,raise
call the method block_context.add_blocks with an argument self.block.,block_context . add_blocks ( self . blocks )
"get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.","filters = config . get ( 'filters' , None )"
"substitute the result for url_fields. call the function urlunsplit with an argument url_fields, substitute the result for value.",value = urlunsplit ( url_fields )
"raise an exception,",raise
define the method message_dict with an argument self.,def message_dict ( self ) :
"try,",try :
define the function set_urlconf with an argument urlconf_name.,def set_urlconf ( urlconf_name ) :
from django.core.serializers.python import Serializer as PythonSerializer into default name space.,from django . core . serializers . python import Serializer as PythonSerializer
do nothing.,pass
"remove file path_to_remove,",os . remove ( path_to_remove )
"if not,",else :
"return self.field.widget.is_hidden,",return self . field . widget . is_hidden
"try,",try :
"call the self.style.MIGRATE_HEADING method with string ""Running migrations:"" as an argument, use the result as an argument for the call to the self.stdout.write method.","self . stdout . write ( self . style . MIGRATE_HEADING ( ""Running migrations:"" ) )"
"if color_setting is True,",if color_settings :
"self.add_prefix called with an argument name, substitute the result for value. try,",try :
"try,",try :
"if not,",else :
doctring,""""""" Adds (or updates) the ""Vary"" header in the given HttpResponse object. newheaders is a list of header names that should be in ""Vary"". Existing headers in ""Vary"" aren't removed. """""""
define the method fixture_dirs with an argument self.,def fixture_dirs ( self ) :
"if third element from the end of the args equals string 'as',","if args [ - 3 ] == ""as"" :"
"remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.","renderer = kwargs . pop ( 'renderer' , None )"
"call the method dict_.getlist with an argument key, return the result.",return dict_ . getlist ( key )
"define the method _has_changed with 3 arguments: self, initial and data.","def _has_changed ( self , initial , data ) :"
substitute os.unlink for unlink.,unlink = os . unlink
"for every index in range of integers from 0 to length of hextets, not included,",for index in range ( len ( hextets ) ) :
"if terminal_char is not equal to string ')',",if terminal_char != ')' :
"define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList , label_suffix = None , empty_permitted = False ) :"
"raise an base.DeserializationError exception with string ""<field> node is missing the 'name' attribute"" as argument.","raise base . DeserializationError ( ""<field> node is missing the 'name' attribute"" )"
define the method unget with arguments self and bytes.,"def unget ( self , bytes ) :"
"if self.data.minute equals integer 0 and self.data.hour equals integer 12,",if self . data . minute == 0 and self . data . hour == 12 :
return the result. sign is an empty string.,sign = ''
"if string 'id' is contained in self.attrs,",if 'id' in self . attrs :
"if PY3 is true,",if PY3 :
"define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList , label_suffix = None , empty_permitted = False , instance = None ) :"
define the method clear_checkbox_name with 2 arguments: self and name.,"def clear_checkbox_name ( self , name ) :"
substitute i-th element of self.forms for form.,form = self . forms [ i ]
define the method content with self and value.,"def content ( self , value ) :"
return boolean False.,return False
"call the function pformat with an argument value, return the result.",return pformat ( value )
"otherwise if autoescape is true,",elif autoescape :
"try,",try :
"if not,",else :
return boolean False.,return False
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
"if not,",else :
substitute WindowsError for WindowsError.,WindowsError = WindowsError
define the function lock with arguments f and flags.,"def lock ( f , flags ) :"
"if timeout equals to DEFAULT_TIMEOUT,",if timeout == DEFAULT_TIMEOUT :
import module sys.,import sys
"convert if into a string append to it a string '_month', return the result.",return '%s_month' % id_
"and number set to number, return the result. define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.","def ungettext_lazy ( singular , plural , number = None ) :"
"call the function dec with an argument func, return the result.",return dec ( func )
"called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary. if self.is_required is false,",if not self . is_required :
substitute prefix for self.prefix.,self . prefix = prefix
"call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,",if field_node . getElementsByTagName ( 'None' ) :
"return list with an element first_item, and boolean True.","return [ first_item ] , True"
derive the class Archive from the object base class.,class Archive ( object ) :
"where '%s' is replaced with self.__class__.__name__. for form in self.forms append form.cleaned_data to a list, return the resulting list.",return [ form . cleaned_data for form in self . forms ]
"get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,","if getattr ( current , 'do_not_call_in_templates' , False ) :"
"otherwise if tzinfo is not None,",elif tzinfo is not None :
"call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.",attrvalue = self . unescape ( attrvalue )
"call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.",self . _wrapped = get_storage_class ( ) ( )
"call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.",illegal_formatting = _illegal_formatting . search ( fmt )
return msgid.,return msgid
define the method update with 2 arguments: self and dict_.,"def update ( self , dict_ ) :"
references_to_delete is an empty dictionary.,references_to_delete = { }
yield node as an return value of a generator.,yield node
return rv.,return rv
"for every node in self.nodelist,",for node in self . nodelist :
define the function inotify_code_changed.,def inotify_code_changed ( ) :
"if length of unique_check equals integer 1,",if len ( unique_check ) == 1 :
"return an instance of ModelChoiceIterator class, created with an argument self.",return ModelChoiceIterator ( self )
"try,",try :
"if not,",else :
model_list is an empty list.,model_list = [ ]
"if ch is contained in string ""iLmsu#"",","if ch in ""iLmsu#"" :"
"use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir. if self.domain equals a string 'djangojs',",if self . domain == 'djangojs' :
from __future__ import absolute_import into default name space.,from __future__ import absolute_import
"if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,","if sys . version_info >= ( 2 , 7 , 2 ) :"
"if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,",if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) ) or '\\' not in path ) :
"unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,","input_attrs = dict ( value = force_text ( v ) , ** final_attrs )"
"call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.","name , val = forbid_multi_line_headers ( name , val , self . encoding )"
"if related is true,",if related :
"if not,",else :
"call the method apps.get_app_config with an argument app_label, substitute the result for app_config.",app_config = apps . get_app_config ( app_label )
call the method self._add_fallback.,self . _add_fallback ( )
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,","out . write ( ' npgettext(%r, %r, %r,count) ' % ( message_context , join_tokens ( singular , trimmed ) , join_tokens ( plural , trimmed ) ) )"
stats is an list with 2 elements: 2 integers 0.,"stats = [ 0 , 0 ]"
define the method __next__ with an argument self.,def __next__ ( self ) :
from django.core.exceptions import ImproperlyConfigured into default name space.,from django . core . exceptions import ImproperlyConfigured
"and result of the function escape called with an argument line, substitute the result for i-th element of lines. call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.",return mark_safe ( '\n' . join ( lines ) )
"if package is false,",if not package :
"LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.",LOCK_EX = LOCK_SH = LOCK_NB = 0
define the method __repr__ with an argument self.,def __repr__ ( self ) :
define the function get_standard_processors.,def get_standard_processors ( ) :
"if not,",else :
"raise an CommandError exception with an argument string ""couldn't download URL %s to %s: %s"", where '%s' is replaced with url,","raise CommandError ( ""couldn't download URL %s to %s: %s"" % ( url , filename , e ) )"
"if not,",else :
"if o is contained in opt_dict,",if o in opt_dict :
call the method _trans.gettext_noop with an argument message.,return _trans . ugettext ( message )
from django.utils.encoding import force_text and iri_to_uri into default name space.,"from django . utils . encoding import force_text , iri_to_uri"
from django.template.loader import get_template into default name space.,from django . template . loader import get_template
do nothing.,pass
return retval.,return retval
call the method self._setup.,self . _setup ( )
"if widget is an instance of the NumberInput,","if isinstance ( widget , NumberInput ) :"
"join elements of quant into a string, split it by string ',', substitute the result for values.","values = '' . join ( quant ) . split ( ',' )"
inner_text is an empty list.,inner_text = [ ]
skip this loop iteration.,continue
"if every input_val in special_floats,",if input_val in special_floats :
import module datetime.,import datetime
"convert to integer value of dictionary cc under the key 'max-age',","kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )"
request_queue_size is integer 10.,request_queue_size = 10
extend new_second_item with item.,new_second_item . extend ( item )
"err_msg is a string ""Tried %s"", where '%s' is replaced with tried.","error_msg = ""Tried %s"" % tried"
"if options.pythonpath is true,",if options . pythonpath :
import module random.,import random
"as the arguments, substitute the result for response. try,",try :
define the function add_to_builtins with an argument module.,def add_to_builtins ( module ) :
return None.,return None
"if value is true and character ':' is contained in value,",if value and ':' in value :
"define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',","def save_instance ( form , instance , fields = None , fail_message = 'saved' , commit = True , exclude = None , construct = True ) :"
"context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n', and context.use_tz for 'use_tz', substitute the result for new_context. call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.","csrf_token = context . get ( 'csrf_token' , None )"
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
target_app_labels_only is boolean True.,target_app_labels_only = True
replace '%s' with type of the obj object. call the method self.indent with argument integer 1.,self . indent ( 1 )
self._errors is None.,self . _errors = None
"OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,","OPERATORS = { 'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) , 'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) , 'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) , 'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) , 'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) , '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) , '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) , '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) , '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) , '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) , }"
"define private method __call__ with self class instance, environ and start_response as the arguments.","def __call__ ( self , environ , start_response ) :"
"if sign is true,",if sign :
"otherwise if query has an attribute 'items',","elif hasattr ( query , 'items' ) :"
define the method extract with 2 arguments self and to_path.,"def extract ( self , to_path ) :"
"define the function delete_many with self, keys and version set to None as arguments.","def delete_many ( self , keys , version = None ) :"
derive the class RawPostDataException from the base class Exception.,class RawPostDataException ( Exception ) :
substitute element at self.pos index of self.tokens for retval.,retval = self . tokens [ self . pos ]
from unittest2 import everything.,from unittest2 import *
from django.core import serializers into default name space.,from django . core import serializers
"if version is None,",if version is None :
"if p.image is not empty,",if p . image :
"if not, self.coerce is an identity lambda function with an argument val. if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,","self . empty_value = kwargs . pop ( 'empty_value' , '' )"
"if not,",else :
call the method _trans.gettext_noop with an argument message.,return _trans . gettext_noop ( message )
"subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:","subclass = type ( ""Migration"" , ( Migration , ) , { ""dependencies"" : [ ( app_label , migration . name ) for migration in merge_migrations ] , } )"
define the function clear_url_caches.,def clear_url_caches ( ) :
"call the function os.path.basename with argument name, substitute the result for name.",name = os . path . basename ( name )
"if value is contained in self.empty_values,",if value in self . empty_values :
"get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.","return getattr ( t , translation_function ) ( singular , plural , number )"
yield widget.,yield widget
"for every i and arg in enumerated iterable args,","for i , arg in enumerate ( args ) :"
"call the method FASTCGI_OPTIONS.copy, substitute the result for options.",options = FASTCGI_OPTIONS . copy ( )
from django.forms.utils import ErrorList into default name space.,from django . forms . utils import ErrorList
"define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.","def reverse ( self , lookup_view , * args , ** kwargs ) :"
"if six.PY2 is true,",if six . PY2 :
"get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.","return getattr ( _prefixes , ""value"" , '/' )"
"else if timeout equals to integer 0,",elif timeout == 0 :
"return default,",return default
define the function restart_with_reloader.,def restart_with_reloader ( ) :
code set to a string 'invalid_choice'. return value.,return value
"call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.",self . _archive = zipfile . ZipFile ( file )
"and ignorenonexistent set to self.ignore, substitute the result for objects. for every obj in objects,",for obj in objects :
convert cull_frequency into an integer and substitute it for self._cull_frequency.,self . _cull_frequency = int ( cull_frequency )
substitute result for value under the RESULT key of the oldroot dictionary.,oldroot [ RESULT ] = result
return dec.,return dec
increment weight by integer 2.,weight += 2
"if hidden_fields is true,",if hidden_fields :
"define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","def render ( self , name , value , attrs = None , choices = ( ) ) :"
"join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,","self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]"
derive the class RegexURLPattern with LocaleRegexProvider as base class.,class RegexURLPattern ( LocaleRegexProvider ) :
"call the function ugettext with 3 arguments, string ""%(size)d byte"", string ""%(size)d bytes"" and bytes,","value = ungettext ( ""%(size)d byte"" , ""%(size)d bytes"" , bytes ) % { 'size' : bytes }"
"call the function email_message.message, substitute the result for message.",message = email_message . message ( )
self.tags is an empty dictionary.,self . tags = { }
"if error.code equals code,",if error . code == code :
"if self.file has an attribute 'size',","if hasattr ( self . file , 'size' ) :"
"define the method attach_file with arguments self, path and mimetype set to None.","def attach_file ( self , path , mimetype = None ) :"
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","ch , escaped = next ( pattern_iter )"
num_args is an integer 0.,num_args = 0
substitute var for value under the name key of the self.extra_context dictionary.,self . extra_context [ name ] = var
"decorator cached_property,",@ cached_property
"otherwise if self._meta.fields is true and field is not contained in self._meta.fields,",elif self . _meta . fields and field not in self . _meta . fields :
"for every sub_stream in boundarystream,",for sub_stream in boundarystream :
"if TypeError exception is caught,",except TypeError :
use global variable _translations.,global _translations
define the method check_migrations with an argument self.,def check_migrations ( self ) :
"call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:","handler . addQuickElement ( ""enclosure"" , '' , { ""url"" : item [ 'enclosure' ] . url , ""length"" : item [ 'enclosure' ] . length , ""type"" : item [ 'enclosure' ] . mime_type } )"
"if KeyError, IndexError and AttributeError exception is caught,","except ( KeyError , IndexError , AttributeError ) :"
"if value is true,",if value :
call the method self.write_message with argument message.,self . write_message ( message )
"call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.",unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
call the method selected_choices.remove with an argument option_value.,selected_choices . remove ( option_value )
"if timezone is an instance of tzinfo,","if isinstance ( timezone , tzinfo ) :"
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.,return PALETTES [ DEFAULT_PALETTE ]
do nothig.,pass
"decrement self.active_readers by integer 1,",self . active_readers -= 1
"filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value. call the function avoid_wrapping with an argument value, return the result.",return avoid_wrapping ( value )
define the method __setstate__ with 2 arguments: self and state.,"def __setstate__ ( self , state ) :"
"get the value under the self.using key of the connections dictionary, call the method close on it.",connections [ self . using ] . close ( )
"try,",try :
message is a string 'make sure the name begins with a letter or underscore'.,message = 'make sure the name begins with a letter or underscore'
"call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.",self . choice_label = force_text ( choice [ 1 ] )
"slice list unhandled_params from the beginning to the length of defaults last element,",unhandled_params = unhandled_params [ : - len ( defaults ) ]
"call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,",return force_text ( iri_to_uri ( value ) )
from django.utils.deconstruct import deconstructible into default name space.,from django . utils . deconstruct import deconstructible
"define the method setdefault with 3 arguments: self, key and default.","def setdefault ( self , key , default ) :"
"join return value of the function six.text_type called with an argument self.management_form and forms into a string,","return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )"
"call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,","for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :"
return template and None.,"return template , None"
"call the method path.encode with an argument fs_encoding, return the result.",return path . encode ( fs_encoding )
"raise an DTDForbidden exception with arguments name, sysid and pubid.","raise DTDForbidden ( name , sysid , pubid )"
"call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,",d = d [ m . groups ( ) [ 0 ] ]
"type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'. call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to dump fixtures from. ' 'Defaults to the ""default"" database.' )"
"if TypeError exception is caught,",except TypeError :
import module os.,import os
"if html_message is True,",if html_message :
"convert elements of choices into a list, substitute it for self.choices.",self . choices = list ( choices )
"for every reference and receivers in return value of the call of obj.unresolved_references.items method,","for reference , receivers in obj . unresolved_references . items ( ) :"
"if _serializers is false,",if not _serializers :
encoding set to None and unpacked dictionary _params. substitute encoding for self.encoding.,self . encoding = encoding
"otherwise if value under the key 'all' of the options dictionary is true,",elif options [ 'all' ] :
"self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,","self . upload_handlers = ImmutableList ( self . upload_handlers , warning = ""You cannot alter upload handlers after the upload has been processed."" )"
append list containing string '--no-location' to self.msgmerge_options.,self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
"call the function digest with an argument password, call the method digest on the result, substitute the result or password.",password = digest ( password ) . digest ( )
return a string '%02d' formated with the result of the function self.G.,return '%02d' % self . G ( )
"call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.",errors . extend ( _check_middleware_classes ( ** kwargs ) )
import module ssl.,import ssl
append an empty string to usage.,"usage . append ( """" )"
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.,raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
"define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,","def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :"
"if level is not an integer raise an error with message string ""The first argument should be level."".","assert isinstance ( level , int ) , ""The first argument should be level."""
"with unpacked list field_value as an argument, substitute the result for obj. get the field.rel.field_name from the obj, substitute it for obj_pk.","obj_pk = getattr ( obj , field . rel . field_name )"
"substitute func for _dec._decorated_function. call the function wraps with an argument func, call the result with an argument _dec, return the result.",return wraps ( func ) ( _dec )
"call the self.stdout.write method with string "" (no migrations)"" and self.style.MIGRATE_FAILURE as arguments.","self . stdout . write ( "" (no migrations)"" , self . style . MIGRATE_FAILURE )"
"call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.","path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )"
"get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.",slots = orig_vars . get ( '__slots__' )
"join elements of list source from index last to the end into a string, substitute it for piece.",piece = '' . join ( source [ last : ] )
define the method close with an argument self.,def close ( self ) :
"if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,",if self . active_readers == 0 and self . waiting_writers != 0 :
derive the class BaseValidator form the object base class.,class BaseValidator ( object ) :
"call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.","params , varargs , varkw , defaults = getargspec ( func )"
"call the method re.compile with an argument raw string ""&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));"", substitute the result for _entity_re.","_entity_re = re . compile ( r""&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));"" )"
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:,"new_context = context_class ( _dict , ** { 'autoescape' : context . autoescape , 'current_app' : context . current_app , 'use_l10n' : context . use_l10n , 'use_tz' : context . use_tz , } )"
"if NameError exception is caught,",except NameError :
call the os.rename function with arguments old_file_name and new_file_name.,"os . rename ( old_file_name , new_file_name )"
"filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs. map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.","all_locales = map ( os . path . basename , locale_dirs )"
"""(%s) and 'can_import_settings' (%s) command options."", replace '%s' with self.leave_locale_alone and self.can_import_settings. from django.utils import translation into default namespace.",from django . utils import translation
return response.,return response
call the function import_string with argument backend.,import_string ( backend )
append self.pointer to self.backout.,self . backout . append ( self . pointer )
return cache.,return cache
"for every name in sorted value under the app key of the commands_dict dictionary,",for name in sorted ( commands_dict [ app ] ) :
"reverse settings.LOCALE_PATHS element order, for every localedir in the result,",for localedir in reversed ( settings . LOCALE_PATHS ) :
add model to excluded_models set.,excluded_models . add ( model )
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.,"def handle_noargs ( self , ** options ) :"
fill_to is an integer 7.,fill_to = 7
"if exception GeneratorExit is caught,",except GeneratorExit :
define the method _is_expired with self and f as arguments.,"def _is_expired ( self , f ) :"
"if charset equals to string 'utf-8',",if charset == 'utf-8' :
from binascii import Error as BinasciiError into default name space.,from binascii import Error as BinasciiError
"get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,","field_value = self . cleaned_data . get ( field , None )"
return nothing.,return
"get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.","handlers = config . get ( 'handlers' , None )"
"if not,",else :
"if not,",else :
"get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,",space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
"call the method self._send with argument message, substitute the result for sent.",sent = self . _send ( message )
"substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.","self . filter_expr , self . nodelist = filter_expr , nodelist"
"if self.empty_permitted is true and call to the method self.has_changed evaluates to false,",if self . empty_permitted and not self . has_changed ( ) :
"define the function sql_create with 3 arguments: app_config, style and connection.","def sql_create ( app_config , style , connection ) :"
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.,"handler . startElement ( ""author"" , { } )"
"if response is True,",if response :
"try,",try :
"if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,","if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :"
define the method _update_errors with 2 arguments: self and errors.,"def _update_errors ( self , errors ) :"
return boolean False.,return False
"define initialization method __init__, with self class instance as the argument.",def __init__ ( self ) :
"remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,","return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )"
define the method __init__ with 2 arguments: self and language.,"def __init__ ( self , language ) :"
"skip this loop iteration,",continue
"call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.","statements = sql_destroy_indexes ( app_config , self . style , connection )"
from django.template.loader import BaseLoader into default name space.,from django . template . loader import BaseLoader
"for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,","for key , value in parse_qsl ( query_string or '' , keep_blank_values = True , encoding = encoding ) :"
delete attr.,del attr
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.,collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
do nothing.,pass
"write ',' to the self.stream file stream.","self . stream . write ( "","" )"
"value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.",attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
self.stream is None.,self . stream = None
"call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.","defaults , _ = parser . parse_args ( args = [ ] )"
substitute email_backend for self.email_backend.,self . email_backend = email_backend
"if ',' is not contained in arg,","if ',' not in arg :"
"if not, self.require_all_fields is boolean True. call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.","super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )"
"if the key doesnt exists substitute None for self.selected_fields. remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,","self . use_natural_keys = options . pop ( ""use_natural_keys"" , False )"
substitute i-th element of self.forms for form.,form = self . forms [ i ]
"finally perform,",finally :
"call the method bmatch.group with an argument integer 1, if it evaluates to true,",if bmatch . group ( 1 ) :
return nothing.,return
"if e.connection_reset is false,",if not e . connection_reset :
"if not,",else :
"get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,",cookies = ( pformat ( COOKIES_override ) if COOKIES_override is not None else pformat ( request . COOKIES ) )
"call the function force_str with an argument format_type, substitute the result for format_type.",format_type = force_str ( format_type )
derive the class Variable form the base class object.,class Variable ( object ) :
if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.,"kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )"
idstring is an empty string.,idstring = ''
return boolean False.,return False
"'status_code' with value 403, and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function. call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.","response = self . get_exception_response ( request , resolver , 403 )"
"if module os field name equals to string 'nt',",if os . name == 'nt' :
"dictionary containing element v for k. for every k and list_ in return value of the method self.lists,","for k , list_ in self . lists ( ) :"
week_number is None.,week_number = None
"if ValueError exception is caught,",except ValueError :
"call the method field.clean with an argument value, substitute the result for value.",value = field . clean ( value )
"get the value under the name key of the data dictionary, if it exists return it, if not return None.","return data . get ( name , None )"
"otherwise if action equals to string ""unapply_success"".","elif action == ""unapply_success"" :"
from django.db import models into default name space.,from django . db import models
"remove first element from name, substitute the result for used.",used = name . pop ( 0 )
skip this loop iteration.,break
"if rel_model has an attribute 'natural_key' and rel_model is not equal to model,","if hasattr ( rel_model , 'natural_key' ) and rel_model != model :"
"raise an exception parser.error_class with an argument string ""Not expecting '%s' as infix operator in if tag."",","raise parser . error_class ( ""Not expecting '%s' as infix operator in if tag."" % self . id )"
"raise an TemplateSyntaxError exception with an argument string ""next-to-last argument to 'regroup' tag must be 'as'"".","raise TemplateSyntaxError ( ""next-to-last argument to 'regroup' tag must"" "" be 'as'"" )"
"call the function six.text_type with an argument number, substitute the result for str_number.",str_number = six . text_type ( number )
"call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.","self . regex = re . compile ( self . regex , self . flags )"
"add ext to f, substitute the result for fext.",fext = f + ext
from lib2to3 import fixer_base into default name space.,from lib2to3 import fixer_base
"convert data to string, substitute it for data.",data = str ( data )
define the method handle_entityref with 2 arguments self and name.,"def handle_entityref ( self , name ) :"
"if self._request_middleware is None,",if self . _request_middleware is None :
"replace '%s' in string ""Running pre-migrate handlers for application %s"" with app_config.label, print it to the standard output.","print ( ""Running pre-migrate handlers for application %s"" % app_config . label )"
"define the method handle_field with arguments self, obj and field.","def handle_field ( self , obj , field ) :"
"call the method self._should_delete_form with an argument form, if it evaluates to true,",if self . _should_delete_form ( form ) :
"if self.attachments is true,",if self . attachments :
define the method read with an argument self.,def read ( self ) :
"call the __init__ method from the base class of the class ValidationError with arguments message, code and params.","super ( ValidationError , self ) . __init__ ( message , code , params )"
"if bytes is smaller than KB,",if bytes < KB :
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.,"self . none_value = ( 0 , empty_label )"
"if value is contained in self.empty_values,",if value in self . empty_values :
from django.core.exceptions import SuspiciousMultipartF into default name space.,from django . core . exceptions import SuspiciousMultipartForm
"taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.","taglib_module = '%s.%s' % ( module , library_name )"
derive the class warn_about_renamed_method from object base class.,class warn_about_renamed_method ( object ) :
"if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',","if ( hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) and not hasattr ( value , '_meta' ) ) :"
"otherwise return boolean False. if not,",else :
use the result and file_obj as arguments for the call to the method self._files.appendlist. break the loop execution.,break
"if token.contents equals string 'else',",if token . contents == 'else' :
"if smtplib.SMTPException exception is caught,",except smtplib . SMTPException :
child_loggers is an empty list.,child_loggers = [ ]
"return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.","return BlockNode ( block_name , nodelist )"
"convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.","return '%s:%s:%s' % ( key_prefix , version , key )"
"multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,",timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
from django.db.migrations.autodetector import MigrationAutodetector into default name space.,from django . db . migrations . autodetector import MigrationAutodetector
from django.core.management.base import BaseCommand into default name space.,from django . core . management . base import BaseCommand
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
update self.tags dictionary with lib.tags.,self . tags . update ( lib . tags )
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.,"from django . utils . translation import ugettext_lazy as _ , pgettext_lazy"
substitute i-th element of value for field_value.,field_value = value [ i ]
"make target_dir directory,",os . mkdir ( target_dir )
"define the method with 3 arguments: self, app_config set to None and display_num_errors set to boolean False.","def validate ( self , app_config = None , display_num_errors = False ) :"
"model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively. if not,",else :
call the method self.run_validators with an argument out.,self . run_validators ( out )
from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.,"from django . utils . translation import ugettext_lazy as _ , ugettext"
substitute old_method_name for self.old_method_name.,self . old_method_name = old_method_name
"if character '-' is not contained in lang_code,",if '-' not in lang_code :
requires_system_checks is boolean False.,requires_system_checks = False
"otherwise if ns is not contained in app_list,",elif ns not in app_list :
"reverse order of elements of self.keyOrder, return the result.",return reversed ( self . keyOrder )
"append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs. call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.",fixture_name = os . path . basename ( fixture_name )
"if not,",else :
define the method __getattr__ with 2 arguments: self and real_name.,"def __getattr__ ( self , real_name ) :"
"join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,","return mark_safe ( conditional_escape ( sep ) . join ( format_html ( format_string , * tuple ( args ) ) for args in args_generator ) )"
derive the class BaseLoader from the object base class.,class BaseLoader ( object ) :
"call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,",self . literal = mark_safe ( unescape_string_literal ( var ) )
"if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.",return not ( v is False or v is None or v == '' )
"return a list containing 2 elements: return value of the value.date method and return value of the replace method,","return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]"
"default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'. call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',","parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'Locales to exclude. Default is none. Can be used multiple times.' )"
yield nothing.,yield
call the method logging._releaseLock.,logging . _releaseLock ( )
"new_class.declared_fields.keys. if missing_fields is true,",if missing_fields :
from django.core.cache import caches into default name space.,from django . core . cache import caches
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"if endblock.contents is not contained in acceptable_endblocks,",if endblock . contents not in acceptable_endblocks :
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.,"self . allow_files , self . allow_folders = allow_files , allow_folders"
"subtract third element of tupl from length of second element of tupl, substitute the result for units.",units = len ( tupl [ 1 ] ) - tupl [ 2 ]
"otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,",elif self . _meta . exclude and field in self . _meta . exclude :
"join statements into a string, separated by newlines, return it.",return '\n' . join ( statements )
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
"if six.PY2 is true,",if six . PY2 :
self.error_list is an empty list.,self . error_list = [ ]
from importlib import import_module into default name space.,from importlib import import_module
"call the function render_value_in_context with 2 arguments: value and context, return the result.","return render_value_in_context ( value , context )"
"name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None. return combined.",return combined
"raise an CommandError with an argument string ""%r is not a valid %s name. Please %s."", were '%r' is replaced with name,","raise CommandError ( ""%r is not a valid %s name. Please %s."" % ( name , app_or_project , message ) )"
"in ""%s in %s"" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';', substitute it for name_str. raise CommandError exception, with ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"",","raise CommandError ( ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"" % name_str )"
"otherwise if func is callable object,",elif callable ( func ) :
"use the result as the argument for the call to the sql.extend method. call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,","sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )"
week_number is integer 52.,week_number = 52
increment stats dictionary value under the MISSES key by integer 1.,stats [ MISSES ] += 1
"call the method related.natural_key, substitute the result for value.",value = related . natural_key ( )
"strings ""URLError"", ""urllib2"", ""urllib.error"", result of the call to the function MovedAttribute with 3 arguments: strings ""HTTPError"", ""urllib2"", ""urllib.error"" and result of the call to the function MovedAttribute with 3 arguments: strings ""ContentTooShortError"", ""urllib"", ""urllib.error"". for every attr in _urllib_error_moved_attributes,",for attr in _urllib_error_moved_attributes :
"raise an CommandError exception with an argument string ""Destination directory '%s' does not exist, please create it first."",","raise CommandError ( ""Destination directory '%s' does not "" ""exist, please create it first."" % top_dir )"
call method request.META.get with arguments header and None.,"value = request . META . get ( header , None )"
"get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,",error_messages = kwargs . get ( 'error_messages' ) or { }
return lookup_view.,return lookup_view
return boolean False.,return False
derive class SimpleCookie from the base class http_cookies.SimpleCookie.,class SimpleCookie ( http_cookies . SimpleCookie ) :
"call the method self._initialize_handlers,",self . _initialize_handlers ( )
"for every node in nodelist,",for node in nodelist :
return boolean False.,return False
"if not,",else :
increment stats dictionary value under the HITS key by integer 1.,stats [ HITS ] += 1
substitute int for integer_types.,"integer_types = int ,"
substitute empty bytes string for self.buffer.,self . buffer = b''
substitute self.source for e.django_template_source.,e . django_template_source = self . source
"if e.errno is not equal to errno.EEXIST,",if e . errno != errno . EEXIST :
"call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.","value = tuple . __getitem__ ( self , key )"
define the function deactivate.,def deactivate ( ) :
"if visible_issue_count equals to integer 0, or for string ""1 issue"" if visible_issue_count equals integer 1, or for string ""%s issues"", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues, and substitute it for second '%s' in the stirting string. if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,",if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :
"if value is false,",if not value :
"if index_sql is not empty,",if index_sql :
"stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True, as arguments, substitute the result for git_log. evaluate the method git_log.communicate, substitute first element of the result for timestamp.",timestamp = git_log . communicate ( ) [ 0 ]
"if leading is true,",if leading :
"help is a string ""Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."".","help = ""Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."""
substitute app_name for klass.,klass = app_name
"raise an CommandError exception with an argument string ""Unknown command: %r"", with '%r' replaced by name.","raise CommandError ( ""Unknown command: %r"" % name )"
"raise an TemplateSyntaxError exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"",","raise TemplateSyntaxError ( ""Searching for value. "" ""Unexpected end of string in column %d: %s"" % ( i , subject ) )"
define the method clean with arguments self and value.,"def clean ( self , value ) :"
do nothing.,pass
"call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.",klass . prefix = '\n' + find_indentation ( node )
"and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo. return result.",return result
"if not,",else :
"if tok.next is true,",if tok . next :
"try,",try :
"for every c in self.children. return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',","return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) )"
return boolean False.,return False
derive class BaseDatabaseCache from BaseCache base class.,class BaseDatabaseCache ( BaseCache ) :
"if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.",self . default_args = default_args or { }
"define the method __init__ with 3 arguments: self, func and name set to None.","def __init__ ( self , func , name = None ) :"
"if ValueError exception is caught,",except ValueError :
"if 'args' is contained in options,",if 'args' in options :
"substitute it for basedir. if basedir is not a directory,",if not os . path . isdir ( basedir ) :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"if extra_attrs is true,",if extra_attrs :
"call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,","return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )"
"call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.","return _entity_re . sub ( _replace_entity , text )"
"property decorator,",@ property
from importlib import import_module into default name space.,from importlib import import_module
define the method decompress with 2 arguments: self and value.,"def decompress ( self , value ) :"
"if opts is true,",if opts :
"otherwise if self.use_ipv6 is true and _fqdn is false,",elif self . use_ipv6 and not _fqdn :
"if KeyError exception is caught,",except KeyError :
"value is an instance of ConvertingTuple class, created with an argument value.",value = ConvertingTuple ( value )
"call the method handler.addQuickElement with an argument string ""author"", ""%s (%s)"",","handler . addQuickElement ( ""author"" , ""%s (%s)"" % ( item [ 'author_email' ] , item [ 'author_name' ] ) )"
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.,"domains = ( 'djangojs' , 'django' )"
"if default is None,",if default is None :
"if i is not an instance of six.integer_types class,","if not isinstance ( i , six . integer_types ) :"
"if VariableDoesNotExist exception is caught,",except VariableDoesNotExist :
"if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.",self . host = host or settings . EMAIL_HOST
"call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,","handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )"
"call the method self._setupfunc, substitute the result for self._wrapped.",self . _wrapped = self . _setupfunc ( )
"'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2. if length of value is not equal to integer 2,",if len ( value ) != 2 :
derive the class override from the object base class.,class override ( object ) :
"strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.",transfer_encoding = transfer_encoding [ 0 ] . strip ( )
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.,raise CommandError ( 'Your Python does not support IPv6.' )
"call the method threading.RLock, substitute the result for self._lock.",self . _lock = threading . RLock ( )
define the method add_arguments with arguments self and parser.,"def add_arguments ( self , parser ) :"
return source and display_name.,"return source , display_name"
call the method self._update_unget_history with length of bytes as an argument.,self . _update_unget_history ( len ( bytes ) )
"raise an TemplateSyntaxError exception with an argument string ""Invalid syntax in widthratio tag. Expecting 'as' keyword"".","raise TemplateSyntaxError ( ""Invalid syntax in widthratio tag. Expecting 'as' keyword"" )"
"if six.PY2 is true and path is not an instance of byes type,","if six . PY2 and not isinstance ( path , bytes ) :"
"call the method self._create_attachments with argument msg, return the result.",return self . _create_attachments ( msg )
define the method _isdst with 2 arguments: self and dt.,"def _isdst ( self , dt ) :"
"call the method kwarg_re.match with an argument bit, substitute it for match.",match = kwarg_re . match ( bit )
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.,"file = tempfile . NamedTemporaryFile ( suffix = '.upload' , dir = settings . FILE_UPLOAD_TEMP_DIR )"
define the method popitem with an argument self.,def popitem ( self ) :
from django.conf import settings into default name space.,from django . conf import settings
"if self.directory_permissions_mode is not None,",if self . directory_permissions_mode is not None :
return self.token.,return self . token
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"call the mw_class function, store the result in the mw_instance.",mw_instance = mw_class ( )
"call the method self.download with an argument template, substitute the result for absolute_path.",absolute_path = self . download ( template )
return an empty string.,return ''
define the function _string_concat with an argument unpacked list strings.,def _string_concat ( * strings ) :
"called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective, and third element of the result of the function sys.exc_info. call the method p.communicate, assign the result to output and errors, respectively.","output , errors = p . communicate ( )"
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.,raise NotImplementedError ( 'may be implemented in a future release' )
"for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,",for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
define the method __init__ with 2 arguments self and var.,"def __init__ ( self , var ) :"
"call the self.stdout.write method with string "" Creating table %s\n"" as argument, with all occurrences of '%s' replaced with model._meta.db_table.","self . stdout . write ( "" Creating table %s\n"" % model . _meta . db_table )"
append a tuple with 2 arguments: filter_func and args to filters.,"filters . append ( ( filter_func , args ) )"
"for every field in model._meta.fields,",for field in model . _meta . fields :
"if format_module_path is an instance of six.string_types,","if isinstance ( format_module_path , six . string_types ) :"
"if not,",else :
"convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string. if not,",else :
"if e.errno is not equal to errno.EEXIST,",if e . errno != errno . EEXIST :
"if not,",else :
LOCK_SH is a integer 0.,LOCK_SH = 0
"define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.","def _get_page ( self , * args , ** kwargs ) :"
"get value under the self.blocks dictionary under the name key, return the last element.",return self . blocks [ name ] [ - 1 ]
"define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,","def fields_for_model ( model , fields = None , exclude = None , widgets = None , formfield_callback = None , localized_fields = None , labels = None , help_texts = None , error_messages = None ) :"
substitute DictConfigurator for dictConfigClass.,dictConfigClass = DictConfigurator
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"call the method six.text_type with 3 arguments: s, encoding and string 'replace'.","return six . text_type ( s , encoding , 'replace' )"
"filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value. otherwise if bytes is smaller than PB,",elif bytes < PB :
"call the method add_arguments from the base class of the class Command, with an argument parser.","super ( Command , self ) . add_arguments ( parser )"
"author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None, feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs. to_unicode is an lambda function with an argument s, result is the result of the function force_text,","to_unicode = lambda s : force_text ( s , strings_only = True )"
"_iterkeys is a string ""iterkeys"".","_iterkeys = ""iterkeys"""
"if cached is not None,",if cached is not None :
from django.http.cookie import SimpleCookie into default name space.,from django . http . cookie import SimpleCookie
"raise an ValueError exception with an argument string ""Unsupported version: %s"" formated with value under 'version' key of config dictionary.","raise ValueError ( ""Unsupported version: %s"" % config [ 'version' ] )"
"default set to False, help containing string 'Mark migrations as run without actually running them' as arguments. call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',","parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False , help = 'Show a list of all known migrations and which are applied' )"
"perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts, substitute the result for suffixes. join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.","targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )"
define the method __repr__ with argument self.,def __repr__ ( self ) :
derive the class SimplerXMLGenerator form the XMLGenerator base class.,class SimplerXMLGenerator ( XMLGenerator ) :
as_form is boolean True.,as_form = True
call the method self.run_validators with an argument value.,self . run_validators ( value )
"call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.","self . _lock = _locks . setdefault ( name , RWLock ( ) )"
"substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count. define the method load_label with self and fixture_label as arguments.","def load_label ( self , fixture_label ) :"
"if self.current_token is not EndToken,",if self . current_token is not EndToken :
increment self.fixture_count by one.,self . fixture_count += 1
raise an CommandError exception with an argument message.,raise CommandError ( message )
"call the method data.items, for every k and v in the result,","for k , v in data . items ( ) :"
where '%d' is replaced with i and '%s' is replaced with subject. increment i by one.,i += 1
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
append '=' to opt_label.,opt_label += '='
"if not,",else :
write the result to the self.stdout stream. write output to self.stdout stream.,self . stdout . write ( output )
derive the class __proxy__ from the Promise base class.,class __proxy__ ( Promise ) :
"call the method self.stdout.write, with an argument string ""Rendering %s template files with extensions: %s\n"",","self . stdout . write ( ""Rendering %s template files with "" ""extensions: %s\n"" % ( app_or_project , ', ' . join ( extensions ) ) )"
derive the class ConvertingDict from dict base class.,class ConvertingDict ( dict ) :
"substitute the result for domain. if UnicodeError exception is caught,",except UnicodeError :
"convert self.file to string and append string '.py' to it, substitute the result for thefile.",thefile = '%s.py' % self . file
"call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.","self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )"
"in the string ""ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)"", replace all the occurrences of:","return ""ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)"" % ( self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )"
"substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.","self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false"
nodelist_true_output is None.,nodelist_true_output = None
from django.utils.encoding import force_str into default name space.,from django . utils . encoding import force_str
"split arg by ',', substitute the result for bits.s","bits = arg . split ( ',' )"
self._non_form_errors is None.,self . _non_form_errors = None
"if ImportError exception is caught,",except ImportError :
substitute old_setting for context.autoescape.,context . autoescape = old_setting
from django.utils import six into default name space.,from django . utils import six
"if not,",else :
status_code is an integer 304.,status_code = 304
"substitute the result for token. assign self.origin, source to token.source.","token . source = self . origin , source"
return nothing.,return
from django.forms.fields import everything into default name space.,from django . forms . fields import *
"if model is contained in created_models,",if model in created_models :
"if digest is None,",if digest is None :
define the method add_arguments with self class instance and parser as the arguments.,"def add_arguments ( self , parser ) :"
return obj.,return obj
"return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe. if not,",else :
"put cc into a list, assign it to self.cc.",self . cc = list ( cc )
"for every member in members,",for member in members :
"call the function to_current_timezone with an argument, substitute the result for value.",value = to_current_timezone ( value )
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
substitute as_string for as_bytes.,as_bytes = as_string
from django.core import signals into default name space.,from django . core import signals
"if KeyError exception is caught,",except KeyError :
return nodes.,return nodes
cookiedict is an empty dictionary.,cookiedict = { }
"raise an TemplateSyntaxError exception with an argument string ""'for' statements should have at least four words: %s"",","raise TemplateSyntaxError ( ""'for' statements should have at least four"" "" words: %s"" % token . contents )"
decimal_digits is a string '0123456789'.,decimal_digits = '0123456789'
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.,"raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )"
"define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , permitted_methods , * args , ** kwargs ) :"
"property decorator,",@ property
"if self.data.hour is greater than integer 11,",if self . data . hour > 11 :
yield node.,yield node
double the chunk size.,chunk_size *= 2
increment i by integer 1.,i += 1
derive the class DictWrapper from the dict base class.,class DictWrapper ( dict ) :
return nothing.,return
"if an exception occurred,",except :
"if not,",else :
define the method id_for_label with 2 arguments: self and id.,"def id_for_label ( self , id_ ) :"
derive the class Group from list base class.,class Group ( list ) :
"join usage elements in a string separated by newline characters, return it.",return '\n' . join ( usage )
"return a class instance FilterNode, called with an arguments filter_expr and nodelist.","return FilterNode ( filter_expr , nodelist )"
"call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.","script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )"
substitute the result for migration.ancestry. append migration to merge_migrations.,merge_migrations . append ( migration )
append key to self.keyOrder.,self . keyOrder . append ( key )
"_func_globals is a string ""func_globals"".","_func_globals = ""func_globals"""
substitute value for value under the field.name key of the self._current dictionary.,self . _current [ field . name ] = value
"put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.",self . ignore_patterns = list ( set ( ignore_patterns ) )
"append string "".moves.urllib_request"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.","request = sys . modules [ __name__ + "".moves.urllib_request"" ]"
errors is an empty list.,errors = [ ]
substitute cache for value under the alias key of self._caches.caches dictionary.,self . _caches . caches [ alias ] = cache
"call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,","serializers . serialize ( format , get_objects ( ) , indent = indent , use_natural_foreign_keys = use_natural_foreign_keys , use_natural_primary_keys = use_natural_primary_keys , stream = stream or self . stdout )"
write 79 '-' characters into self.stream file stream.,self . stream . write ( '-' * 79 )
define the method __call__ with arguments self and value.,"def __call__ ( self , value ) :"
substitute sixth element of bits for var_name.,var_name = bits [ 5 ]
"for every check in checks,",for check in checks :
"replace '%s' in string ""Creating %s\n"" with new_path, write it to the self.stdout stream.","self . stdout . write ( ""Creating %s\n"" % new_path )"
"get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.",block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.,class HTMLParser ( _html_parser . HTMLParser ) :
"if not,",else :
"convert num to an integer, substitute the result for length.",length = int ( num )
substitute length of text for end.,end = len ( text )
"call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.",local_attrs = self . build_attrs ( id = field % id_ )
"convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,","return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]"
"call the method keyword.iskeyword with an argument new_name, if it evaluates to true,",if keyword . iskeyword ( new_name ) :
decorator function wraps with an argument func.,@ wraps ( func )
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"call the method self.fields.items, for every name and field in result,","for name , field in self . fields . items ( ) :"
"floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.",off = 6 * ( delta // 100 + delta // 400 )
"and self.absolute_max, return the result. if not,",else :
"concatenate string '%0', width and string ""d. %s"", format the previous string with i incremented by 1,","lines [ i ] = ( ""%0"" + width + ""d. %s"" ) % ( i + 1 , escape ( line ) )"
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
define the function make_middleware_decorator with an argument middleware_class.,def make_middleware_decorator ( middleware_class ) :
"default set to boolean False and help as a string ""Create an empty migration."". call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
return decorator.,return decorator
"call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.",forms_valid &= form . is_valid ( )
update attrs dictionary with extra_attrs entry.,attrs . update ( extra_attrs )
self.children is an list with 2 elements: obj and data.,"self . children = [ obj , data ]"
return the first element of bits and an empty string.,"return bits [ 0 ] , ''"
"if valu is an instance of list type,","if isinstance ( value , list ) :"
input_type is a string 'file'.,input_type = 'file'
increment self.pos by integer 1.,self . pos += 1
substitute initial_forms for total_forms.,total_forms = initial_forms
"call the function get_language, substitute the result for language_code.",language_code = get_language ( )
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.,"def bound_func ( * args2 , ** kwargs2 ) :"
"if VariableDoesNotExist exception is caught,",except VariableDoesNotExist :
and return value of the function copy.deepcopy called with 2 arguments: value and memo. return result.,return result
define the method end_object with arguments self and obj.,"def end_object ( self , obj ) :"
define the function fix with an argument match.,def fix ( match ) :
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
"if not,",else :
"if self.selected_fields is None or field.attname is contained in self.selected_fields,",if self . selected_fields is None or field . attname in self . selected_fields :
return None.,return None
substitute self._parser for parser.,parser = self . _parser
define the function get_current_timezone.,def get_current_timezone ( ) :
substitute model._base_manager for objects.,objects = model . _base_manager
define the method open with argument self.,def open ( self ) :
"if value under the 'indend' key of the options dictionary exists and is not None,","if self . options . get ( 'indent' , None ) is not None :"
"if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.","max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )"
define the function urlencode with 2 arguments query and doseq set to integer 0.,"def urlencode ( query , doseq = 0 ) :"
"and a list containing a string '-h', call the method self.main_help_text, append new line to it, write it to sys.stdout.",sys . stdout . write ( self . main_help_text ( ) + '\n' )
substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.,defaults [ 'initial' ] = self . initial [ i ]
return an empty dictionary.,return { }
"define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.","def get_declared_fields ( bases , attrs , with_base_fields = True ) :"
"strip whitespaces from both ends of unicode_value, substitute the result for value.",value = unicode_value . strip ( )
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"call the method self.has_leading_dir with an argument namelist, substitute the result for leading.",leading = self . has_leading_dir ( namelist )
"define the function ngettext with 3 arguments: singular, plural and number.","def ngettext ( singular , plural , number ) :"
call the method self.reader_enters.,self . reader_enters ( )
define the method autocomplete with an argument self.,def autocomplete ( self ) :
"define the method __init__ with argument self, server and params.","def __init__ ( self , server , params ) :"
"if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.",self . data = data or { }
"otherwise, value under the 'decimal_places' key of the field_params is integer 5. if not",else :
kwargs is an empty dictionary.,kwargs = { }
"_func_closure is a string ""func_closure"".","_func_closure = ""func_closure"""
define the function unescape_string_literal with an argument s.,def unescape_string_literal ( s ) :
"get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.","return getattr ( self . _caches , 'caches' , { } ) . values ( )"
define the function mark_safe with an argument s.,def mark_safe ( s ) :
"if self.verbosity is greater or equal to 3,",if self . verbosity >= 3 :
substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.,token_name = TOKEN_MAPPING [ self . token_type ]
apps is an empty dictionary.,apps = { }
"for every iso_input in the result, if iso_input is not contained in val,",if iso_input not in val :
"try,",try :
"if value is true,",if value :
"define the method __init__ with 4 arguments: self, target, expression and var_name.","def __init__ ( self , target , expression , var_name ) :"
do nothing.,pass
"if o.microsecond is true,",if o . microsecond :
from django.test.utils import get_runner into default namespace.,from django . test . utils import get_runner
define the method __init__ with an argument self.,def __init__ ( self ) :
from lib2to3.pytree import Leaf and Node into default name space.,"from lib2to3 . pytree import Leaf , Node"
derive the class date from the real_date base class.,class date ( real_date ) :
"define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.","def load_template_source ( self , template_name , template_dirs = None ) :"
"call the method self.setlistdefault with an argument key, extend the result with value_list.",self . setlistdefault ( key ) . extend ( value_list )
define the method write_migration_files with arguments self and changes.,"def write_migration_files ( self , changes ) :"
"if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,",return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
call the function write_pot_file with 2 arguments: potfile and msgs.,"write_pot_file ( potfile , msgs )"
"if limit is None or length of x is lesser than or equal to limit,",if limit is None or len ( x ) <= limit :
call the method self.xml.endElement with an argument string 'field',"self . xml . endElement ( ""field"" )"
define the method flush with an argument self.,def flush ( self ) :
"try,",try :
call the self.seek method with argument integer 0.,self . seek ( 0 )
"return an instance of SafeText, created with an argument data.",return SafeText ( data )
"if '.' is not contained in var and 'e' is not contained in var converted into lowercase,",if '.' not in var and 'e' not in var . lower ( ) :
"and lambda function returning x for x, substitute the firs element of resulting list for style_func. call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,",self . _out . write ( force_str ( style_func ( msg ) ) )
"for every form in self call the form.as_p method, join the results in a string, separated by an empty string.",forms = ' ' . join ( form . as_p ( ) for form in self )
"if not,",else :
"call the function new_method_proxy with an argument hash, substitute the result for __hash__.",__hash__ = new_method_proxy ( hash )
"if location is None,",if location is None :
"join elements of output in a string, separated by newlines, return it.",return '\n' . join ( output )
"call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.",self . xml . characters ( smart_text ( key_value ) )
substitute serialize_headers for __str__.,__str__ = serialize_headers
"call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.","result = self . __class__ ( '' , mutable = True , encoding = self . encoding )"
return a list containing first element of source and a list containing params.,"return [ source [ 0 ] ] , [ params ]"
"try,",try :
"try,",try :
define method add_arguments with self class instance and parser as arguments.,"def add_arguments ( self , parser ) :"
"otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',","elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :"
"default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments. define the method handle with self instance of a class, list args, dictionary options as arguments.","def handle ( self , * args , ** options ) :"
call the method self._mark_post_parse_error.,self . _mark_post_parse_error ( )
"call the function warnings.warn with 3 arguments: string ""`%s.%s` method should be renamed `%s`."",","warnings . warn ( ""`%s.%s` method should be renamed `%s`."" % ( class_name , old_method_name , new_method_name ) , deprecation_warning , 2 )"
define the method send with arguments self and fail_silently set to boolean False.,"def send ( self , fail_silently = False ) :"
from __future__ import absolute_ into default name space.,from __future__ import absolute_import
derive the class Debug from base class CheckMessage.,class Debug ( CheckMessage ) :
"call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.",rfcdate = formatdate ( epoch_seconds )
"call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,","lead , trail = escape ( lead ) , escape ( trail )"
"call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.","basetype , subtype = mimetype . split ( '/' , 1 )"
return an integer 0.,return 0
return an empty string.,return ''
"substitute it for data. if data is contained in seen_data,",if data in seen_data :
"if loader is an instance of six.string_types,","if isinstance ( loader , six . string_types ) :"
"call the method self.error_class with an argument list with a element: result of the method self.get_form_error,",form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
"if initial_forms is grater than self.max_num is grater or equal to integer 0,",if initial_forms > self . max_num >= 0 :
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,"@ register . filter ( is_safe = True , needs_autoescape = True )"
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.,raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
"call the function force_str with 3 arguments: string ""<Text Node: '%s'>"", with '%s' replaced with first 25 elements of self.s string,","return force_str ( ""<Text Node: '%s'>"" % self . s [ : 25 ] , 'ascii' , errors = 'replace' )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if not,",else :
do nothing.,pass
"call the function escape with an argument value, return the result.",return escape ( value )
"evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,",encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
call the method self.write_items with an argument handler.,self . write_items ( handler )
"call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,","super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )"
derive class _LazyModule from the types.ModuleType base class.,class _LazyModule ( types . ModuleType ) :
from django.conf import settings into default name space.,from django . conf import settings
derive the class SyndicationFeed from the object base class.,class SyndicationFeed ( object ) :
"otherwise if self.object is an instance of the models.base.ModelBase class,","elif isinstance ( self . obj , models . base . ModelBase ) :"
"open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.","self . file = open ( self . name , mode or self . mode )"
"sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.",j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
substitute decimals for digits.,digits = decimals
"convert value into an floating point number, substitute it for value.",value = float ( value )
import dummy_threading as threading.,import dummy_threading as threading
"if settings.TEMPLATE_DEBUG is true,",if settings . TEMPLATE_DEBUG :
from django.core.management.sql import sql_flush into default name space.,from django . core . management . sql import sql_flush
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.",template_dir = template_dir . decode ( fs_encoding )
"_CacheInfo is an instance of namedtuple class created with 2 arguments: string ""CacheInfo"" and a list with 4 elements: string 'hits',","_CacheInfo = namedtuple ( ""CacheInfo"" , [ ""hits"" , ""misses"" , ""maxsize"" , ""currsize"" ] )"
from django.utils.six.moves import _thread as thread into default name space.,from django . utils . six . moves import _thread as thread
"if StopIteration exception,",except StopIteration :
"decorator stringfilter,",@ stringfilter
"if StandardError, renamed to e, exception is caught,",except StandardError as e :
"if old_field_name is true,",if old_field_name :
derive CacheEntry class from the object base class.,class CacheEntry ( object ) :
output is an empty list.,output = [ ]
define the method nud with 2 arguments self and parser.,"def nud ( self , parser ) :"
"return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.","return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )"
"if unhandled_params is true,",if unhandled_params :
call the method clean with an argument value from the base class of the class ComboField.,"super ( ComboField , self ) . clean ( value )"
"define the function default_key_func with 3 arguments, key, key_prefix and version.","def default_key_func ( key , key_prefix , version ) :"
"and replace %r with self.obj, return the result. define function python_2_unicode_compatible, with klass as an argument.",def python_2_unicode_compatible ( klass ) :
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.,"if ( connections [ db ] . features . needs_datetime_string_cast and not isinstance ( current_expires , datetime ) ) :"
return integer 0.,return 0
from django.utils import six into default name space.,from django . utils import six
"substitute string ""Enter at least one %s."", with '%s' replaced by label, for missing_args_message.","missing_args_message = ""Enter at least one %s."" % label"
"no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',","no_settings_commands = [ 'help' , 'version' , '--help' , '--version' , '-h' , 'compilemessages' , 'makemessages' , 'startapp' , 'startproject' , ]"
skip this iteration of he smallest enclosing loop.,continue
evaluate self.clear method and return the result.,return self . clear ( )
"call the method self.error with 2 arguments: token and string ""Empty block tag"", return the result.","raise self . error ( token , ""Empty block tag"" )"
define the function find_template_loader with an argument loader.,def find_template_loader ( loader ) :
"otherwise if token.token_type equals integer 2,",elif token . token_type == 2 :
"if initial equals a string 'False',",if initial == 'False' :
"break the loop execution,",break
"call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.","value = super ( TypedMultipleChoiceField , self ) . clean ( value )"
"call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.","data = method ( self , * args , ** kwargs )"
substitute func.__doc__ for compile_func.__doc__.,compile_func . __doc__ = func . __doc__
"with unpacked list value as an argument, return the pk field of the result. if not,",else :
append potfile to potfiles.,potfiles . append ( potfile )
"if self._wrapped is empty,",if self . _wrapped is empty :
substitute text for self.text.,self . text = text
append options to output.,output . append ( options )
"attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',","attrs = { 'form' : form , 'extra' : extra , 'can_order' : can_order , 'can_delete' : can_delete , 'min_num' : min_num , 'max_num' : max_num , 'absolute_max' : absolute_max , 'validate_min' : validate_min , 'validate_max' : validate_max }"
"call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.","resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )"
"form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.","attrs . append ( ( attrname . lower ( ) , attrvalue ) )"
derive class Command from CheckCommand base class.,class Command ( CheckCommand ) :
"for root, dirs and files in sorted list of the directory tree starting from the directory self.path,","for root , dirs , files in sorted ( os . walk ( self . path ) ) :"
"if renderer is true,",if renderer :
"value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,","form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )"
define the method is_hidden with an argument self.,def is_hidden ( self ) :
"if fname file path exists,",if os . path . exists ( fname ) :
"call the method filename.encode with an argument string 'utf-8', substitute the result for filename.",filename = filename . encode ( 'utf-8' )
derive the class SerializerDoesNotExist from the KeyError base class.,class SerializerDoesNotExist ( KeyError ) :
"for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.",data_set = set ( force_text ( value ) for value in data )
utf8_charset.body_encoding is None.,utf8_charset . body_encoding = None
self._css is an empty dictionary.,self . _css = { }
"dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'. call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',","parser . add_argument ( '--extension' , '-e' , dest = 'extensions' , help = 'The file extension(s) to examine (default: ""html,txt"", or ""js"" ' 'if the domain is ""djangojs""). Separate multiple extensions with ' 'commas, or use -e multiple times.' , action = 'append' )"
"if not field_value is None. if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,",if not f . blank and not form_field . required and field_value in form_field . empty_values :
self._container is a list containing element value.,self . _container = [ value ]
"replace '%s' in string ""'%s' already exists"" with top_dir, substitute it for message.","message = ""'%s' already exists"" % top_dir"
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.,"self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )"
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.,del self [ 'Content-Transfer-Encoding' ]
"call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,","super ( PyLibMCCache , self ) . __init__ ( server , params , library = pylibmc , value_not_found_exception = pylibmc . NotFound )"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
define the method getvalue with an argument self.,def getvalue ( self ) :
"if first two elements of sys.version_info equal to integers 2 ant 7, respectively,","if sys . version_info [ : 2 ] == ( 2 , 7 ) :"
"if e.errno equals errno.EEXIST,",if e . errno == errno . EEXIST :
"substitute '%s' in a string "" - %s\n"" with return value of the operation.describe method, write the result to self.stdout.","self . stdout . write ( "" - %s\n"" % operation . describe ( ) )"
position the file self.file pointer at the end.,"self . file . seek ( 0 , os . SEEK_END )"
"if OSError exception is caught,",except OSError :
"if sys.platform starts with string 'java',",if sys . platform . startswith ( 'java' ) :
"if format is not contained in _serializers,",if format not in _serializers :
"call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.",Signer = import_string ( settings . SIGNING_BACKEND )
import readline.,import readline
"default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',","default_error_messages = { 'invalid_date' : _ ( 'Enter a valid date.' ) , 'invalid_time' : _ ( 'Enter a valid time.' ) , }"
"if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.","assert remaining > 0 , 'remaining bytes to read should never go negative'"
"call the function import_string with an argument path, substitute the result for func.",func = import_string ( path )
headerlist is an empty list.,headerlist = [ ]
call the method resolved_path.append with an argument ns.,resolved_path . append ( ns )
derive the class EmailInput from the TextInput base class.,class EmailInput ( TextInput ) :
"call the function warnings.warn with an argument string ""A {% csrf_token %} was used in a template, but the context did not provide the value. This is usually caused by not using RequestContext."".","warnings . warn ( ""A {% csrf_token %} was used in a template, but the context did not provide the value. This is usually caused by not using RequestContext."" )"
"call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.",self . serialization_formats = serializers . get_public_serializer_formats ( )
call the method self.load_label with an argument fixture_label.,self . load_label ( fixture_label )
"if not,",else :
break from the loop execution.,break
define the method reader with an argument self.,def reader ( self ) :
"if self does not have 'bad_cookies' attribute,","if not hasattr ( self , 'bad_cookies' ) :"
"otherwis if char is contained in string 'Yy',",elif char in 'Yy' :
derive the class SafeText from six.text_type and SafeData base classes.,"class SafeText ( six . text_type , SafeData ) :"
decorator register with argument Tags.compatibility.,@ register ( Tags . compatibility )
derive the class SplitDateTimeWidget from the MultiWidget base class.,class SplitDateTimeWidget ( MultiWidget ) :
substitute str for string_types.,"string_types = str ,"
"get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.","level = config . get ( 'level' , None )"
"define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.","def _construct_form ( self , i , ** kwargs ) :"
substitute connection.introspection.table_name_converter for converter.,converter = connection . introspection . table_name_converter
"if content_disposition is true,",if content_disposition :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"call the method template.render with an argument context, substitute it for content.",content = template . render ( context )
"once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.",backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]
"join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,","app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )"
increment nesting by one.,nesting += 1
"if prefix doesnt end with character '/',",if not prefix . endswith ( '/' ) :
"property decorator,",@ property
"if ImportError exception is caught,",except ImportError :
define the function constant_time_compare with 2 arguments: val1 and val2.,"def constant_time_compare ( val1 , val2 ) :"
return x.,return x
intrans is boolean False.,intrans = False
return boolean True.,return True
"call the method self.resolve with an argument c, substitute the result for c.",c = self . resolve ( c )
"call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,",final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
substitute settings.TEMPLATE_STRING_IF_INVALID for current.,current = settings . TEMPLATE_STRING_IF_INVALID
derive the class URLNode from Node base class.,class URLNode ( Node ) :
"if any exception is caught,",except :
substitute integer 0 for cache_timeout.,cache_timeout = 0
call the method self._archive.close.,self . _archive . close ( )
call the function walk_to_end with 2 arguments: ch and pattern_iter.,"walk_to_end ( ch , pattern_iter )"
yield a tuple with 2 elements: tok.name and toktext.,"yield ( tok . name , toktext )"
"return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,",return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
"if value is true,",if not value :
"call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.",input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
"if settings.USE_L10N is true,",if settings . USE_L10N :
return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.,return { 'csrf_token' : _get_val ( ) }
exit program with code integer 0.,sys . exit ( 0 )
"if other is an instance of Promise,","if isinstance ( other , Promise ) :"
define the method _initialize_handlers with an argument self.,def _initialize_handlers ( self ) :
"call the self._lock.writer method, with the result perform the following,",with self . _lock . writer ( ) :
"call the method time.mktime with an argument tt, substitute the result for stamp.",stamp = time . mktime ( tt )
define the function strip_tags with an argument value.,def strip_tags ( value ) :
define the method total_error_count with an argument self.,def total_error_count ( self ) :
"if os.path has an attribute 'samefile',","if hasattr ( os . path , 'samefile' ) :"
append tempdir to self.self.paths_to_remove.,self . paths_to_remove . append ( tempdir )
from django.forms.utils import ErrorList into default name space.,from django . forms . utils import ErrorList
"define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.","def __init__ ( self , digits , sign = '-' ) :"
call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.,file = tempfile . NamedTemporaryFile ( suffix = '.upload' )
define the method namespace_dict with an argument self.,def namespace_dict ( self ) :
derive the class HttpResponseServerError from the HttpResponse base class.,class HttpResponseServerError ( HttpResponse ) :
"if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',",if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result. define the function get_storage_class with argument import_path=None defaulting to None.",def get_storage_class ( import_path = None ) :
"if ValueError exception is caught,",except ValueError :
substitute CacheEntry for self.cache_model_class.,self . cache_model_class = CacheEntry
substitute url for value under the self.asvar key of context dictionary.,context [ self . asvar ] = url
"if TemplateSyntaxError, renamed to e, exception is caught,",except TemplateSyntaxError as e :
define the method is_multipart with an argument self.,def is_multipart ( self ) :
call the method self._assert_mutable.,self . _assert_mutable ( )
"call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.","value = super ( URLField , self ) . to_python ( value )"
"_assertRaisesRegex is a strnig ""assertRaisesRegex"".","_assertRaisesRegex = ""assertRaisesRegex"""
"if '.' is contained in exclude,",if '.' in exclude :
where '%s' is replaced with taglib_module. templatetags_modules is an empty list.,templatetags_modules = [ ]
"call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,","field_value = smart_text ( field_value , options . get ( ""encoding"" , settings . DEFAULT_CHARSET ) , strings_only = True )"
"try,",try :
increment length of template_dir by one and substitute it for prefix_length.,prefix_length = len ( template_dir ) + 1
"if app_labels is true,",if app_labels :
"separated by newline, use it as an argument for the call to the function mark_safe, return the result. define the method as_p with an argument self.",def as_p ( self ) :
"if answer equals a string 'y',","if answer != ""y"" :"
"call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.",readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
call the method mail.outbox.extend with messages.,mail . outbox . extend ( messages )
"substitute third and first element of bits for key and value, respectively.","key , value = bits [ 2 ] , bits [ 0 ]"
"call the method django.get_version append new line to it, write it to sys.stdout.",sys . stdout . write ( django . get_version ( ) + '\n' )
"subtract integer 12 from self.data.hour, return the result.",return self . data . hour - 12
"called with an argument result of the method self.latest_post_date. if value under the 'author_name' key of the self.feed dictionary is not None,",if self . feed [ 'author_name' ] is not None :
"call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.","Model = _get_model ( d [ ""model"" ] )"
return boolean True.,return True
from io import BytesIO into default name space.,from io import BytesIO
define the function decorator_from_middleware_with_args with an argument middleware_class.,def decorator_from_middleware_with_args ( middleware_class ) :
"define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
"call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,","with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :"
"call the method self.make_key with key and version set to version as arguments, substitute it for key.","key = self . make_key ( key , version = version )"
do nothing.,pass
"while '<' is contained in value and '>' is contained in value,",while '<' in value and '>' in value :
append func to processors.,processors . append ( func )
"truncate last 9 elements of filename and append it string "".py"".","filename = filename [ : - 9 ] + "".py"""
do nothing.,pass
"get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,",connection = connections [ options [ 'database' ] ]
substitute max_width for self.max_width.,self . max_width = max_width
call the method _trans.pgettext with 2 arguments context and message.,"return _trans . pgettext ( context , message )"
"call the method form._get_validation_exclusions, substitute the result for exclude.",exclude = form . _get_validation_exclusions ( )
derive the class DateField from the base class BaseTemporalField class.,class DateField ( BaseTemporalField ) :
return default.,return default
from django.core.servers.fastcgi import runfastcgi into default namespace.,from django . core . servers . fastcgi import runfastcgi
"raise an TemplateSyntaxError exception with an argument string ""%r takes two arguments"",","raise TemplateSyntaxError ( ""%r takes two arguments"" % bits [ 0 ] )"
non_capturing_groups is an empty list.,non_capturing_groups = [ ]
import StringIO.,import StringIO
"get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.",self . verbosity = options . get ( 'verbosity' )
"call the method self.configure_custom with an argument config, substitute the result for result.",result = self . configure_custom ( config )
define the function strftime with 2 arguments dt and fmt.,"def strftime ( dt , fmt ) :"
"if commit is true,",if not commit :
if http_cookies.CookieError exception is raised.,except http_cookies . CookieError :
"call the method self.importer with an argument used, substitute the result for found.",found = self . importer ( used )
"call the self.incr method with key, negative delta and version set to version as arguments.","return self . incr ( key , - delta , version = version )"
"for every field in concrete_model._meta.many_to_many,",for field in concrete_model . _meta . many_to_many :
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.,"def __init__ ( self , key_to_list_mapping = ( ) ) :"
replace every occurrence of '\\' in url with '/'.,"url = url . replace ( '\\' , '/' )"
__all__ is an tuple containing string 'SelectDateWidget'.,"__all__ = ( 'SelectDateWidget' , )"
"defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode, substitute the result for compile_func. substitute func.__doc__ for compile_func.__doc__.",compile_func . __doc__ = func . __doc__
define the method resolve_context with 2 arguments: self and context.,"def resolve_context ( self , context ) :"
"get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.",self . encoding = content_params [ 'charset' ]
"call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.","return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )"
define the function ifnotequal with 2 arguments: parser and token.,"def ifnotequal ( parser , token ) :"
"call the method self.data.isocalendar, return the first element of the result.",return self . data . isocalendar ( ) [ 0 ]
define the method check_programs with an argument unpacked list programs.,def check_programs ( * programs ) :
derive the class DefusedExpatParser from the _ExpatParser base class.,class DefusedExpatParser ( _ExpatParser ) :
"if not,",else :
"if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,","if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :"
"PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,","PALETTES = { NOCOLOR_PALETTE : { 'ERROR' : { } , 'WARNING' : { } , 'NOTICE' : { } , 'SQL_FIELD' : { } , 'SQL_COLTYPE' : { } , 'SQL_KEYWORD' : { } , 'SQL_TABLE' : { } , 'HTTP_INFO' : { } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { } , 'HTTP_NOT_MODIFIED' : { } , 'HTTP_BAD_REQUEST' : { } , 'HTTP_NOT_FOUND' : { } , 'HTTP_SERVER_ERROR' : { } , 'MIGRATE_HEADING' : { } , 'MIGRATE_LABEL' : { } , 'MIGRATE_SUCCESS' : { } , 'MIGRATE_FAILURE' : { } , } , DARK_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'yellow' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , } , LIGHT_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'blue' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'red' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , } }"
return boolean True.,return True
"call the force_text with an argument message, yield the result.",yield force_text ( message )
return path.,return path
"binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd. try,",try :
write new line to the self.stream file stream.,"self . stream . write ( ""\n"" )"
"call the function trim_url with an argument middle, substitute the result for trimmed.",trimmed = trim_url ( middle )
"try,",try :
extend collect list with _builtin_context_processors.,collect . extend ( _builtin_context_processors )
"with it replace %r in the string ""junk characters in start tag: %r"", call the method self.error with the resulting string as an argument. if string end ends with string '/>',",if end . endswith ( '/>' ) :
"default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,","default_error_messages = { 'invalid' : _ ( ""No file was submitted. Check the encoding type on the form."" ) , 'missing' : _ ( ""No file was submitted."" ) , 'empty' : _ ( ""The submitted file is empty."" ) , 'max_length' : ungettext_lazy ( 'Ensure this filename has at most %(max)d character (it has %(length)d).' , 'Ensure this filename has at most %(max)d characters (it has %(length)d).' , 'max' ) , 'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' ) }"
warning is a string 'ImmutableList object is immutable.'.,warning = 'ImmutableList object is immutable.'
field_params is an instance of a class OrderedDict.,field_params = OrderedDict ( )
"if query is an instance of MultiValueDict class,","if isinstance ( query , MultiValueDict ) :"
from django.utils.encoding import python_2_unicode_compatible into default name space.,from django . utils . encoding import python_2_unicode_compatible
if length of parts is greater than integer 1.,if len ( parts ) > 1 :
"if size is None substitute self._remaining for remaining, if not, substitute size for remaining.",remaining = self . _remaining if size is None else size
"if self.is_bound is true,",if self . is_bound :
"schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.","schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]"
append self to context.dicts.,context . dicts . append ( self )
substitute name for self.name.,self . name = name
substitute all_locales for locales.,locales = all_locales
substitute False for self.close_called.,self . close_called = False
define the function reloader_thread.,def reloader_thread ( ) :
"for every d in reversed list self.dicts,",for d in reversed ( self . dicts ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.",slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
"if IOError or OSError exceptions occurred,","except ( IOError , OSError ) :"
"if filename ends with extensions or filename is contained in extra_files,",if filename . endswith ( extensions ) or filename in extra_files :
"call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,","super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )"
"clean is a lambda function with arguments self and x, return value is x.","clean = lambda self , x : x"
increment loaded_objects_in_fixture by one.,loaded_objects_in_fixture += 1
"if lookup_view is a callable object,",if callable ( lookup_view ) :
return cached.,return cached
"call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.","dot = package . rindex ( '.' , 0 , dot )"
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.,"form_class_attrs = { 'Meta' : Meta , 'formfield_callback' : formfield_callback }"
"get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.",use_natural_keys = options . get ( 'use_natural_keys' )
substitute widget for self.widget.,self . widget = widget
"call the method middleware.process_response with 2 arguments: request and response, return the result.","return middleware . process_response ( request , response )"
return form.,return form
"try,",try :
"and call to the method form.has_changed evaluates to false, skip this loop iteration,",continue
return an instance of TemplateSyntaxError class with an argument msg.,return TemplateSyntaxError ( msg )
"raise CommandError exception with ""More than one migration matches '%s' in app '%s'. Please be more specific."",","raise CommandError ( ""More than one migration matches '%s' in app '%s'. Please be more specific."" % ( migration_name , app_label ) )"
"'and ""requires_system_checks"", which is illegal. Use only ""requires_system_checks"".', replace '%s' for self.__class__.__name__. call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,",self . requires_system_checks = ( self . requires_system_checks if has_new_option else self . requires_model_validation if has_old_option else True )
"call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.",cmatches = constant_re . findall ( t . contents )
"otherwise, if pattern has an '_callback' attribute.","elif hasattr ( pattern , '_callback' ) :"
"if not,",else :
derive the class DisallowedHost from the SuspiciousOperation base class.,class DisallowedHost ( SuspiciousOperation ) :
"if url ends with '/' character,",if url . endswith ( '/' ) :
"try,",try :
return token.,return token
call the method handler.endElement with an argument string 'author'.,"handler . endElement ( ""author"" )"
"raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.","raise CommandError ( ""Unknown serialization format: %s"" % format )"
"call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.","custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )"
"is replaced with '\\""'. define the function same_origin with 2 arguments url1 and url2.","def same_origin ( url1 , url2 ) :"
"if end is an instance of unicode,","if isinstance ( end , unicode ) :"
"call the function ugettext with an argument string ""%s GB"", substitute '%s' with the result of the call to the function,","value = ugettext ( ""%s GB"" ) % filesize_number_format ( bytes / GB )"
from django.core.management.base import BaseCommand into default name space.,from django . core . management . base import BaseCommand
define the function _add_doc with 2 arguments: func and doc.,"def _add_doc ( func , doc ) :"
append truncate_text to out.,out += truncate_text
opts and unpacked dictionary kwargs. NOCOLOR_PALETTE is a string 'nocolor'.,NOCOLOR_PALETTE = 'nocolor'
"sum media and w.media, substitute the result for media.",media = media + w . media
db_module is a string 'django.db'.,db_module = 'django.db'
"if form._meta.fields is an instance of tuple type,","if isinstance ( form . _meta . fields , tuple ) :"
"try,",try :
self.filters is an empty dictionary.,self . filters = { }
"call to the field.to_python method, substitute the result for value. substitute value for value under the field.name key of the data dictionary.",data [ field . name ] = value
"and stacklevel set to 2 as arguments. call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.","cache = _create_cache ( backend , ** kwargs )"
substitute parent_widget for self.parent_widget.,self . parent_widget = parent_widget
return boolean True.,return True
"call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.","self . file = os . fdopen ( fd , mode , bufsize )"
"remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.",config [ 'fmt' ] = config . pop ( 'format' )
"for every attr in _urllib_parse_moved_attributes,",for attr in _urllib_parse_moved_attributes :
"call the method os.environ.copy, substitute the result for new_environ.",new_environ = os . environ . copy ( )
bits is an empty list.,bits = [ ]
"raise an KeyError with an argument string ""Unknown language code %s and %s."", where '%s' is replaced with lang_code,","raise KeyError ( ""Unknown language code %s and %s."" % ( lang_code , generic_lang_code ) )"
return an empty dictionary.,return { }
define the method _render with 2 arguments self and context.,"def _render ( self , context ) :"
from django.utils import six into default name space.,from django . utils import six
return d.,return d
"doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS."", where '%r' is replaced with loader. return None.",return None
"call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',","parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )"
derive the class ContentFile from File base class.,class ContentFile ( File ) :
return first element of the list containing elements of error.,return list ( error ) [ 0 ]
sys.stdout is an instance of NullDevice class.,sys . stdout = NullDevice ( )
append 2 consecutive newlines to output.,output . append ( '\n\n' )
"call the smart_text function with an argument token, return the result.",return smart_text ( token )
"call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.","statements = sql_indexes ( app_config , self . style , connection )"
RUN_RELOADER is boolean True.,RUN_RELOADER = True
"from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,","from django . utils . html import ( conditional_escape , escapejs , escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping , remove_tags )"
"register.tag decorator,",@ register . tag
"call the function t.render with an argument context, return the result.",return t . render ( context )
declare that we use global variables cached_modules and _cached_filenames in this function.,"global _cached_modules , _cached_filenames"
"call the function ugettext with an argument string ""%s TB"", substitute '%s' with the result of the call to the function,","value = ugettext ( ""%s TB"" ) % filesize_number_format ( bytes / TB )"
"and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models. define the method model_installed with model as an argument.",def model_installed ( model ) :
substitute options.args for args.,args = options . args
"with the result, evaluate method connection.cursor, with return value as curs,",with connection . cursor ( ) as curs :
"if six.PY3 is true and val1 and val2 are an instances of bytes,","if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :"
return self._urlconf_module.,return self . _urlconf_module
"if exception http.Http404 as e is caught,",except http . Http404 as e :
return boolean True.,return True
"if self._dir file path does not exists,",if not os . path . exists ( self . _dir ) :
"if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,","if not os . access ( filename , os . W_OK ) :"
define the method __str__ with an argument self.,def __str__ ( self ) :
"evaluate the fd.isatty method, if the result is true,",if fd . isatty ( ) :
substitute rhs for number_value.,number_value = rhs
define the method process_default with self class instance and event as arguments.,"def process_default ( self , event ) :"
"decorator stringfilter,",@ stringfilter
"try,",try :
"get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.",self . verbosity = options . get ( 'verbosity' )
output is an empty list.,output = [ ]
"inner is an instance of NonCapture, created with elements of result from start index to the end.",inner = NonCapture ( result [ start : ] )
define the function check_for_language with an argument lang_code.,def check_for_language ( lang_code ) :
from django.utils import six into default name space.,from django . utils import six
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.,raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
changed is boolean True.,changed = True
"__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',","__all__ = ( 'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' , 'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' , 'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' , 'BaseInlineFormSet' , 'inlineformset_factory' , )"
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.,"from django . utils . encoding import force_bytes , python_2_unicode_compatible"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
return yes.,return yes
"for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',","self . stdout . write ( self . style . MIGRATE_LABEL ( "" Apply all migrations: "" ) + ( "", "" . join ( set ( a for a , n in targets ) ) or ""(none)"" ) )"
"define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,","def send_mail ( subject , message , from_email , recipient_list , fail_silently = False , auth_user = None , auth_password = None , connection = None , html_message = None ) :"
define the function import_module with 3 arguments: name and package set to None.,"def import_module ( name , package = None ) :"
"call the method pytz.timezone with an argument timezone, substitute the result for _active.value.",_active . value = pytz . timezone ( timezone )
"__all__ is a list containing a string ""runfastcgi"".","__all__ = [ ""runfastcgi"" ]"
"call the function ugettext with an argument string ""%s MB"", substitute '%s' with the result of the call to the function,","value = ugettext ( ""%s MB"" ) % filesize_number_format ( bytes / MB )"
define the method __nonzero__ with argument self.,def __nonzero__ ( self ) :
"if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,","if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :"
from django.utils.jslex import prepare_js_for_gettext into default name space.,from django . utils . jslex import prepare_js_for_gettext
"define the method __init__ with 3 arguments: self, producer and length set to None.","def __init__ ( self , producer , length = None ) :"
"if self._num_pages is None,",if self . _num_pages is None :
"return a string '""%s""' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '""',","return '""%s""' % etag . replace ( '\\' , '\\\\' ) . replace ( '""' , '\\""' )"
"_fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,","_fields_ = [ ( 'Internal' , ULONG_PTR ) , ( 'InternalHigh' , ULONG_PTR ) , ( '_offset_union' , _OFFSET_UNION ) , ( 'hEvent' , HANDLE ) ]"
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.,if not settings . is_overridden ( 'TEST_RUNNER' ) :
print message to the standard output.,print ( message )
derive the class DefaultCacheProxy from the base class object.,class DefaultCacheProxy ( object ) :
define the method _get_context_stack_frame with 2 arguments: self and context.,"def _get_context_stack_frame ( self , context ) :"
"if fields is not None and f.name is not contained in fields,",if fields is not None and f . name not in fields :
define the function get_commands.,def get_commands ( ) :
"if value is not equal to an empty string,",if value != '' :
"with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists, or is it does is boolean True, should_convert is boolean True, otherwise is boolean False. if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.",return localtime ( value ) if should_convert else value
"if url_info.netloc is false and url_info.scheme is true,",if not url_info . netloc and url_info . scheme :
from django.utils.html import escape into default name space.,from django . utils . html import escape
value under 'localize' key of kwargs dictionary is boolean True.,kwargs [ 'localize' ] = True
"if cc is not an six.string_types instance raise an error with message string '""cc"" argument must be a list or tuple'.","assert not isinstance ( cc , six . string_types ) , '""cc"" argument must be a list or tuple'"
"define the function make_origin with 4 arguments: display_name, loader, name and dirs.","def make_origin ( display_name , loader , name , dirs ) :"
"raise an TemplateSyntaxError exception ""'%s' is decorated with takes_context=True so it must have a first argument of 'context'"",","raise TemplateSyntaxError ( ""'%s' is decorated with takes_context=True so it must "" ""have a first argument of 'context'"" % name )"
define the method __nonzero__ with argument self.,def __nonzero__ ( self ) :
from django.utils import six into default name space.,from django . utils import six
"get the value under f key of dictionary under 'filters' key of self.config dictionary,",filterer . addFilter ( self . config [ 'filters' ] [ f ] )
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.,"def _curried ( * moreargs , ** morekwargs ) :"
return settings.DEBUG.,return settings . DEBUG
"for every line in return value of the method self.handle_inspection called with an argument options,",for line in self . handle_inspection ( options ) :
"try,",try :
define the function escape with an argument text.,def escape ( text ) :
call the method self.__prepare_class__.,self . __prepare_class__ ( )
substitute obj for value under the self.var_name key of the context dictionary.,context [ self . var_name ] = obj
define the method __next__ with an argument self.,def __next__ ( self ) :
derive class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"if not,",else :
"define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.","def words ( self , num , truncate = None , html = False ) :"
"return an instance of a SpacelessNode class, created with an argument nodelist.",return SpacelessNode ( nodelist )
"try,",try :
"if not,",else :
"self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.","self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )"
"define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.","def __init__ ( self , server , params , library , value_not_found_exception ) :"
"if the key doesnt exists use sys.stderr as an argument. if not,",else :
"try,",try :
"if field is an instance of FileField,","if isinstance ( field , FileField ) :"
"call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.","pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )"
"if value is true,",if value :
"for every i and choice in enumerated iterable self.choices,","for i , choice in enumerate ( self . choices ) :"
"raise an KeyError with an argument ""Unknown language code %s."", where '%s' is replaced with lang_code.","raise KeyError ( ""Unknown language code %s."" % lang_code )"
"try,",try :
"or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument. property decorator,",@ property
define the method more with an argument self.,def more ( self ) :
call the method self._assert_mutable.,self . _assert_mutable ( )
"if self.require_all_fields is true,",if self . require_all_fields :
"raise an ValueError exception with string ""Key '%s' not found"" as argument, substitute '%s' for key.","raise ValueError ( ""Key '%s' not found"" % key )"
"raise an exception,",raise
from django.utils.encoding import force_bytes into default name space.,from django . utils . encoding import force_bytes
label_for is an empty string.,label_for = ''
define the method resolve with 2 arguments: self and context.,"def resolve ( self , context ) :"
"replace every occurrence of string 'charset=CHARSET' for string 'charset=UTF-8' in msgs, substitute the result for msgs.","msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )"
"decorator stringfilter,",@ stringfilter
derive the class MLStripper from the HTMLParser base class.,class MLStripper ( HTMLParser ) :
"call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,","httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )"
"if url is false,",if not url :
"define method __exit__ with self, exc, value and tb as the arguments.","def __exit__ ( self , exc , value , tb ) :"
"get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for the call to the self.xml.ignorableWhitespace method.","self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )"
"if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.",return latest_date or datetime . datetime . now ( )
"call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.","parser . add_argument ( 'addrport' , nargs = '?' , help = 'Optional port number, or ipaddr:port' )"
"call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,","six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )"
define the method tzname with 2 arguments: self and dt.,"def tzname ( self , dt ) :"
"call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.","sublist = _helper ( sublist_item , tabs + 1 )"
"for every base in new_class.__mro__ in reversed order,",for base in reversed ( new_class . __mro__ ) :
if self does not has an '_post' attribute.,"if not hasattr ( self , '_post' ) :"
"if KeyError exception is caught,",except KeyError :
"define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,","def __init__ ( self , path , match = None , recursive = False , allow_files = True , allow_folders = False , required = True , widget = None , label = None , initial = None , help_text = '' , * args , ** kwargs ) :"
"call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.","file_root , file_ext = os . path . splitext ( file_name )"
"call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.","return self . _truncate_html ( length , truncate , text , truncate_len , False )"
"if not,",else :
"call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.","scheme , netloc , path , query , fragment = urlsplit ( value )"
"call the method logging.Filter with an argument name, substitute the result for result.",result = logging . Filter ( name )
"if e.errno equals to errno.EEXIST,",if e . errno != errno . ENOENT :
"call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,",if new_name . find ( '__' ) >= 0 :
"call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.","apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )"
"substitute the result for url. if NoReverseMatch exception is caught,",except NoReverseMatch :
"call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,","return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )"
"try,",try :
do nothing.,pass
"if email_messages is false,",if not email_messages :
"if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,",if not ( value is True or value is False or value is None or value == '' ) :
"call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.","return reduce ( operator . add , dict ( self ) . values ( ) )"
"if DatabaseError, renamed to e, exception is caught,",except DatabaseError as e :
breaks from the smallest enclosing loop execution.,break
return boolean True.,return True
d is an empty string.,d = ''
import module os.,import os
"if LookupError or TypeError exceptions are caught,","except ( LookupError , TypeError ) :"
"call the method self.args_check with 3 arguments: filter_name, filter_func and args.","self . args_check ( filter_name , filter_func , args )"
"call the method self._set with key, pickled and timeout as arguments.","self . _set ( key , pickled , timeout )"
"subtype and charset, respectively. if not,",else :
"otherwise if self.waiting_readers is not equal to integer 0,",elif self . waiting_readers != 0 :
"if prefix is false,",if not prefix :
"if lang_code is true,",if lang_code :
"if value is contained in self.empty_values,",if value in self . empty_values :
substitute value for the value under the name key of the self.cleaned_data dictionary.,self . cleaned_data [ name ] = value
"raise an CommandError exception with an argument string '""%s"" is not a valid IPv6 address.' where '%s' is replaced with self.addr.","raise CommandError ( '""%s"" is not a valid IPv6 address.' % self . addr )"
define the method __add__ with 2 arguments self and rhs.,"def __add__ ( self , rhs ) :"
derive the class FloatField from the base class IntegerField class.,class FloatField ( IntegerField ) :
"evaluate the self.get_fqdn method, return the result.",return self . get_fqdn ( )
define the method translate_token with 2 arguments: self and token.,"def translate_token ( self , token ) :"
"if not,",else :
return palette.,return palette
"for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,",for c in lineno_comment_map [ comment_lineno_cache ] :
"for ever app_config in return value of the method apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
"try,",try :
"and string '~/.pythonrc.py' as tuples second element. if pythonrc is true,",if not pythonrc :
from django.forms.widgets import Widget and Select into default name space.,"from django . forms . widgets import Widget , Select"
raise an StopIteration exception.,raise StopIteration ( )
"if six.PY3 is true,",if six . PY3 :
append callback to self._post_render_callbacks list.,self . _post_render_callbacks . append ( callback )
"define the method appendlist with 3 arguments: self, key and value.","def appendlist ( self , key , value ) :"
"blocks is a dictionary with elements: n for n.name, for every n in return value of the method,","blocks = dict ( ( n . name , n ) for n in compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )"
"try,",try :
"concatenate name and string '-clear', return it.",return name + '-clear'
"if not,",else :
call the method clear from the base class of the class SortedDict.,"super ( SortedDict , self ) . clear ( )"
"try,",try :
"if match is true,",if not match :
return boolean False.,return False
"if not,",else :
define the function ljust with 2 arguments value and arg.,"def ljust ( value , arg ) :"
"for every node in self.nodelist_loop,",for node in self . nodelist_loop :
"call the method warnings.warn with 2 arguments: string ""The syncdb command will be removed in Django 1.9"" and RemovedInDjango19Warning.","warnings . warn ( ""The syncdb command will be removed in Django 1.9"" , RemovedInDjango19Warning )"
"categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.",categories = [ ( c ) for c in categories ]
derive the class StopFutureHandlers from the UploadFileException base class.,class StopFutureHandlers ( UploadFileException ) :
"call the method form.save, with an argument commit set to boolean False, substitute the result for obj.",obj = form . save ( commit = False )
"call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.",rest = rest [ m . end ( ) : ]
"endless loop,",while True :
"call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.","notifier = pyinotify . Notifier ( wm , EventHandler ( ) )"
substitute name for self.name.,self . name = name
"raise a ValueError exception with an argument ""You can only use `unpack_ipv4` if `protocol` is set to 'both'"".","raise ValueError ( ""You can only use `unpack_ipv4` if `protocol` is set to 'both'"" )"
"try,",try :
"open writer.path file in write mode, with file descriptor as fh, perform the following,","with open ( writer . path , ""wb"" ) as fh :"
substitute str for text_type.,text_type = str
"default set to None, help is a string 'Only look for fixtures in the specified app.'. call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',","parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' , dest = 'ignore' , default = False , help = 'Ignores entries in the serialized data for fields that do not ' 'currently exist on the model.' )"
"define the method __init__ with arguments self, content and name defaulting to None.","def __init__ ( self , content , name = None ) :"
return _decorator.,return _decorator
define the method dst with 2 arguments self and dt.,"def dst ( self , dt ) :"
define the method send_messages with arguments self and email_messages.,"def send_messages ( self , email_messages ) :"
"try,",try :
call the method self.validate_key with argument key.,self . validate_key ( key )
"otherwise if value is an instance of datetime.date,","elif isinstance ( value , datetime . date ) :"
"define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',","def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :"
"otherwise if action equals to string 'apply_success',","elif action == ""apply_success"" :"
"if not,",else :
"if template is None,",if template is None :
"if length of self.dicts is equal to an integer 1,",if len ( self . dicts ) == 1 :
"try,",try :
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.,"super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )"
define the method next_token with an argument self.,def next_token ( self ) :
remove the entry under the 'stream' key of the self.json_kwargs dictionary.,"self . json_kwargs . pop ( 'stream' , None )"
define the method get_nodes_by_type with 2 arguments: self and nodetype.,"def get_nodes_by_type ( self , nodetype ) :"
"define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.","def __exit__ ( self , exc_type , exc_value , traceback ) :"
"convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.",return self . _headers [ header . lower ( ) ] [ 1 ]
"for every k and v in return value of the function defaults.items,","for k , v in defaults . items ( ) :"
"for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,",for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,","s = six . text_type ( bytes ( s ) , encoding , errors )"
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.,_dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__
substitute _itervalues for itervalues.,itervalues = _itervalues
return first element of key.,return key [ 0 ]
derive the class MultipleChoiceField from the base class ChoiceField class.,class MultipleChoiceField ( ChoiceField ) :
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
call the method o.isoformat substitute the result for r.,r = o . isoformat ( )
"and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' . call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which the cache tables will be ' 'installed. Defaults to the ""default"" database.' )"
remove 3 elements from r starting at the index 23.,r = r [ : 23 ] + r [ 26 : ]
substitute index for self.index.,self . index = index
raise an AttributeError with an argument attr.,raise AttributeError ( attr )
define the method clean with arguments self and value.,"def clean ( self , value ) :"
define the method widget_attrs with arguments self and widget.,"def widget_attrs ( self , widget ) :"
from django.utils import formats and six into default name space.,"from django . utils import formats , six"
define the function ifchanged with 2 arguments: parser and token.,"def ifchanged ( parser , token ) :"
"string 'unicode_escape', substitute the list of results for etags. return etags.",return etags
import module fnmatch.,import fnmatch
"split arg by ':', for every x in result,",for x in arg . split ( ':' ) :
"if settings.TEMPLATE_DEBUG is true,",if settings . TEMPLATE_DEBUG :
define the method copy with an argument self.,def copy ( self ) :
"call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.",return mark_safe ( _helper ( value ) )
"if data is not None or FILE_INPUT_CONTRADICTION,","if data in ( None , FILE_INPUT_CONTRADICTION ) :"
"if not,",else :
"try,",try :
self.default_locale_path is None.,self . default_locale_path = None
define the function get_digit with 2 arguments value and arg.,"def get_digit ( value , arg ) :"
"call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.",timeout = self . get_backend_timeout ( timeout )
define the method validate with arguments self and value.,"def validate ( self , value ) :"
"evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.",return six . text_type ( s ) . encode ( encoding )
"define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.","def as_hidden ( self , attrs = None , ** kwargs ) :"
"if not,",else :
from django.core.management.base import CommandError and BaseCommand into default name space.,"from django . core . management . base import CommandError , BaseCommand"
"if illegal_formatting is true,",if illegal_formatting :
"if self._upload_handlers is false,",if not self . _upload_handlers :
"msg is a tuple containing one initial entry: a string ""WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'"", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.","msg = ( ""WSGI application '%(app_path)s' could not be loaded; "" ""Error importing module: '%(exception)s'"" % ( { 'app_path' : app_path , 'exception' : e , } ) )"
raise an TypeError with an string 'formfield_callback must be a function or callable'.,raise TypeError ( 'formfield_callback must be a function or callable' )
"try,",try :
substitute item for value under the first element of self.loopvars key of the context dictionary.,context [ self . loopvars [ 0 ] ] = item
substitute package.__path__ for package_path.,package_path = package . __path__
"an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk. if Model.DoesNotExist exception is caught,",except Model . DoesNotExist :
"call the method value.center with an argument, arg converted into a integer, return the result.",return value . center ( int ( arg ) )
substitute propagate for logger.propagate.,logger . propagate = propagate
"if func doesnt have a attribute '__name__',","if not hasattr ( func , '__name__' ) :"
"call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.",scheme = value . split ( '://' ) [ 0 ] . lower ( )
return supported_code.,return supported_code
"if filepath starts with root,",if filepath . startswith ( root ) :
define the method __mod__ with 2 arguments: self and rhs.,"def __mod__ ( self , rhs ) :"
"if text has an '__html__' attribute,","if hasattr ( text , '__html__' ) :"
from django.core.mail.backends.base import BaseEmailBackend into default name space.,from django . core . mail . backends . base import BaseEmailBackend
"if bits is true and kwarg_format is false,",if bits and not kwarg_format :
"raise an TemplateSyntaxError exception with an argument string, ""'%s' tag takes at least 2 arguments and the second last argument","raise TemplateSyntaxError ( ""'%s' tag takes at least 2 arguments and the "" ""second last argument must be 'as'"" % function_name )"
"if six.PY3 is true,",if six . PY3 :
"and form is not contained in forms_to_delete, substitute the resulting list for valid_forms. for every form in valid_forms,",for form in valid_forms :
substitute node for bit.,bit = node
"if NotImplementedError exception,",except NotImplementedError :
substitute nodelist for self.nodelist.,self . nodelist = nodelist
substitute the last element of args for name.,name = args [ - 1 ]
"call the self.stderr.write, with string ""The po files under %s are in a seemingly not writable location. mo files will not be updated/created."" as argument, with '%s' replaced by dirpath.","self . stderr . write ( ""The po files under %s are in a seemingly not writable location. "" ""mo files will not be updated/created."" % dirpath )"
return value.,return value
"substitute the fitst element of the result for prefix_norm and prefix_args, respectively. for every possibility, pattern and defaults in possibilities,","for possibility , pattern , defaults in possibilities :"
"obj is an instance of Node class, created with 3 arguments: children, connector and negated.","obj = Node ( children , connector , negated )"
derive the class VariableNode form the base class Node.,class VariableNode ( Node ) :
"call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,","return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )"
"call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,",step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.,kwargs [ 'to_field' ] = self . fk . rel . field_name
return nothing.,return
"remove first element from self.tokens, return removed element.",return self . tokens . pop ( 0 )
"if exception OSError, renamed to e, occurred,",except OSError as e :
"for every i and widget in enumerated iterable self.widgets,","for i , widget in enumerate ( self . widgets ) :"
"otherwise if value is boolean False, string 'False' or string '0'","elif value in ( False , 'False' , '0' ) :"
"if middleware has an attribute 'process_view',","if hasattr ( middleware , 'process_view' ) :"
"where '%s' is replaced with token.contents. call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,",sequence = parser . compile_filter ( bits [ in_index + 1 ] )
"if plen is lesser than difference of alen and dlen, or if plen is greater than alen,",if plen < ( alen - dlen ) or plen > alen :
"call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,","context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )"
"remove first and last character from the attrvalue, substitute it for attrvalue.",attrvalue = attrvalue [ 1 : - 1 ]
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.,from xml . sax . expatreader import ExpatParser as _ExpatParser
"_iteritems is a string ""items"".","_iteritems = ""items"""
"total_ordering decorator,",@ total_ordering
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"define the method handle_field with argument self, obj and field.","def handle_field ( self , obj , field ) :"
"if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,","elif not options [ ""socket"" ] and not options [ ""host"" ] and not options [ ""port"" ] :"
"if filename is true and filename path doesnt exist,",if filename and not os . path . exists ( filename ) :
"return first element of t converted to lowercase and second element of t, as a tuple.","return ( t [ 0 ] . lower ( ) , t [ 1 ] )"
define the method __init__ with 2 arguments: self and attrs set to None.,"def __init__ ( self , attrs = None ) :"
"call the method value.ljust with an argument, arg converted into a integer, return the result.",return value . ljust ( int ( arg ) )
call the method new_context._reset_dicts values.,new_context . _reset_dicts ( values )
"ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element, validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',","ip_address_validator_map = { 'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) , 'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) , 'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) , }"
do nothing.,pass
return nothing.,return
derive the class SortedDict from the dict base class.,class SortedDict ( dict ) :
define the function now.,def now ( ) :
if file is an instance of six.string_types.,"if isinstance ( file , six . string_types ) :"
"if message is an instance of SafeData,","if isinstance ( message , SafeData ) :"
"formated with values under the 'author_email' and 'author_name' keys of item dictionary. otherwise if value under the ""author_email"" key of the item dictionary is true,","elif item [ ""author_email"" ] :"
"if error_class is None,",if error_class is None :
"is exception is caught,",except :
"for every path in self.locale_paths,",for path in self . locale_paths :
"if construct is true,",if construct :
define the method __prepare_class__ with an argument self.,def __prepare_class__ ( cls ) :
"call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.","data = method ( self , * args , ** kwargs )"
"call the method context.push, with the result perform,",with context . push ( ) :
return nothing.,return
call the method activate with an argument self.timezone.,activate ( self . timezone )
from django.db import DEFAULT_DB_ALIAS into default name space.,from django . db import DEFAULT_DB_ALIAS
derive the class UnreadablePostError from the base class IOError.,class UnreadablePostError ( IOError ) :
"call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.","nm = Header ( nm , 'utf-8' ) . encode ( )"
import module copy.,import copy
delete name attribute of the _MovedItems object.,"delattr ( _MovedItems , name )"
return a tuple with 2 elements: integer 0 and second element of k.,"return ( 0 , k [ 1 ] )"
define the method resolve_error_handler with arguments self and view_type.,"def resolve_error_handler ( self , view_type ) :"
"get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.",memo [ id ( self ) ] = result
"call the method self.empty_form.is_multipart, return the result",return self . empty_form . is_multipart ( )
"call the function get_template with an argument parent, return the result.",return get_template ( parent )
define the method visible_fields with an argument self.,def visible_fields ( self ) :
"if max_age is not None,",if max_age is not None :
"call the function get_default_timezone, substitute the result for self.timezone.",self . timezone = get_default_timezone ( )
return compile_function.,return compile_function
from functools import total_ordering.,from functools import total_ordering
"if ValueError or TypeError are caught,","except ( ValueError , TypeError ) :"
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.,default_error_messages = { 'invalid' : _ ( 'Enter a valid time.' ) }
from django.utils.safestring import mark_safe and SafeData into default name space.,"from django . utils . safestring import mark_safe , SafeData"
raise an exception e.,raise e
"if field.serialize is true,",if field . serialize :
do nothing.,pass
"for every ext in pathext,",for ext in pathext :
substitute RadioChoiceInput for choice_input_class.,choice_input_class = RadioChoiceInput
define the method content with an argument self.,def content ( self ) :
"if bit is true,",if bit :
"if app_config.models_module is None,",if app_config . models_module is None :
define the method chunks with arguments self and chunk_size defaulting to None.,"def chunks ( self , chunk_size = None ) :"
doublecolon_len is integer 0.,doublecolon_len = 0
define the method f with an argument self.,def f ( self ) :
skip this loop iteration.,continue
derive the class DTDForbidden from the DefusedXmlException base class.,class DTDForbidden ( DefusedXmlException ) :
"call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.","emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )"
append f to file_field_list.,file_field_list . append ( f )
"if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,",if ( BLOCK_CONTEXT_KEY in render_context and render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :
append name to self._changed_data.,self . _changed_data . append ( name )
"call the function re.compile with an argument raw string ""_\(((?:"".*?"")|(?:'.*?'))\)"", substitute the result for constant_re.","constant_re = re . compile ( r""""""_\(((?:"".*?"")|(?:'.*?'))\)"""""" )"
"for every elt in source,",for elt in source :
call the server_bind method from the base class of the WSGIServer class.,"super ( WSGIServer , self ) . server_bind ( )"
increment i-th element of result by piece.,result [ i ] += piece
mime_type is a string 'application/rss+xml; charset=utf-8'.,mime_type = 'application/rss+xml; charset=utf-8'
call the method tzinfo.__init__ with an argument self.,tzinfo . __init__ ( self )
from django.conf import settings into default name space.,from django . conf import settings
"if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.",return sys . modules [ name ] is not None
define the method __init__ with an argument self.,def __init__ ( self ) :
if StopFutureHandlers exception is caught.,except StopFutureHandlers :
"for every func and args in self.filters,","for func , args in self . filters :"
"if the key doesnt exists call the six.String function and substitute the result for self.stream. remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,","self . selected_fields = options . pop ( ""fields"" , None )"
"for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,",for table_name in connection . introspection . table_names ( cursor ) :
"call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.","lineno_comment_map . setdefault ( t . lineno , [ ] ) . append ( t . contents )"
"initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False. if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.",self . is_bound = data is not None or files is not None
"if colors is true and last element of colors is contained in color_names,",if colors and colors [ - 1 ] in color_names :
"and self.choice_label, return the result. define the method is_checked with an argument self.",def is_checked ( self ) :
"except if AttributeError is caught,",except AttributeError :
"call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,","with transaction . atomic ( using = database , savepoint = connection . features . can_rollback_ddl ) :"
"join fixture_dir, fixture_name with appended character '*' into a valid file path,","for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :"
"call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.","return date_format ( value , use_l10n = use_l10n )"
"dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'. call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',","parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' , help = 'List available tags.' )"
"if not,",else :
"where '%r' is replaced with first element of bits. if remaining_bits is true,",if remaining_bits :
do nothing.,pass
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
call the function locks.lock with fd and locks.LOCK_EX as arguments.,"locks . lock ( fd , locks . LOCK_EX )"
"call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.","template , origin = self . find_template ( template_name , template_dirs )"
"if data is an instance of MultiValueDict or MergeDict class,","if isinstance ( data , ( MultiValueDict , MergeDict ) ) :"
substitute new_class.declared_fields for fields.,fields = new_class . declared_fields
"filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value. if not,",else :
"called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out. if not,",else :
"for every part in parts,",for part in parts :
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.,"self . configure_logger ( name , loggers [ name ] )"
"call the function CheckRegistry, substitute the result for registry.",registry = CheckRegistry ( )
"if InvalidOperation exception is caught,",except InvalidOperation :
"if '_' is contained in locale,",if '_' in locale :
"call the function ugettext_lazy with an argument value, return the result.",return ugettext_lazy ( value )
"call the function calendar.isleap with an argument self.data.year, if it evaluates to true,",if calendar . isleap ( self . data . year ) :
"append boundary to bytes string '--', substitute the result for self._separator.",self . _separator = b'--' + boundary
substitute self.version for version.,version = self . version
define the method __init__ with 2 arguments: self and field.,"def __init__ ( self , field ) :"
"compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.","date_re = re . compile ( r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$' )"
import module socket.,import socket
"if not,",else :
"call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.","return self . load_template ( template_name , template_dirs )"
"substitute '%s' is ""%s.process_response didn't return an HttpResponse object. It returned None instead."",","raise ValueError ( ""%s.process_response didn't return an "" ""HttpResponse object. It returned None instead."" % ( middleware_method . __self__ . __class__ . __name__ ) )"
define the method __init__ with arguments: self class instance and argv set to None.,"def __init__ ( self , argv = None ) :"
"attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.","attachment = SafeMIMEText ( content , subtype , encoding )"
derive the class BadHeaderError from the ValueError base class.,class BadHeaderError ( ValueError ) :
substitute value for self.value.,self . value = value
define the function divisibleby with 2 arguments value and arg.,"def divisibleby ( value , arg ) :"
"call the method self.as_table, return the result.",return self . as_table ( )
import module glob.,import glob
"raise an CommandError with an argument string ""Cannot find a migration matching '%s' from app '%s'."",","raise CommandError ( ""Cannot find a migration matching '%s' from app '%s'."" % ( migration_name , app_label ) )"
import module time.,import time
substitute last element of bits for asvar.,asvar = bits [ - 1 ]
get attribute 'error_dict' from the self object.,"getattr ( self , 'error_dict' )"
"if not,",else :
self.file_name is None.,self . file_name = None
"call the method self._coerce with an argument value, return the result.",return self . _coerce ( value )
"instantiate class X, get its length.",len ( X ( ) )
EventHandler.modified_code is I18N_MODIFIED.,EventHandler . modified_code = I18N_MODIFIED
from django.conf import settings into default name space.,from django . conf import settings
"call the function next_space_index with 2 arguments subject and i, substitute the result for i.","i = next_space_index ( subject , i )"
self.object_name is a string 'CacheEntry'.,self . object_name = 'CacheEntry'
"if tzinfo equals a string 'Z',",if tzinfo == 'Z' :
"if not,",else :
"call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,","return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )"
"call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.",self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
"if self.verbosity is grater than, or equal to integer 2,",if self . verbosity >= 2 :
"otherwise substitute settings.USE_L10N for use_grouping. if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.",use_grouping = use_grouping or force_grouping
define the method close with self class instance as the argument.,def close ( self ) :
"define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.",xreadlines = property ( lambda self : self . file . xreadlines )
return self._files.,return self . _files
timeout is a integer -1.,timeout = - 1
from functools import partial into default name space.,from functools import partial
"if not,",else :
derive class Command from the TemplateCommand base class.,class Command ( TemplateCommand ) :
"call the method self.xml.endElement with an argument string ""django-objects"".","self . xml . endElement ( ""django-objects"" )"
define the method content with 2 arguments: self and value.,"def content ( self , value ) :"
"substitute the '%s' with table and list containing key, respectively. define the method has_key with self class instance, key and version defaulting to None as arguments.","def has_key ( self , key , version = None ) :"
import module os.,import os
"if template doesnt have a 'render' attribute,","if not hasattr ( template , 'render' ) :"
import module hashlib.,import hashlib
return an empty dictionary.,return { }
"substitute the result for block_content. if self.verbatim is true and block_content equals self.verbatim,",if self . verbatim and block_content == self . verbatim :
"for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.",return [ f [ : - 3 ] for f in os . listdir ( command_dir ) if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
"for every k and v in self.choices,","for k , v in self . choices :"
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.,raise PageNotAnInteger ( 'That page number is not an integer' )
"and unpacked dictionary kwargs, return the result. call the function MovedModule with 2 arguments: strings ""_dummy_thread"" and ""dummy_thread"",","add_move ( MovedModule ( ""_dummy_thread"" , ""dummy_thread"" ) )"
"for every __ in iterator,",for __ in iterator :
"for every name and value in items of props dictionary,","for name , value in props . items ( ) :"
"call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.","output = self . handle ( * args , ** options )"
"and code set to an string 'required'. for every val in value,",for val in value :
return first and second element of result.,"return result [ 0 ] , result [ 1 ]"
"call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',","warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` ' 'instead.' , RemovedInDjango19Warning , 2 )"
"define the method setlist with 3 arguments: self, key and list_.","def setlist ( self , key , list_ ) :"
substitute new for self.mod.,self . mod = new
substitute url_name for self.url_name.,self . url_name = url_name
"if flags is not None,",if flags is not None :
"'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers', 'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'. define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.","def get_connection ( backend = None , fail_silently = False , ** kwds ) :"
"format string ""%s%s%s"" with 3 elements: result of the function random.getstate, result of the call the the function time.time,","random . seed ( hashlib . sha256 ( ( ""%s%s%s"" % ( random . getstate ( ) , time . time ( ) , settings . SECRET_KEY ) ) . encode ( 'utf-8' ) ) . digest ( ) )"
"try,",try :
append list containing string '--no-location' to self.xgettext_options.,self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
"choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.","choices = property ( _get_choices , ChoiceField . _set_choices )"
"call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,","for filepath in self . get_template_sources ( template_name , template_dirs ) :"
"compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.",DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
existing_headers is a set of lowercase headers for every header in vary_headers.,existing_headers = set ( header . lower ( ) for header in vary_headers )
"define the method __setitem__ with arguments self, name and val.","def __setitem__ ( self , name , val ) :"
"if OverflowError exception is caught,",except OverflowError :
substitute the value under the fieldname key of the self.fields dictionary for field.,field = self . fields [ fieldname ]
define the method __str__ with an argument self.,def __str__ ( self ) :
substitute connection.features.test_db_allows_multiple_connections for use_threading.,use_threading = connection . features . test_db_allows_multiple_connections
"if pofile path exists,",if os . path . exists ( pofile ) :
substitute loaders for self._loaders.,self . _loaders = loaders
append first element of e.args to not_found list.,not_found . append ( e . args [ 0 ] )
yield ch and boolean False.,"yield ch , False"
"default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by ""###"".' define the method handle with arguments self and unpacked dictionary options.","def handle ( self , ** options ) :"
increment weight by integer 2.,weight += 2
return func.,return func
"if min_value is not None,",if min_value is not None :
"if length of x is equal to integer 0,",if len ( x ) == 0 :
"if ImportError exception is caught,",except ImportError :
"increment doublecolon_len by integer 1,",doublecolon_len += 1
"join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.","basedirs . append ( os . path . join ( app_config . path , 'locale' ) )"
from django.utils.encoding import force_text and smart_text into default name space.,"from django . utils . encoding import force_text , smart_text"
"if six.PY3 is true,",if six . PY3 :
"replace '%s' in string ""%s = %s ###"" with key and value under the key key of the user_setting dictionary, append it to the output.","output . append ( ""%s = %s ###"" % ( key , user_settings [ key ] ) )"
processors is an empty tuple.,processors = ( )
"if not,",else :
from django.conf import settings into default name space.,from django . conf import settings
from django.conf import settings into default name space.,from django . conf import settings
"if expanded_template is a directory,",if path . isdir ( expanded_template ) :
"if ValueError exception is caught,",except ValueError :
"for every i and v in enumerated iterable value,","for i , v in enumerate ( value ) :"
"compile the regex ""^https?://"" with an argument re.I, substitute it for absolute_http_url_re.","absolute_http_url_re = re . compile ( r""^https?://"" , re . I )"
import warnings.,import warnings
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.,"os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )"
"if target_dir path doesnt exists,",if not path . exists ( target_dir ) :
and unpacked dictionary kwargs. instance.keyOrder is an empty list.,instance . keyOrder = [ ]
"if IndexError exception is caugh,",except IndexError :
"default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a whole number.' ) , }"
return a tuple with an element self.__offset.,"return self . __offset ,"
"'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.', and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max', for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s digit before the decimal point.', 'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'. define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,","def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :"
"for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,","for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :"
import module zipfile.,import zipfile
self.method is None.,self . method = None
"join rendered_widgets into a string, return it.",return '' . join ( rendered_widgets )
"original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3. call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.",possibilities = self . reverse_dict . getlist ( lookup_view )
define the function int2byte with an argument i.,def int2byte ( i ) :
define the method errors with an argument self.,def errors ( self ) :
"match rest string with self.INDEX_PATTERN regex, substitute the result for m.",m = self . INDEX_PATTERN . match ( rest )
substitute self.obj for model.,model = self . obj
derive the class JsLexer from the Lexer base class.,class JsLexer ( Lexer ) :
"cat for 'term'. if value under the 'item_copyright' key of the item dictionary is not None,",if item [ 'item_copyright' ] is not None :
derive the class TokenBase from the object base class.,class TokenBase ( object ) :
skip this loop iteration.,continue
"if IOErro, renamed to e, exception is caught,",except IOError as e :
"call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',","parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' , default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )"
"if tablename is contained in return value of the method connection.introspection.table_names,",if tablename in connection . introspection . table_names ( ) :
read the whole self file and yield it as a generator return value.,yield self . read ( )
"if InputStreamExhausted exception is caught,",except InputStreamExhausted :
from django.utils.encoding import smart_text into default name space.,from django . utils . encoding import smart_text
"if StandardError, renamed to e, exception is caught,",except StandardError as e :
"call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:","return ( source , make_origin ( display_name , loader , name , dirs ) )"
"if self.verbosity is greater than integer 1,",if self . verbosity > 1 :
"""Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware, django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. If your project needs these middleware then you should configure this setting."", obj set to None, and id set to a string '1_7.W001', put the result into a list and return it. if not,",else :
substitute self for result.parent.,result . parent = self
define the method configure_formatter with 2 arguments: self and config.,"def configure_formatter ( self , config ) :"
"call the function force_text with an argument error, return the result.",return force_text ( error )
is_usable is boolean False.,is_usable = False
append value under the key v of foreground dictionary to code_list.,code_list . append ( foreground [ v ] )
append f.name to exclude.,exclude . append ( f . name )
"substitute DEFAULT_MIN_NUM for min_num,",min_num = DEFAULT_MIN_NUM
"define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def update ( self , * args , ** kwargs ) :"
substitute the limit_value for self.limit_value.,self . limit_value = limit_value
"call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,","fields = fields_for_model ( opts . model , opts . fields , opts . exclude , opts . widgets , formfield_callback , opts . localized_fields , opts . labels , opts . help_texts , opts . error_messages )"
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
"value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,","obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )"
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.,"return self . _stream . read ( * args , ** kwargs )"
"raise an TemplateSyntaxError exception with an argument string '""filter %s"" is not permitted. Use the ""autoescape"" tag instead.',","raise TemplateSyntaxError ( '""filter %s"" is not permitted. Use the ""autoescape"" tag instead.' % filter_name )"
"convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.","msg_with_ctxt = ""%s%s%s"" % ( context , CONTEXT_SEPARATOR , message )"
"tpl is an string ""ExternalReferenceForbidden(system_id='{}', public_id={})"".","tpl = ""ExternalReferenceForbidden(system_id='{}', public_id={})"""
"if six.PY3 is boolean True,",if six . PY3 :
"if settings.MANAGERS does not exist,",if not settings . MANAGERS :
"if not,",else :
"if not,",else :
"convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',",if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
"call the method token.split_contents, substitute the result for bits.",bits = token . contents . split ( )
call the add_arguments method with parser as argument form the base class of the class Command.,"super ( Command , self ) . add_arguments ( parser )"
define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
delete self.name attribute from the obj.__class__ object.,"delattr ( obj . __class__ , self . name )"
return val.,return val
supported is boolean False.,supported = False
"call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.","return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )"
remove the first element from result.,result . pop ( )
"get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.",return str ( dict ( self . items ( ) ) )
call the method obj.save with an argument using set to self.using.,obj . save ( using = self . using )
"call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,","result = super ( SortedDict , self ) . pop ( k , * args )"
substitute locale_dir for self.locale_dir.,self . locale_dir = locale_dir
sort all_files and return it.,return sorted ( all_files )
"call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.","args , varargs , varkw , defaults = getargspec ( func )"
from django.conf import settings into default name space.,from django . conf import settings
"if consume_next is true,",if consume_next :
define the method ordered_forms with an argument self.,def ordered_forms ( self ) :
"if return value of the code_changed function is true,",if code_changed ( ) :
"call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.",help_text = help_text_html % force_text ( field . help_text )
"call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.",file_obj = handler . file_complete ( counters [ i ] )
"get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,",if not options [ 'no_startup' ] :
return self._body.,return self . _body
"if refto is contained in known_models,",if refto in known_models :
"for every i in range of integers from 0 to length of result, not included,",for i in range ( len ( result ) ) :
"yield the result. if ImportError exception is caught,",except ImportError :
"call the executor.migration_plan method with targets as the argument, substitute the result for plan.",plan = executor . migration_plan ( targets )
"if value is false or character '@' is not contained in value,",if not value or '@' not in value :
return default.,return default
import module sys.,import sys
"property decorator,",@ property
substitute pubid for self.pubid.,self . pubid = pubid
"__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.","__all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )"
call the function __import__ with an argument name.,__import__ ( name )
value under f.name key of the dta dictionary is an empty list.,data [ f . name ] = [ ]
define the function pgettext with 2 arguments: context and message.,"def pgettext ( context , message ) :"
"try,",try :
define the function get_unbound_function with an argument unbound.,def get_unbound_function ( unbound ) :
append self.fk.name to form._meta.fields.,form . _meta . fields . append ( self . fk . name )
"define the method __setitem__ with 3 arguments: self, key and value.","def __setitem__ ( self , key , value ) :"
"builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.","builtins = { 'True' : True , 'False' : False , 'None' : None }"
"if name is not None,",if name is not None :
delete the entry of self.cleaned_data dictionary under the key field.,del self . cleaned_data [ field ]
from importlib import import_module into default name space.,from importlib import import_module
"if OSError exception is caught,",except OSError :
code is a string 'invalid'.,code = 'invalid'
"form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.","form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )"
"join self.namespaces into a string separated with character ':', substitute it for self.namespace.",self . namespace = ':' . join ( self . namespaces )
define the method validate_key with self class instance and key as arguments.,"def validate_key ( self , key ) :"
substitute result for value under key key of self dictionary.,self [ key ] = result
"join elements of output into a string, return the result.",return '' . join ( output )
define the method close with argument self.,def close ( self ) :
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.,parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
"yield string ""#"" as the result.","yield ""#"""
return wrapper.,return wrapper
return FormSet.,return FormSet
code is a string 'invalid',code = 'invalid'
"get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.",connection = connections [ options [ 'database' ] ]
"call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.","attrs = super ( CharField , self ) . widget_attrs ( widget )"
substitute value under the PREV key of the root dictionary for last.,last = root [ PREV ]
define the function default with 2 arguments value and arg.,"def default ( value , arg ) :"
"while remaining is not equal to integer 0,",while remaining != 0 :
substitute error_class for self.error_class.,self . error_class = error_class
"_assertCountEqual is a strnig ""assertCountEqual"".","_assertCountEqual = ""assertCountEqual"""
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
call self.errors.,self . errors
derive class BaseCOnverter from object base class.,class BaseConverter ( object ) :
"try,",try :
exception_middleware is an empty list.,self . _exception_middleware = [ ]
"if field.rel has an 'to' attribute,","if hasattr ( field . rel , 'to' ) :"
return self._size.,return self . _size
define the function check_for_language with an argument lang_code.,def check_for_language ( lang_code ) :
return boolean True.,return True
substitute last element of bits for taglib.,taglib = bits [ - 1 ]
"if value is not an instance of list type,","if not isinstance ( value , list ) :"
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.,"from django . utils . translation import ugettext_lazy as _ , ungettext_lazy"
substitute conditions_nodelists for self.conditions_nodelists.,self . conditions_nodelists = conditions_nodelists
define the method __deepcopy__ with 2 arguments: self and memo.,"def __deepcopy__ ( self , memo ) :"
substitute complain for __delslice__.,__delslice__ = complain
"define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.","def check ( self , app_configs = None , tags = None , display_num_errors = False ) :"
"with one entry 'status_code' is integer 400, as arguments. call the http.HttpResponseBadRequest function, assign the result to the response.",response = http . HttpResponseBadRequest ( )
define the method prepare_value with arguments self and value.,"def prepare_value ( self , value ) :"
"call the method nodelist.render with an argument context, return the result.",return nodelist . render ( context )
from pprint import pformat into default name space.,from pprint import pformat
"get the value under the app_label key of the directory_created dictionary, if exists and it is false,","if not directory_created . get ( app_label , False ) :"
"if app_config.path is true,",if not app_config . path :
return _localtime.,return _localtime
"link is a list with 4 elements: last, root, key and result.","link = [ last , root , key , result ]"
return value under the key key of dictionary in last element of self.dicts.,return self . dicts [ - 1 ] [ key ]
delete entry under item key of self.dict dictionary.,del self . dict [ item ]
define the method __init__ with 2 arguments: self and timezone.,"def __init__ ( self , timezone ) :"
substitute self for result.parent.,result . parent = self
"if length of bits is not equalt to integer 2,",if len ( bits ) != 2 :
"substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key,","warnings . warn ( 'Cache key will cause errors if used with memcached: ' '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) , CacheKeyWarning )"
"if value is true,",if value :
from django.utils.encoding import force_st into default name space.,from django . utils . encoding import force_str
return self.parent_instance.,return self . parent_instance
return id_.,return id_
substitute self.html_initial_name for name.,name = self . html_initial_name
return value.,return value
return duplicate,return duplicate
define the method __dir__ with an argument self.,def __dir__ ( self ) :
close the process with an argument 1.,sys . exit ( 1 )
return plural_suffix.,return plural_suffix
define the method top with an argument self.,def top ( self ) :
"__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.","__all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )"
"update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,","kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )"
define the method as_text with an argument self.,def as_data ( self ) :
"define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
return lookup_view,return lookup_view
"if i is greater than or equal to the result of the method self.initial_form_count,",if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
"called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form. call the method self.add_fields with arguments form and None.","self . add_fields ( form , None )"
"if not,",else :
"call the function check_errors with argument main_func, substitute the result for wrapped_main_func.",wrapped_main_func = check_errors ( main_func )
"call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.","_ , file_ext = os . path . splitext ( self . file )"
substitute value for url.,url = value
"try,",try :
"FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR, TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re. from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,","from django . template . base import ( ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError , VariableDoesNotExist )"
"if var is false or whitespaces are contained in var,",if not var or ' ' in var :
add key to the self.bad_cookies set.,self . bad_cookies . add ( key )
"call the method MIMEMultipart.__setitem__ with arguments self, name and val.","MIMEMultipart . __setitem__ ( self , name , val )"
substitute object_list for self.object_list.,self . object_list = object_list
"if _default is None,",if _default is None :
convert per_page into an integer and substitute it for self.per_page.,self . per_page = int ( per_page )
return parent.,return parent
"if not,",else :
"if priority is true,",if priority :
"if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,",if self . can_delete and self . _should_delete_form ( form ) :
"call the function supports_color, if evaluates to False,",if not supports_color ( ) :
"try,",try :
"if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,","if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :"
"if self._changed_data is None,",if self . _changed_data is None :
"call the function safe_join with 2 arguments template_dir and template_name, yield the result.","yield safe_join ( template_dir , template_name )"
f.required is boolean False.,f . required = False
"for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.",possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
self.addr is an empty string.,self . addr = ''
"property decorator,",@ property
"in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.",args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
"directories, files are empty lists.","directories , files = [ ] , [ ]"
replace every occurrence of '</' in s with '<\\/'.,"s = s . replace ( '</' , '<\\/' )"
"if ImportError exception is caught,",except ImportError :
"if app_config.models_module is None,",if app_config . models_module is None :
"decorator stringfilter,",@ stringfilter
"call the method self.queryset.none, return the result.",return self . queryset . none ( )
do nothing.,pass
"if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,","if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :"
"if not,",else :
"call the method __init__ with an argument data, from the base class of the class DictWrapper.","super ( DictWrapper , self ) . __init__ ( data )"
"if cookie is an empty string,",if cookie == '' :
substitute cache.get for cache_get.,cache_get = cache . get
"call the method path.decode with an argument fs_encoding, return the result.",return path . decode ( fs_encoding )
"if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,",if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
substitute value under the 'interactive' key of the options dictionary for interactive.,interactive = options . get ( 'interactive' )
"call the method self._should_delete_form with an argument, if it evaluates to true,",if self . _should_delete_form ( form ) :
"call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.","header = self . _convert_to_charset ( header , 'ascii' )"
"define the method strptime with arguments self, value and format.","def strptime ( self , value , format ) :"
"call the method constant_re.findall with an argument t.contents, for every fmatch in the result,",for fmatch in constant_re . findall ( t . contents ) :
"and trimmed, write the result to out. for every part in singular,",for part in singular :
"sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.","return sorted ( value , key = Variable ( arg ) . resolve )"
nonlocal_root is an list with an element root.,nonlocal_root = [ root ]
"call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.","f = super ( ImageField , self ) . to_python ( data )"
"call the method Module_six_moves_urllib_request with an argument: string "".moves.urllib.request"" appended to __name__,","sys . modules [ __name__ + "".moves.urllib_request"" ] = sys . modules [ __name__ + "".moves.urllib.request"" ] = Module_six_moves_urllib_request ( __name__ + "".moves.urllib.request"" )"
"if not,",else :
define the function unlock with argument f.,def unlock ( f ) :
return kwargs.,return kwargs
"get is a tuple containing elements generated by the call to the function pformat with an argument META_override,",meta = ( pformat ( META_override ) if META_override is not None else pformat ( request . META ) )
"year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,","year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]"
"call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.","compiled_result = compile_func ( self , token )"
"otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,","elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
write a newline into a self.stream file stream.,self . stream . write ( '\n' )
"if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,",if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
"take subject elements from p-th to i-th index, substitute it for s.",s = subject [ p : i ]
from math import ceil into default name space.,from math import ceil
"define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.","def __init__ ( self , flo , chunk_size = 64 * 1024 ) :"
substitute input_data for self._input_data.,self . _input_data = input_data
"get name attribute from the instance object, call it and return the result.","return getattr ( instance , name ) ( )"
"try,",try :
"if form._meta.widgets is true,",if form . _meta . widgets :
substitute val_expr for self.val_expr.,self . val_expr = val_expr
"if log is contained in child_loggers,",if log in child_loggers :
"use the result as an key to get the value of the form.data dictionary, assign it value None. use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.","setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
define the function debug with 2 arguments: parser and token.,"def debug ( parser , token ) :"
"if call to the method self._css.get with an argument medium evaluates to false,",if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
"sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',","sorted_issues = [ ( criticals , 'CRITICALS' ) , ( errors , 'ERRORS' ) , ( warnings , 'WARNINGS' ) , ( infos , 'INFOS' ) , ( debugs , 'DEBUGS' ) , ]"
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.,attrs [ 'id' ] = self . html_initial_id
from django.utils import six into default name space.,from django . utils import six
"if pks is true,",if pks :
define the method __init__ with 2 arguments: self and callback.,"def __init__ ( self , callback ) :"
substitute name for self.name.,self . name = name
"try,",try :
"help is a tuple containing a string ""Output the contents of the database as a fixture of the given ""","help = ( ""Output the contents of the database as a fixture of the given "" ""format (using each model's default manager unless --all is "" ""specified)."" )"
"if viewname is not an instance of the six.string_types object,","if not isinstance ( viewname , six . string_types ) :"
"if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.",_BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.,get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.,"lineno , offset = self . getpos ( )"
"call the self._open method with name and mode arguments, return the result.","return self . _open ( name , mode )"
"derive class BaseHandler, derive from the base class object, making this a new style class.",class BaseHandler ( object ) :
import stat.,import stat
"call the getvalue method from the base class of the class PythonSerializer, return the result.","return super ( PythonSerializer , self ) . getvalue ( )"
"if app_config.models_module is None,",if app_config . models_module is None :
"kwargs is an empty dictionary,",kwargs = { }
define the method is_url with arguments self and template.,"def is_url ( self , template ) :"
"try,",try :
convert whitespace character to unicode and substitute the result for space.,"space = unicode ( "" "" )"
"try,",try :
"if self.load_initial_data is not empty,",if self . load_initial_data :
call the function validate_ipv6_address with an argument value.,validate_ipv6_address ( value )
"call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.","migration . merged_operations . extend ( loader . get_migration ( node_app , node_name ) . operations )"
"if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.",is_templatized = file_ext in command . extensions
return saved_instances.,return saved_instances
"divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.","hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )"
"unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,","attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )"
from django.forms.widgets import HiddenInput into default name space.,from django . forms . widgets import HiddenInput
increment i by integer 1.,i += 1
raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.,raise TypeError ( 'In order to allow non-dict objects to be ' 'serialized set the safe parameter to False' )
return an empty string.,return ''
define the method end_serialization with an argument self.,def end_serialization ( self ) :
return WSGIHandler object.,return WSGIHandler ( )
"call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',","parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False , help = 'Display all settings, regardless of their value. ' 'Default values are prefixed by ""###"".' )"
import module warnings.,import warnings
define the method __dir__ with an argument self.,def __dir__ ( self ) :
"'may be ambiguous or it may not exist.', substitute the result for message. params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.","params = { 'datetime' : value , 'current_timezone' : current_timezone }"
"return nothing,",return
"if field_name is false,",if not field_name :
"evaluate self.stream.getvalue method, return the result.",return self . stream . getvalue ( )
"try,",try :
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
return boolean True.,return True
"define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.","def __init__ ( self , host , * args , ** kwargs ) :"
if mw_instance has an attribute named 'process_exception'.,"if hasattr ( mw_instance , 'process_exception' ) :"
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.,"date_keys = ( 'updateddate' , 'pubdate' )"
"if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.",return self . scheme == 'https'
"call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to print the SQL for. Defaults to the ' '""default"" database.' )"
"MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,","MONTHS = { 1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) , 7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) , 12 : _ ( 'December' ) }"
import module re.,import re
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.,"assert match , 'unexpected call to parse_starttag()'"
"call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.",bits = iter ( smart_split ( self . contents ) )
"otherwise if length of app_labels is greater than integer 1,",elif len ( app_labels ) > 1 :
delete logging._handlerList list.,del logging . _handlerList [ : ]
derive the class Command from the BaseCommand class.,class Command ( BaseCommand ) :
input_type is a string 'number'.,input_type = 'number'
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.,raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' )
"in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,","while '%s_%d' % ( new_name , num ) in used_column_names :"
"substitute '%s' in string ' # %s' with line, write it to out file.",out . write ( ' # %s' % line )
"try,",try :
"substitute the result for filters dictionary value under name key. if StandardError, renamed to e, exception is caught,",except StandardError as e :
return string 'https'.,return 'https'
derive the class LoaderOrigin from the Origin base class.,class LoaderOrigin ( Origin ) :
"cached_property decorator,",@ cached_property
return line.,return line
"call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,","super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data , error_class , label_suffix , empty_permitted )"
"convert col_name to lowercase, substitute the result for new_name.",new_name = col_name . lower ( )
"if IndexError, ValueError, KeyError or TypeError exceptions are caught,","except ( IndexError , ValueError , KeyError , TypeError ) :"
substitute library for self._lib.,self . _lib = library
"if name equals a string 'content-disposition',",if name == 'content-disposition' :
"return the result. if type of s equals bytes,",if type ( s ) == bytes :
"if self.first is false,",if not self . first :
"call the function get_commands, call the method keys on the result, substitute sorted result for usage.",usage = sorted ( get_commands ( ) . keys ( ) )
increment stats dictionary value under the HITS key by integer 1.,stats [ HITS ] += 1
"call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.","linebreaks = allow_lazy ( linebreaks , six . text_type )"
"otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,",elif _len ( cache ) >= maxsize :
"if fp is None,",if fp is None :
return boolean False.,return False
define the function urlize with 2 arguments value and autoescape set to None.,"def urlize ( value , autoescape = None ) :"
"call the method cursor.execute with string ""INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)"",","cursor . execute ( ""INSERT INTO %s (cache_key, value, expires) "" ""VALUES (%%s, %%s, %%s)"" % table , [ key , b64encoded , exp ] )"
"called with arguments v and self.encoding, extend the output with the result. join elements of the output into a string, separated with '&', return the result.",return '&' . join ( output )
define the function get_quantifier with 2 arguments ch and input_iter.,"def get_quantifier ( ch , input_iter ) :"
is_required is boolean False.,is_required = False
define the method open with arguments self and mode set to None.,"def open ( self , mode = None ) :"
"call the Warning function with 4 arguments: string ""MIDDLEWARE_CLASSES is not set."", hint tuple containing one string,","return [ Warning ( ""MIDDLEWARE_CLASSES is not set."" , hint = ( ""Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "" ""django.contrib.sessions.middleware.SessionMiddleware, "" ""django.contrib.auth.middleware.AuthenticationMiddleware, and "" ""django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "" ""If your project needs these middleware then you should configure this setting."" ) , obj = None , id = '1_7.W001' , ) ]"
return filename and display_url.,"return filename , display_url"
assign the return value of the function fn to change.,change = fn ( )
raise an ValueError exception.,raise ValueError
"if self.use_argparse is false,",if not self . use_argparse :
increment self.fixture_object_count by objects_in_fixture.,self . fixture_object_count += objects_in_fixture
"open file named file_or_path for reading, store the file object handle in file.","file = open ( file_or_path , 'rb' )"
"return an instance of SafeBytes, created with an argument data.",return SafeBytes ( data )
"raise an TemplateSyntaxError exception with an argument string ""%s requires %d arguments, %d provided"",","raise TemplateSyntaxError ( ""%s requires %d arguments, %d provided"" % ( name , alen - dlen , plen ) )"
"define the method handle_merge with arguments self, loader and conflicts.","def handle_merge ( self , loader , conflicts ) :"
break from the loop execution.,break
"call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:","return numberformat . format ( value , get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) , decimal_pos , get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) , get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) , force_grouping = force_grouping )"
print FASTCGI_HELP to the standard output.,print ( FASTCGI_HELP )
"if self._wrapped is empty,",if self . _wrapped is empty :
output is an empty list.,output = [ ]
"get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.",self . verbosity = int ( options . get ( 'verbosity' ) )
"if output is true,",if output :
"convert object self to a dictionary, return it.",return dict ( self )
data is an empty list.,data = [ ]
define the function decorator_from_middleware with an argument middleware_class.,def decorator_from_middleware ( middleware_class ) :
"and third element of the result of the function sys.exc_info. for every i and handler in enumerated iterable handlers,","for i , handler in enumerate ( handlers ) :"
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.,"from django . http . multipartparser import MultiPartParser , MultiPartParserError"
"opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',","opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }"
"raw string '(?:<br clear=""all"">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE, substitute the result for html_gunk_re. call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',","hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )"
do nothing.,pass
"convert path to a string, substitute the result for path.",path = str ( path )
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.,loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
"call the method self._headers.values, return the result,",return self . _headers . values ( )
"call the method handler.addQuickElement with 2 arguments: string ""category"" and cat.","handler . addQuickElement ( ""category"" , cat )"
"call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.","touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )"
"separated with result of the function conditional_escape with an argument sep, for every args in args_generator, use the result as an argument for the call to the function mark_safe, return the result. define the function linebreaks with 2 arguments: value and autoescape set to boolean False.","def linebreaks ( value , autoescape = False ) :"
"if not,",else :
"if opts.managed is true,",if opts . managed :
seen is an empty set.,seen = set ( )
"where '%s' is replaced with self.__class__.__name__. property decorator,",@ property
"if key_prefix is None,",if key_prefix is None :
"if self._is_rendered is false,",if not self . _is_rendered :
return cookiedict.,return cookiedict
substitute the return value of the function abspathu with self.base_location as argument for self.location.,self . location = abspathu ( self . base_location )
derive the UploadedFile class from the File base class.,class UploadedFile ( File ) :
remove entry at the attr key of the declared_fields dictionary.,declared_fields . pop ( attr )
"call the method sys._getframe with an argument 1, substitute the result for frame.",frame = sys . _getframe ( 1 )
param is None.,param = None
"convert second item to an iterable,",iter ( second_item )
"call the threading.local method, assign the result to trans_real._active.",trans_real . _active = threading . local ( )
"get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.",ignore_patterns = options . get ( 'ignore_patterns' )
"if ValueError exception is caught,",except ValueError :
call the cursor.close method.,cursor . close ( )
"try,",try :
substitute first end elements of s for f.,f = s [ : end ]
"if match is true,",if match :
"call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,","html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )"
"call the method to_python with an argument data from the base class of the class BooleanField, return the result.","return super ( BooleanField , self ) . to_python ( value )"
"append work_file to string '#: ', substitute it for old.",old = '#: ' + work_file [ 2 : ]
"evaluate pickle.loads with argument pickled, return the result.",return pickle . loads ( pickled )
return self.,return self
"convert field into a string and concatenate it to a string '* ', append the result to output.",output . append ( '* %s' % field )
define the function module_has_submodule with 2 arguments: package and module_name.,"def module_has_submodule ( package , module_name ) :"
"if not accept is an empty string. call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,","for accept_lang , unused in parse_accept_lang_header ( accept ) :"
"if errors is true,",if errors :
"if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.",return initial_value != data_value
"for every line in sequence_sql,",for line in sequence_sql :
"call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,",return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
output is an empty list.,output = [ ]
"if 'warning' is contained in kwargs,",if 'warning' in kwargs :
derive the class EscapeBytes from bytes and EscapeData base classes.,"class EscapeBytes ( bytes , EscapeData ) :"
substitute max_value and min_value for self.max_value and self.min_value.,"self . max_value , self . min_value = max_value , min_value"
"if value is not None,",if value is not None :
"if not,",else :
"calculate reminder of division of x by length to_digits, substitute it for digit.",digit = x % len ( to_digits )
close the process with an argument 0.,os . _exit ( 0 )
do nothing.,pass
"otherwise if value is boolean False,",elif value is False :
derive the class HttpResponseNotModified from the HttpResponse base class.,class HttpResponseNotModified ( HttpResponse ) :
"if field_value is not None,",if field_value is not None :
and remove_tags. from django.utils.http import urlquote into default name space.,from django . utils . http import urlquote
"for every app_label in app_labels,",for app_label in app_labels :
"register.tag decorator,",@ register . tag
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.,"signals . got_request_exception . send ( sender = self . __class__ , request = request )"
"convert fist p elements of language to lowercase, append '_' to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
MEMCACHE_MAX_KEY_LENGTH is integer 250.,MEMCACHE_MAX_KEY_LENGTH = 250
INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.,INITIAL_FORM_COUNT = 'INITIAL_FORMS'
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.,"while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :"
"if length of t equals to integer 2,",if len ( t ) == 2 :
define the method file_complete with arguments: self and file_size.,"def file_complete ( self , file_size ) :"
"try,",try :
"call the function errors.error_dict.items, for every field and messages in the result,","for field , messages in errors . error_dict . items ( ) :"
"call the method parser.next_token, substitute the result for token.",token = parser . next_token ( )
"new_method_proxy, __class__ is an property object created with previous result as an argument. call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.",__eq__ = new_method_proxy ( operator . eq )
from itertools import product into default name space.,from itertools import product
from django.db.migrations.writer import MigrationWriter into default name space.,from django . db . migrations . writer import MigrationWriter
"_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,","_moved_attributes = [ MovedAttribute ( ""cStringIO"" , ""cStringIO"" , ""io"" , ""StringIO"" ) , MovedAttribute ( ""filter"" , ""itertools"" , ""builtins"" , ""ifilter"" , ""filter"" ) , MovedAttribute ( ""filterfalse"" , ""itertools"" , ""itertools"" , ""ifilterfalse"" , ""filterfalse"" ) , MovedAttribute ( ""input"" , ""__builtin__"" , ""builtins"" , ""raw_input"" , ""input"" ) , MovedAttribute ( ""map"" , ""itertools"" , ""builtins"" , ""imap"" , ""map"" ) , MovedAttribute ( ""range"" , ""__builtin__"" , ""builtins"" , ""xrange"" , ""range"" ) , MovedAttribute ( ""reload_module"" , ""__builtin__"" , ""imp"" , ""reload"" ) , MovedAttribute ( ""reduce"" , ""__builtin__"" , ""functools"" ) , MovedAttribute ( ""StringIO"" , ""StringIO"" , ""io"" ) , MovedAttribute ( ""UserString"" , ""UserString"" , ""collections"" ) , MovedAttribute ( ""xrange"" , ""__builtin__"" , ""builtins"" , ""xrange"" , ""range"" ) , MovedAttribute ( ""zip"" , ""itertools"" , ""builtins"" , ""izip"" , ""zip"" ) , MovedAttribute ( ""zip_longest"" , ""itertools"" , ""itertools"" , ""izip_longest"" , ""zip_longest"" ) , MovedModule ( ""builtins"" , ""__builtin__"" ) , MovedModule ( ""configparser"" , ""ConfigParser"" ) , MovedModule ( ""copyreg"" , ""copy_reg"" ) , MovedModule ( ""dbm_gnu"" , ""gdbm"" , ""dbm.gnu"" ) , MovedModule ( ""http_cookiejar"" , ""cookielib"" , ""http.cookiejar"" ) , MovedModule ( ""http_cookies"" , ""Cookie"" , ""http.cookies"" ) , MovedModule ( ""html_entities"" , ""htmlentitydefs"" , ""html.entities"" ) , MovedModule ( ""html_parser"" , ""HTMLParser"" , ""html.parser"" ) , MovedModule ( ""http_client"" , ""httplib"" , ""http.client"" ) , MovedModule ( ""email_mime_multipart"" , ""email.MIMEMultipart"" , ""email.mime.multipart"" ) , MovedModule ( ""email_mime_text"" , ""email.MIMEText"" , ""email.mime.text"" ) , MovedModule ( ""email_mime_base"" , ""email.MIMEBase"" , ""email.mime.base"" ) , MovedModule ( ""BaseHTTPServer"" , ""BaseHTTPServer"" , ""http.server"" ) , MovedModule ( ""CGIHTTPServer"" , ""CGIHTTPServer"" , ""http.server"" ) , MovedModule ( ""SimpleHTTPServer"" , ""SimpleHTTPServer"" , ""http.server"" ) , MovedModule ( ""cPickle"" , ""cPickle"" , ""pickle"" ) , MovedModule ( ""queue"" , ""Queue"" ) , MovedModule ( ""reprlib"" , ""repr"" ) , MovedModule ( ""socketserver"" , ""SocketServer"" ) , MovedModule ( ""_thread"" , ""thread"" , ""_thread"" ) , MovedModule ( ""tkinter"" , ""Tkinter"" ) , MovedModule ( ""tkinter_dialog"" , ""Dialog"" , ""tkinter.dialog"" ) , MovedModule ( ""tkinter_filedialog"" , ""FileDialog"" , ""tkinter.filedialog"" ) , MovedModule ( ""tkinter_scrolledtext"" , ""ScrolledText"" , ""tkinter.scrolledtext"" ) , MovedModule ( ""tkinter_simpledialog"" , ""SimpleDialog"" , ""tkinter.simpledialog"" ) , MovedModule ( ""tkinter_tix"" , ""Tix"" , ""tkinter.tix"" ) , MovedModule ( ""tkinter_ttk"" , ""ttk"" , ""tkinter.ttk"" ) , MovedModule ( ""tkinter_constants"" , ""Tkconstants"" , ""tkinter.constants"" ) , MovedModule ( ""tkinter_dnd"" , ""Tkdnd"" , ""tkinter.dnd"" ) , MovedModule ( ""tkinter_colorchooser"" , ""tkColorChooser"" , ""tkinter.colorchooser"" ) , MovedModule ( ""tkinter_commondialog"" , ""tkCommonDialog"" , ""tkinter.commondialog"" ) , MovedModule ( ""tkinter_tkfiledialog"" , ""tkFileDialog"" , ""tkinter.filedialog"" ) , MovedModule ( ""tkinter_font"" , ""tkFont"" , ""tkinter.font"" ) , MovedModule ( ""tkinter_messagebox"" , ""tkMessageBox"" , ""tkinter.messagebox"" ) , MovedModule ( ""tkinter_tksimpledialog"" , ""tkSimpleDialog"" , ""tkinter.simpledialog"" ) , MovedModule ( ""urllib_parse"" , __name__ + "".moves.urllib_parse"" , ""urllib.parse"" ) , MovedModule ( ""urllib_error"" , __name__ + "".moves.urllib_error"" , ""urllib.error"" ) , MovedModule ( ""urllib"" , __name__ + "".moves.urllib"" , __name__ + "".moves.urllib"" ) , MovedModule ( ""urllib_robotparser"" , ""robotparser"" , ""urllib.robotparser"" ) , MovedModule ( ""xmlrpc_client"" , ""xmlrpclib"" , ""xmlrpc.client"" ) , MovedModule ( ""xmlrpc_server"" , ""xmlrpclib"" , ""xmlrpc.server"" ) , MovedModule ( ""winreg"" , ""_winreg"" ) , ]"
"call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,","basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )"
"substitute the result for value. if not,",else :
"if not,",else :
substitute regex for self._regex.,self . _regex = regex
sort elements of list existing.,existing . sort ( )
from django.utils.daemonize import become_daemon into default name space.,from django . utils . daemonize import become_daemon
"decorator python_2_unicode_compatible,",@ python_2_unicode_compatible
"call the method base64.b64encode with argument pickled, substitute the result for b64encoded.",b64encoded = base64 . b64encode ( pickled )
"try,",try :
args_check is a static method.,args_check = staticmethod ( args_check )
define the method __str__ with an argument self.,def __str__ ( self ) :
"row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,",row_data = ( form . cleaned_data [ field ] for field in unique_check if field in form . cleaned_data )
define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
"try,",try :
"raise AttributeError exception,",raise AttributeError
"split ip_str into parts by ':', substitute the result for hextets.",hextets = ip_str . split ( ':' )
substitute super for _super.,_super = super
return output.,return output
do nothing.,pass
"if not,",else :
"raise an exception CommandError, with argument string ""%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name."", where '%r' is replaced with project_name.","raise CommandError ( ""%r conflicts with the name of an existing "" ""Python module and cannot be used as a "" ""project name. Please try another name."" % project_name )"
from django.conf import settings into default name space.,from django . conf import settings
"if NotImplementedError exception is caught,",except NotImplementedError :
call the function check_for_migrations with arguments app_config and connection.,"check_for_migrations ( app_config , connection )"
"otherwise if call to the method finder.find_module with an argument name evaluates to true,",elif finder . find_module ( name ) :
"called with an argument value, return the result. call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.","strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )"
return length of self.items.,return len ( self . items )
"if middleware has an attribute 'process_exception',","if hasattr ( middleware , 'process_exception' ) :"
"if not,",else :
call the method dig1.update with an argument u.,dig1 . update ( u )
return is boolean False.,return False
raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.,raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )
"substitute name, nodelist and parent for self.name, self.nodelist and self.parent.","self . name , self . nodelist , self . parent = name , nodelist , parent"
"raise an EnvironmentError exception with string ""Cache directory '%s' does not exist and could not be created"" as argument,","raise EnvironmentError ( ""Cache directory '%s' does not exist "" ""and could not be created'"" % self . _dir )"
"for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,","for dirpath , dirnames , filenames in os . walk ( ldir ) :"
"raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.","raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' % ( bits [ 0 ] , option ) )"
append '(' to field_type.,field_type += '('
append app_name to the invalid_apps.,invalid_apps . append ( app_name )
from threading import local into default name space.,from threading import local
decorator decorator.,@ decorator
change access mode of path to stat.S_IWRITE mode.,"os . chmod ( path , stat . S_IWRITE )"
"if locale_dir is false,",if not locale_dir :
"try,",try :
"skip this loop iteration,",continue
"define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.","def decr ( self , key , delta = 1 , version = None ) :"
yield string 'month' as an return value of the generator.,yield 'month'
self.m2m_data is None.,self . m2m_data = None
"VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace', SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'. define the method __init__ with 2 arguments: self and tagtype.","def __init__ ( self , tagtype ) :"
if rhs is an instance of SafeData.,"if isinstance ( rhs , SafeData ) :"
"if value is contained in self.empty_values,",if value in self . empty_values :
"call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.","params , varargs , varkw , defaults = getargspec ( func )"
"if self.timezone is false,",if not self . timezone :
define the function deactivate.,def deactivate ( ) :
called with 2 arguments: request and response. call the method response.add_post_render_callback with an argument callback.,response . add_post_render_callback ( callback )
"call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,","six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )"
"call the import_string with argument backend, substitute it for backend_cls.",backend_cls = import_string ( backend )
"call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.","return do_ntranslate ( singular , plural , number , 'ngettext' )"
"otherwise if ch equals a string ':',",elif ch == ':' :
"if leading is true,",if leading :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if dklen is false,",if not dklen :
substitute kwargs for params.,params = kwargs
settings.SITE_ID.,settings . SITE_ID
"if command is contained in parse_until,",if command in parse_until :
"if attr is contained in flags,",if attr in flags :
"yield string ""# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"" as the result.","yield ""# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"""
do nothing.,pass
call the method self._mark_post_parse_error.,self . _mark_post_parse_error ( )
"default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'. define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.","def handle ( self , * fixture_labels , ** options ) :"
"convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.",return header . lower ( ) in self . _headers
"to the negative length of the dir_suffix as the end index and append it to a list, if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns. all_files is an empty list.",all_files = [ ]
"read size number of bytes from self.stream stream, store the result in the result.",result = self . stream . read ( size )
call the method settings._setup.,settings . _setup ( )
"try,",try :
"call the method self.prepend_token with an argument token,",self . prepend_token ( token )
substitute the result for formatted_subject. return first 989 elements of formatted_subject.,return formatted_subject [ : 989 ]
"ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',","ADDRESS_HEADERS = set ( [ 'from' , 'sender' , 'reply-to' , 'to' , 'cc' , 'bcc' , 'resent-from' , 'resent-sender' , 'resent-to' , 'resent-cc' , 'resent-bcc' , ] )"
"FIELD is a field"".","FIELD = ""field"""
"if self._is_rendered is false,",if not self . _is_rendered :
"try,",try :
from django.utils import six into default name space.,from django . utils import six
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.,self . _namespace_dict [ language_code ] = namespaces
"call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.",self . stream = six . StringIO ( stream_or_string )
path is an list containing path.,path = [ path ]
"value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:","form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )"
define the method __bool__ with an argument self.,def __bool__ ( self ) :
"if app_config.label is contained in loader.migrated_apps,",if app_config . label in loader . migrated_apps :
append value to parts.,parts . append ( value )
"get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.","dfmt = config . get ( 'datefmt' , None )"
return an empty list.,return [ ]
"if self.verbosity is greater or equal to integer 1,",if self . verbosity >= 1 :
"call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,",return mark_safe ( six . text_type ( number ) )
"if end is lesser than integer 0,",if end < 0 :
"call the function self.create_var with an argument token, return the result.",return self . create_var ( token )
"call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.","all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )"
"compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',","time_re = re . compile ( r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})' r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?' )"
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
append string 'Field name made lowercase.' to field_notes.,field_notes . append ( 'Field name made lowercase.' )
from django.utils.functional import lazy into default name space.,from django . utils . functional import lazy
call the function sys.exc_info with an argument exc_info.,exc_info = sys . exc_info ( )
substitute len for _len.,_len = len
"call the method self._base_set with string 'set', key, value and timeout as arguments.","self . _base_set ( 'set' , key , value , timeout )"
"try,",try :
"call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.",final_attrs [ 'value' ] = force_text ( value )
create directories from the elements in filename.,os . makedirs ( filename )
"convert result of the method self.__iter__ into a list, return element at the idx index.",return list ( self . __iter__ ( ) ) [ idx ]
return an empty string.,return ''
_supported is None.,_supported = None
"if token.contents equals string 'else',",if token . contents == 'else' :
do nothing.,pass
"try,",try :
"if m is None,",if m is None :
"call the method self.fields.items, for every name and field in the result,","for name , field in self . fields . items ( ) :"
cursor is None.,cursor = None
call the method self.stream.flush.,self . stream . flush ( )
"call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.","obj = template_localtime ( obj , context . use_tz )"
"joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.",self . _callback_str = prefix + '.' + self . _callback_str
return an empty string.,"return """""
"define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.","def __init__ ( self , display_name , loader , name , dirs ) :"
"if self.connection is false,",if not self . connection :
"return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.",return self . level >= ERROR
substitute boundary for self._boundary.,self . _boundary = boundary
"call the method match.span, substitute the result for start an end, respectively.","start , end = match . span ( )"
call the method self.write_items with an argument handler.,self . write_items ( handler )
return nothing.,return
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"If you see valid patterns in the file then the issue is probably caused by a circular import."" raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.",raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
"call the method self.nodelist.render with an argument context, substitute the result output.",output = self . nodelist . render ( context )
"endless loop,",while True :
define the method _itervalues with an argument self.,def _itervalues ( self ) :
logger.disabled is boolean True.,logger . disabled = True
"e.args is a tuple containing string ""Problem installing fixture '%s': %s"", where '%s' is replaced with fixture_file, e.","e . args = ( ""Problem installing fixture '%s': %s"" % ( fixture_file , e ) , )"
return self.var.,return self . var
define the method modified_time with arguments self and name.,"def modified_time ( self , name ) :"
"and unpacked dictionary connection_params. if self.use_ssl and self.use_tls are false,",if not self . use_ssl and self . use_tls :
"define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,","def __init__ ( self , convert_charrefs = False , ** kwargs ) :"
"string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'. define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , parent_instance , * args , ** kwargs ) :"
return boolean True.,return True
define the method close with argument self.,def close ( self ) :
define the method __deepcopy__ with arguments self and memo.,"def __deepcopy__ ( self , memo ) :"
"if cache_choices is not None,",if cache_choices is not None :
"if app_config.models_module is None,",if app_config . models_module is None :
"call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.",parser = parser_class ( lexer . tokenize ( ) )
from django.utils.functional import LazyObject into default name space.,from django . utils . functional import LazyObject
"call the method self.tzname with an argument dt, substitute the result for self._tzname.",self . _tzname = self . tzname ( dt )
"if all_issues is true,",if all_issues :
derive the class ZipArchive from the BaseArchive base class.,class ZipArchive ( BaseArchive ) :
"if locales in not empty,",if locales :
"for every bytes in stream,",for bytes in stream :
"call the method formats.sanitize_separators with an argument value, substitute the result for value.",value = formats . sanitize_separators ( value )
define the function method_decorator with an argument decorator.,def method_decorator ( decorator ) :
import module socket.,import socket
from the base class of the class TypedChoiceField. define the method _coerce with arguments self and value.,"def _coerce ( self , value ) :"
"call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..","return super ( MultiValueDict , self ) . __getitem__ ( key )"
"call the function quote with 2 arguments: result of the function force_str called with an argument url,","return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )"
"define the method pop with 3 arguments: self, key and default set to None.","def pop ( self , key , default = None ) :"
"if IndexError exception is caught,",except IndexError :
timeout is integer 300.,timeout = 300
"call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.","resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )"
define the method create_var with 2 arguments: self and value.,"def create_var ( self , value ) :"
substitute fcntl.LOCK_NB for LOCK_NB.,LOCK_NB = fcntl . LOCK_NB
"and time.tzinfo, return the result. define the method date with an argument self.",def date ( self ) :
call the function check_for_migrations with an arguments app_config and connection.,"check_for_migrations ( app_config , connection )"
"call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.","regex = re . compile ( regex , re . UNICODE )"
"if _localtime is None,",if _localtime is None :
"instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,","return Truncator ( value ) . words ( length , truncate = ' ...' )"
return integer 0 and ch2.,"return 0 , ch2"
return self.html_name.,return self . html_name
define the method encoding with an argument self.,def encoding ( self ) :
"call the function force_text with an argument text, substitute the result for input_val.",input_val = force_text ( text )
"if vary_on is None,",if vary_on is None :
extend comment_notes list with notes.,comment_notes . extend ( notes )
from django.utils.timezone import template_localtime into default name space.,from django . utils . timezone import template_localtime
none_value is a tuple containing 2 elements: integer 0 and string '---'.,"none_value = ( 0 , '---' )"
"join elements of words into a string, return it.",return '' . join ( words )
"if self.decimal_places is not None,",if self . decimal_places is not None :
"if exception OSError, renamed to e, is caught,",except OSError as e :
"if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,",if self . can_delete and self . _should_delete_form ( form ) :
derive the class FileUploadHandler from the object base class.,class FileUploadHandler ( object ) :
"all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,",data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
substitute the last element of parts for parts.,parts = parts [ : - 1 ]
"where '%s' is replaced with first element of bits. otherwise if options equals 'only',",elif option == 'only' :
"for every path in data,",for path in data :
use the result as an argument for the call to the method final_output.extend. add model to known_models set.,known_models . add ( model )
BLOCK_CONTEXT_KEY is a strign 'block_context'.,BLOCK_CONTEXT_KEY = 'block_context'
"if not,",else :
"if not,",else :
substitute the first 255 elements of ext for ext.,ext = ext [ : 255 ]
append form to self.saved_forms.,self . saved_forms . append ( form )
"define the method _has_changed with arguments self, initial and data.","def _has_changed ( self , initial , data ) :"
"get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","return iter ( getattr ( d , _itervalues ) ( ** kw ) )"
"call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.","get_format_lazy = lazy ( get_format , six . text_type , list , tuple )"
set name attribute of self._wrapped object to value.,"setattr ( self . _wrapped , name , value )"
"where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively. if not,",else :
"call the function is_library_missing with an argument taglib_module, if it evaluates to true,",if is_library_missing ( taglib_module ) :
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.,raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
substitute self for result.parent.,result . parent = self
"if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',","if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :"
define the function upath with an argument path.,def upath ( path ) :
"call the method s.encode with an argument string 'utf-8', substitute the result for s.",s = s . encode ( 'utf-8' )
"join together callback.__module__, character ""."" and callback.__name__, substitute the result for lookup_str.","lookup_str = callback . __module__ + ""."" + callback . __name__"
"self.id_for_label is true,",if self . id_for_label :
"dest set to string 'list_tags' and help set to string 'List available tags.'. define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.","def handle ( self , * app_labels , ** options ) :"
"where '%r' are replaced by val and name, respectively. try,",try :
close the file object.,self . file . close ( )
"if value has an attribute 'close',","if hasattr ( value , 'close' ) :"
url is a string 'mailto:%s@%s' formated with local and domain.,"url = 'mailto:%s@%s' % ( local , domain )"
derive the class RadioChoiceInput from the ChoiceInput base class.,class RadioChoiceInput ( ChoiceInput ) :
self.content_length is None.,self . content_length = None
substitute DebugLexer and DebugParser for lexer_class and parser_class.,"lexer_class , parser_class = DebugLexer , DebugParser"
"substitute list_ for first_item and second_item, respectively.","first_item , second_item = list_"
define the method emit with 2 arguments: self and record.,"def emit ( self , record ) :"
django.utils import translation into default namespace.,from django . utils import translation
"return the result. define the method value_from_datadict with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) :"
"call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.","return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )"
"for every format in self.input_formats,",for format in self . input_formats :
return the result. derive the class HiddenInput from the Input base class.,class HiddenInput ( Input ) :
return value,return value
return boolean False.,return False
"call the method self.Z, substitute the result for seconds.",seconds = self . Z ( )
define the method listdir with arguments self and path.,"def listdir ( self , path ) :"
"put loaders elements in a tuple, substitute it for template_source_loaders.",template_source_loaders = tuple ( loaders )
"if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,",if ( domain_part not in self . domain_whitelist and not self . validate_domain_part ( domain_part ) ) :
self.model_name is a string 'cacheentry'.,self . model_name = 'cacheentry'
message is an string 'Unknown field(s) (%s) specified for %s'.,message = 'Unknown field(s) (%s) specified for %s'
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
define the method E with an argument self.,def E ( self ) :
define the method parse with an argument self.,def parse ( self ) :
"default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'. call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',","parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False , help = 'Use natural foreign keys if they are available.' )"
"if not,",else :
"if issues is true,",if issues :
and 3 additional pairs of dictionaries for string. define the function configure_logging with 2 arguments: logging_config and logging_settings.,"def configure_logging ( logging_config , logging_settings ) :"
substitute _itervalues for itervalues.,itervalues = _itervalues
"call the method template.render with an argument context, substitute the result for content.",content = template . render ( context )
"define the method setlistdefault with 3 arguments: self, key and default_list set to None.","def setlistdefault ( self , key , default_list = None ) :"
"if ValueError exception is caught,",except ValueError :
"otherwise if self.file_path file path doesnt exists,",elif not os . path . exists ( self . file_path ) :
"if only_initial is false,",if not only_initial :
"if not,",else :
import imp.,import imp
return an empty string.,return ''
"if self.cdata_tag is not None,",if self . cdata_tag is not None :
"join elements of pieces into a string, return it.",return '' . join ( pieces )
"call the method datetime_safe.new_date with an argument value, substitute the result for value.",value = datetime_safe . new_date ( value )
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"for app_config in return value of the method apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
call the method logging.captureWarnings with an argument boolean True.,logging . captureWarnings ( True )
from django.apps import apps into default name space.,from django . apps import apps
append ch to result.,result . append ( ch )
"if value has an 'close' attribute,","if hasattr ( value , 'close' ) :"
return patterns.,return patterns
self._done is boolean True.,self . _done = True
from shutil import copystat into default name space.,from shutil import copystat
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.,"def join_tokens ( tokens , trim = False ) :"
yield key.,yield key
"open pythonrc, with the file handle renamed to handle perform the following,",with open ( pythonrc ) as handle :
"if TypeError exception is caught,",except TypeError :
"call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,","return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )"
"for every fixture_dir in fixture_dirs,",for fixture_dir in fixture_dirs :
from django.utils import six into default name space.,from django . utils import six
"call the function get_supported_language_variant with an argument lang_code, return the result.",return get_supported_language_variant ( lang_code )
substitute link_next for value under the NEXT key of the link_prev dictionary.,link_prev [ NEXT ] = link_next
"if the UnicodeEncodeError exception is caught,",except UnicodeEncodeError :
"_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.","_urllib_parse_moved_attributes = [ MovedAttribute ( ""ParseResult"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""SplitResult"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""parse_qs"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""parse_qsl"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urldefrag"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urljoin"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urlparse"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urlsplit"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urlunparse"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""urlunsplit"" , ""urlparse"" , ""urllib.parse"" ) , MovedAttribute ( ""quote"" , ""urllib"" , ""urllib.parse"" ) , MovedAttribute ( ""quote_plus"" , ""urllib"" , ""urllib.parse"" ) , MovedAttribute ( ""unquote"" , ""urllib"" , ""urllib.parse"" ) , MovedAttribute ( ""unquote_plus"" , ""urllib"" , ""urllib.parse"" ) , MovedAttribute ( ""urlencode"" , ""urllib"" , ""urllib.parse"" ) , MovedAttribute ( ""splitquery"" , ""urllib"" , ""urllib.parse"" ) , ]"
import module sys.,import sys
"call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,",return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
"if not, isolated_context is boolean False. get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.","namemap = options . get ( 'with' , { } )"
"if string ':::' is contained in ip_str,",if ':::' in ip_str :
"call the self._lock.reader method, with the result perform the following,",with self . _lock . reader ( ) :
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',","parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' , help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )"
"define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,","def __init__ ( self , request , dict_ = None , processors = None , current_app = None , use_l10n = None , use_tz = None ) :"
"for every punctuation in TRAILING_PUNCTUATION,",for punctuation in TRAILING_PUNCTUATION :
"convert values into a list, substitute it for value.",values = list ( values )
"if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,","if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :"
define the function _findall with 2 arguments text and substr.,"def _findall ( text , substr ) :"
define the method run_from_argv with arguments self and argv.,"def run_from_argv ( self , argv ) :"
"sum index and length of self._boundary, substitute the result for next.",next = index + len ( self . _boundary )
"for every date_key in date_keys,",for date_key in date_keys :
return boolean True.,return True
return a string '%02d' formated with self.data.minute.,return '%02d' % self . data . minute
from django.core.management.templates import TemplateCommand into default name space.,from django . core . management . templates import TemplateCommand
substitute return value of function no_style for style.,style = no_style ( )
"call the self._cache.get method with argument key, substitute the result for val.",val = self . _cache . get ( key )
daemonize is boolean False.,daemonize = False
"call the function get_format_modules with an argument lang, for every module in the result,",for module in get_format_modules ( lang ) :
"return a string ""%s.%s"" formated with first dot package elements and name.","return ""%s.%s"" % ( package [ : dot ] , name )"
"call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.",nodes . extend ( node . get_nodes_by_type ( nodetype ) )
from django.utils import six into default name space.,from django . utils import six
"call the method self.decompress with an argument value, substitute the result for value.",value = self . decompress ( value )
"define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.","def register_serializer ( format , serializer_module , serializers = None ) :"
"try,",try :
define the function write with an argument data.,def write ( data ) :
call the method self.indent with argument integer 1.,self . indent ( 1 )
"get type of self, call it and substitute the result for result.",result = type ( self ) ( )
"call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.",msg = self . style . HTTP_REDIRECT ( msg )
value under the 'blank' key of the extra_params dictionary is boolean True.,extra_params [ 'blank' ] = True
"try,",try :
"if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.","return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )"
define the method __deepcopy__ with 2 arguments: self and memodict.,"def __deepcopy__ ( self , memodict ) :"
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
"define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.","def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :"
"append value to the '-', substitute it for value.",value = '-' + value
define method _get_height with self class instance as the argument.,def _get_height ( self ) :
"define the method sync_apps with self class instance, connection and app_labels as arguments.","def sync_apps ( self , connection , app_labels ) :"
"second 2 elements of seventh element of hextets converted into hexadecimal number, first 2 elements of eight element of hextets converted into hexadecimal number, second 2 elements of eight element of hextets converted into hexadecimal number. join first 5 elements of hextets into a string, separated by ':', substitute the result for result.",result = ':' . join ( hextets [ 0 : 6 ] )
substitute last element of colors for value under the 'bg' key of definition dictionary.,definition [ 'bg' ] = colors [ - 1 ]
"with call to the function transaction.atomic with using set to connection.alias as argument,",with transaction . atomic ( using = connection . alias ) :
do nothing.,pass
"string joined from invalided_apps list and separated with string ', '. if not,",else :
return attrs.,return attrs
"get the value under the 'no_location' key of the options dictionary, if it is true,",if options . get ( 'no_location' ) :
"read the whole file f, substitute the result for content.",content = f . read ( )
call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.,"pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )"
yield node.,yield node
"for every v in value, return the list of results. call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.","return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )"
"separated by newline, substitute it for msgs. if not,",else :
"call the method to_python with an argument value from the base class of the TimeField class, return the result.","return super ( TimeField , self ) . to_python ( value )"
return None.,return None
"perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.",result |= x ^ y
import module types.,import types
define the function make_naive with 2 arguments: value and timezone.,"def make_naive ( value , timezone ) :"
substitute stat.st_mtime for mtime.,mtime = stat . st_mtime
"join the resulting sequence in a string with comma as separator, assign the string to cc. substitute response dictionary value under the key 'Cache-Control' for cc.",response [ 'Cache-Control' ] = cc
from django.db.migrations.autodetector import MigrationAutodetector into default name space.,from django . db . migrations . autodetector import MigrationAutodetector
"if changed is false,",if not changed :
processors is an empty list.,processors = [ ]
"""django.core.serializers.python"" for ""python"", ""django.core.serializers.json"" for ""json"", and ""django.core.serializers.pyyaml"" for ""yaml"". _serializers is an empty dictionary.",_serializers = { }
from django.apps import apps into default name space.,from django . apps import apps
"for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,","return ""|"" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )"
"from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.","from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import"
"create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.","new_filenames = [ filename . __file__ for filename in new_modules if hasattr ( filename , '__file__' ) ]"
"append arg to ',', substitute the result for arg.","arg = ',' + arg"
raise an TemplateDoesNotExist exception with an argument name.,raise TemplateDoesNotExist ( name )
"endless loop,",while True :
"call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.",return force_text ( gettext ( message ) )
"call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.","self = tuple . __new__ ( cls , * args , ** kwargs )"
append att_name to used_column_names list.,used_column_names . append ( att_name )
renamed is boolean False.,renamed = False
return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'. for every relobj in iterator generated from the field.name attribute of the obj object.,"for relobj in getattr ( obj , field . name ) . iterator ( ) :"
"if not,",else :
context_extras is an empty dictionary.,context_extras = { }
"otherwise if intrans is true,",elif intrans :
derive the class BaseForm from the base class object.,class BaseForm ( object ) :
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.,class HttpResponseRedirect ( HttpResponseRedirectBase ) :
"if not,",else :
"call the method sys.stderr.write with an argument string "" http://www.saddi.com/software/flup/ If you've already\n"".","sys . stderr . write ( "" http://www.saddi.com/software/flup/ If you've already\n"" )"
"append new line to line, write it to self.stdout stream.","self . stdout . write ( ""%s\n"" % line )"
"call the method self.nodelist_false.render with an argument context, return the result.",return self . nodelist_false . render ( context )
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
"if ignore_failures is true,",if ignore_failures :
return self.,return self
"from django.utils.encoding import force_str, force_text and DEFAULT_LOCALE_ENCODING into default name space.","from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING"
"help is a tuple containing a string ""Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory."".","help = ( ""Creates a Django app directory structure for the given app "" ""name in the current directory or optionally in the given "" ""directory."" )"
write a white space to the self.stream file stream.,"self . stream . write ( "" "" )"
"decorator stringfilter,",@ stringfilter
_empty_value is None.,_empty_value = None
"call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.","output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )"
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
"call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.",return WEEKDAYS [ self . data . weekday ( ) ]
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
self._cached_loaders is an empty list.,self . _cached_loaders = [ ]
"if file self is not closed,",if not self . closed :
"_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:","_urllib_response_moved_attributes = [ MovedAttribute ( ""addbase"" , ""urllib"" , ""urllib.response"" ) , MovedAttribute ( ""addclosehook"" , ""urllib"" , ""urllib.response"" ) , MovedAttribute ( ""addinfo"" , ""urllib"" , ""urllib.response"" ) , MovedAttribute ( ""addinfourl"" , ""urllib"" , ""urllib.response"" ) , ]"
from django.utils import six into default name space.,from django . utils import six
convert data into boolean and substitute it for data.,data = bool ( data )
"use the result as an argument for the call to the function mark_safe, return the result. define the function format_html_join with 3 arguments: sep, format_string and args_generator.","def format_html_join ( sep , format_string , args_generator ) :"
"call the function vars with an argument options, substitute the result for cmd_options.",cmd_options = vars ( options )
"try,",try :
"hex_format_string is a string ""%%0%ix"" formated with hlen multiplied with integer 2.","hex_format_string = ""%%0%ix"" % ( hlen * 2 )"
"try,",try :
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.,context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
"if AttributeError exception is raised,",except AttributeError :
from django.utils import six into default name space.,from django . utils import six
"call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,","return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )"
content_length is integer 0.,content_length = 0
import module json.,import json
derive the class EmailBackend from the BaseEmailBackend base class.,class EmailBackend ( BaseEmailBackend ) :
"substitute link for link_prev, link_next, key and result, respectively.","link_prev , link_next , key , result = link"
remove the first element from str_number.,str_number = str_number [ 1 : ]
"if slots is not None,",if slots is not None :
"call the DefaultStorage method, substitute the result for default_storage.",default_storage = DefaultStorage ( )
self.path is an empty string.,self . path = ''
define the method get_unique_error_message with 2 arguments: self and unique_check.,"def get_unique_error_message ( self , unique_check ) :"
"data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',","data = { ""model"" : smart_text ( obj . _meta ) , ""fields"" : self . _current , }"
"get ""_decorated_function"" attribute from func object, if it exists substitute __name__ field of the result for name,","name = getattr ( func , ""_decorated_function"" , func ) . __name__"
import module keyword.,import keyword
self.abstract is boolean False.,self . abstract = False
derive the CommandParser class from the ArgumentParser base class.,class CommandParser ( ArgumentParser ) :
"call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,","git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = True , cwd = repo_dir , universal_newlines = True )"
year_field is a string '%s_year'.,year_field = '%s_year'
"digits is a string ""0123456789abcdefghijklmnopqrstuvwxyz"".","digits = ""0123456789abcdefghijklmnopqrstuvwxyz"""
"cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.",r = r [ : - 6 ] + 'Z'
"try,",try :
substitute third element of url_fields for second element of url_fields.,url_fields [ 1 ] = url_fields [ 2 ]
from django.core.mail import get_connection into default name space.,from django . core . mail import get_connection
"if bytes is false,",if not bytes :
"divide j by integer 7, substitute the floored result for week_number.",week_number = j // 7
self._leftover is an empty string.,self . _leftover = b''
"for v in return value of the function match.groups, convert v into an integer and append i to a list,","year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]"
derive the class RenderContext from the BaseContext base class.,class RenderContext ( BaseContext ) :
return string 'th'.,return 'th'
"if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,",if DEFAULT_CACHE_ALIAS not in settings . CACHES :
"convert tag to lowercase if it is not equal to self.cdata_tag,",if tag . lower ( ) != self . cdata_tag :
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.,"_builtin_context_processors = ( 'django.core.context_processors.csrf' , )"
"call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.","now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )"
"""Use BaseCommand instead, which takes no arguments by default."" and RemovedInDjango20Warning. call the __init__ method from the base class of the NoArgsCommand class.","super ( NoArgsCommand , self ) . __init__ ( )"
"if self.file_path is not an instance of six.string_types,","if not isinstance ( self . file_path , six . string_types ) :"
"call the function bytes with an argument value, return the result.",return bytes ( value )
"if template_name_list is false,",if not template_name_list :
"if not,",else :
call the method cache.clear.,cache . clear ( )
call the method apps.get_app_config with an argument app_label.,apps . get_app_config ( app_label )
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,",format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
"substitute them for app_label and migration_name, respectively. executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.",executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
define the function _checkLevel with an argument level.,def _checkLevel ( level ) :
"self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,","self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )"
"call the method __delitem__ from the base class of the class SortedDict, with an argument key.","super ( SortedDict , self ) . __delitem__ ( key )"
response.content is bytes empty string.,response . content = b''
where '%s' is replaced with name. args is an empty list.,args = [ ]
if language_code is not contained in self._reverse_dict,if language_code not in self . _reverse_dict :
"with 2 arguments: self.prog_name and first element of options.args. otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'",elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
"if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.","exts = extensions if extensions else [ 'html' , 'txt' ]"
from django.utils import six into default name space.,from django . utils import six
messages is an instance of the ValidationError class created with an argument messages.,messages = ValidationError ( messages )
yield a tuple with 2 elements: an empty string and self.field.empty_label.,"yield ( """" , self . field . empty_label )"
"replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),","self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )"
"append ')' to third element of bit, substitute it for sentinal.",sentinal = bit [ 2 ] + ')'
"split file by ',' character, apply on its every element a lambda function which takes an argument x,","extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )"
"call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.",ipv4_unpacked = _unpack_ipv4 ( ip_str )
"where '%s' is replaced with value under the 'addrport' key of the options dictionary. call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.","self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )"
"call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.","final_attrs = self . build_attrs ( attrs , name = name )"
return scrip_name.decode method result called with UTF_8 as argument.,return script_name . decode ( UTF_8 )
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.,raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
return the value under the self.data.month key of the MONTHS_3 dictionary.,return MONTHS_3 [ self . data . month ]
"return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.","return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )"
define the function available_attrs with an argument fn.,def available_attrs ( fn ) :
"if to_lower is true,",if to_lower :
return an empty dictionary.,return { }
define the method open with arguments self and mode set to None.,"def open ( self , mode = None ) :"
"if self.localize is true,",if self . localize :
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.,Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
"if vale is not an instance of ConvertingDict and value is an instance of dict type,","if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :"
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.,"from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT"
return string 'rd'.,return 'rd'
define the function blankout with 2 arguments: src and char.,"def blankout ( src , char ) :"
"if ImportError exception is caught,",except ImportError :
"try,",try :
"call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.",state_frame = self . _get_context_stack_frame ( context )
"define the method render_node with 3 arguments: self, node and context.","def render_node ( self , node , context ) :"
from logging import NullHandler.,from logging import NullHandler
do nothing.,pass
define the method lex with 2 arguments self and text.,"def lex ( self , text ) :"
assign the handle to stream. old_field_name is None.,old_field_name = None
define the method __init__ with 2 arguments self and file.,"def __init__ ( self , file ) :"
otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix. substitute empty_permitted for self.empty_permitted.,self . empty_permitted = empty_permitted
define the method as_data with an argument self.,def as_data ( self ) :
"with new_path and self.style.NOTICE, respectively, write it to self.stderr stream. if self.paths_to_remove is true,",if self . paths_to_remove :
"while first element of s is equal to bytes string ';',",while s [ : 1 ] == b';' :
"for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.","doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]"
define the function urlsafe_base64_decode with an argument s.,def urlsafe_base64_decode ( s ) :
substitute old_attr for self.attr.,self . attr = old_attr
"sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,",response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
define the method _iterlists with an argument self.,def _iterlists ( self ) :
"try,",try :
append form to self.saved_forms.,self . saved_forms . append ( form )
"for every entry in os.listdir function return value called with the argument path,",for entry in os . listdir ( path ) :
from django.db import models into default name space.,from django . db import models
"for every condition and nodelist in self.conditions_nodelists,","for condition , nodelist in self . conditions_nodelists :"
call the method instance.save.,instance . save ( )
"if ImportError exception is caught,",except ImportError :
"if settings.STATIC_URL is None,",if settings . STATIC_URL is None :
"if parse_until is true,",if parse_until :
"decorator function register.filter with 2 arguments string ""timesince"" and is_safe set to boolean False.","@ register . filter ( ""timesince"" , is_safe = False )"
BM_compatible is boolean True.,BM_compatible = True
define the method filter with 2 arguments: self and record.,"def filter ( self , record ) :"
"if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META. if Exception exception is caught,",except Exception :
"define the method __init__, with 3 arguments: self, m2m and data set None.","def __init__ ( self , obj , m2m_data = None ) :"
"define the method __get__ with 3 arguments: self, instance and owner.","def __get__ ( self , instance , owner ) :"
call the function warnings.warn with 3 arguments:,"warnings . warn ( ""resolve_variable() is deprecated. Use django.template."" ""Variable(path).resolve(context) instead"" , RemovedInDjango20Warning , stacklevel = 2 )"
call the self.validate_key method with argument key.,self . validate_key ( key )
renamed is boolean True.,renamed = True
from django.utils.functional import cached_property into default name space.,from django . utils . functional import cached_property
"get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.",file_name = disposition . get ( 'filename' )
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.,"from django . utils . datastructures import MultiValueDict , ImmutableList"
"if not,",else :
define the method hidden_fields with an argument self.,def hidden_fields ( self ) :
"if other is an instance of Promise class,","if isinstance ( other , Promise ) :"
"join top_dir and relative_dir into a file path, substitute it for target_dir.","target_dir = path . join ( top_dir , relative_dir )"
"if directory is not an directory,",if not os . path . isdir ( directory ) :
"try,",try :
"substitute the result for RFC1123_DATE. call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,","RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )"
"write the result to self.stdout. for every operation in migration.operations,",for operation in migration . operations :
"call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.","return do_ntranslate ( singular , plural , number , 'ungettext' )"
return potfiles.,return potfiles
call the method self._callback_strs.add with an argument lookup_str.,self . _callback_strs . add ( lookup_str )
"try,",try :
"for every sql in sql_list,",for sql in sql_list :
return current.,return current
"if model has an 'natural_key' attribute,","if hasattr ( model , 'natural_key' ) :"
"for every date_check in all_date_checks,",for date_check in all_date_checks :
inputs is an empty list.,inputs = [ ]
return value.,return value
"call the get_serializer function with an argument format, call the return value object and substitute it for s.",s = get_serializer ( format ) ( )
"if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.",use_grouping = use_grouping and grouping > 0
define the method _iteritems with an argument self.,def _iteritems ( self ) :
substitute code for self.code.,self . code = code
"if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,",if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
from django.utils import six into default name space.,from django . utils import six
"if settings.DEBUG is true,",if settings . DEBUG :
"if iterable is true, otherwise use an empty list as an argument. define the method add with 2 arguments: self and item.","def add ( self , item ) :"
"if request has an attribute 'session',","if hasattr ( request , 'session' ) :"
"if ValueError or TypeError exceptions occurred,","except ( ValueError , TypeError ) :"
"try,",try :
return boolean True.,return True
return s.,return s
"if self._varlist is true,",if self . _varlist :
from django.conf import settings into default name space.,from django . conf import settings
"if csrf_token equals string 'NOTPROVIDED',",if csrf_token == 'NOTPROVIDED' :
"execute code statement """"""exec _code_ in _globs_, _locs_"""""".","exec ( """"""exec _code_ in _globs_, _locs_"""""" )"
"extend replaces list with migration.replaces,",replaces . extend ( migration . replaces )
"yield string ""# * Rearrange models' order"" as the result.","yield ""# * Rearrange models' order"""
return the result. define the function pgettext with 2 arguments: context and message.,"def pgettext ( context , message ) :"
"call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.",basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
replace all the occurrences of '__' with '_' in new_name.,"new_name = new_name . replace ( '__' , '_' )"
"call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,","lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )"
"move integer 1 left for 20 bits, substitute the result for MB.",MB = 1 << 20
"if not,",else :
call the method self.can_read.acquire.,self . can_read . acquire ( )
breaks from the smallest enclosing loop.,break
"if '_meta' is not an attribute of obj,","if not hasattr ( obj , ""_meta"" ) :"
substitute input_formats for self.input_formats.,self . input_formats = input_formats
"call the self.style.HTTP_INFO with an argument msg, substitute it for msg.",msg = self . style . HTTP_INFO ( msg )
"print a string ""In the tar file %s the member %s is invalid: %s"", where '%s' is substituted with: name, member.name and exc, respectively.","print ( ""In the tar file %s the member %s is invalid: %s"" % ( name , member . name , exc ) )"
"define the method __init__ with 3 arguments self, states and first.","def __init__ ( self , states , first ) :"
"for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale', into a valid file path, substitute it for globalpath. append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.",return [ globalpath ] + list ( settings . LOCALE_PATHS )
self.changed_objects is an empty list.,self . changed_objects = [ ]
update default_attrs dictionary with attrs entry.,default_attrs . update ( attrs )
break the loop execution.,break
"call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.",return self . __cast ( ) != other
"if pot_path file path exists,",if os . path . exists ( pot_path ) :
"and self.code equals to other.code, return boolean True, otherwise return boolean False. decorator deconstructible,",@ deconstructible
call self._delete method with argument fname.,self . _delete ( fname )
self._container is an list.,self . _container = [ ]
"get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.",self . cookies [ key ] [ 'domain' ] = domain
"if self.old_timezone is None,",if self . old_timezone is None :
BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.,BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
"if IndexError exception is caught,",except IndexError :
"with value result of the conditional_escape function called with an argument v for key k. call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,","return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )"
"call the method writer.as_string, substitute the result for migration_string.",migration_string = writer . as_string ( )
"convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.",content_length = int ( environ . get ( 'CONTENT_LENGTH' ) )
if app_config.models_module is None or app_config is contained in excluded_apps,if app_config . models_module is None or app_config in excluded_apps :
"call the function get_language, substitute the result for language_code.",language_code = get_language ( )
"otherwise if _locs_ is None,",elif _locs_ is None :
"raise the exception ValueError, with string as argument, ""@python_2_unicode_compatible cannot be applied"",","raise ValueError ( ""@python_2_unicode_compatible cannot be applied "" ""to %s because it doesn't define __str__()."" % klass . __name__ )"
"if parser doesnt have an '_namedCycleNodes' attribute,","if not hasattr ( parser , '_namedCycleNodes' ) :"
"property getter decorator,",@ property
widget is an instance of HiddenInput class,widget = HiddenInput
"if serializers is None and _serializers is false,",if serializers is None and not _serializers :
"if data is true,",if data :
"if error_message is not None,",if error_message is not None :
substitute subject for self.subject.,self . subject = subject
"call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,","parser . add_argument ( 'app_label' , nargs = '?' , help = 'App label of an application to synchronize the state.' )"
call the __init__ method with self and params arguments from the base class BaseCache.,"BaseCache . __init__ ( self , params )"
"and elements of parse_until joined into a string, separated by string ', '. raise an self.source_error exception with 2 arguments: source and msg.","raise self . source_error ( source , msg )"
call the function update_wrapper with 2 arguments: _wrapper and func.,"update_wrapper ( _wrapper , func )"
"return an empty string,",return ''
"if StandardError, renamed to e, exception is caught,",except StandardError as e :
"for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.",return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
"call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to ' 'open a shell. Defaults to the ""default"" database.' )"
derive class MovedAttribute from the _LazyDescr base class.,class MovedAttribute ( _LazyDescr ) :
substitute first element of nonlocal_root for root.,root = nonlocal_root [ 0 ]
call the method errors.extend with argument new_errors.,errors . extend ( new_errors )
"use the result as an argument for the call to the self.stdout.write. call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.","created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )"
"call the function warnings.warn with 3 arguments: string ""django.utils.unittest will be removed in Django 1.9."",","warnings . warn ( ""django.utils.unittest will be removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"
substitute .error_class for self.error_class.,self . error_class = error_class
"if filename ends with '.pyo', '.pyc' or '.py.class',","if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :"
"if callback is of instance types.FunctionType,","if isinstance ( callback , types . FunctionType ) :"
"attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.","attachment = MIMEBase ( basetype , subtype )"
"call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.",qs = qs . order_by ( self . model . _meta . pk . name )
"if id_ is true,",if id_ :
__expire_info is an empty dictionary.,_expire_info = { }
"self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,",self . plural = lambda n : int ( n != 1 )
call the function super_set with 2 arguments: key and value.,"super_set ( key , value )"
extend the value under the field key of the self._errors dictionary with error_list.,self . _errors [ field ] . extend ( error_list )
"if IndexError exception is caught,",except IndexError :
from email.header import Header into default name space.,from email . header import Header
"call the function re.compile with an argument raw string '(?:W/)?""((?:\\.|[^""])*)""', substitute the result for ETAG_MATCH.","ETAG_MATCH = re . compile ( r'(?:W/)?""((?:\\.|[^""])*)""' )"
"raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.",raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
"try,",try :
define the method __init__ with arguments self and attrs set to None.,"def __init__ ( self , attrs = None ) :"
self._empty is boolean False.,self . _empty = False
"call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.","result = user_function ( * args , ** kwds )"
substitute settings.TIME_FORMAT for arg.,arg = settings . TIME_FORMAT
"if middleware has an attribute 'process_request',","if hasattr ( middleware , 'process_request' ) :"
internal_use_only is a boolean False.,internal_use_only = False
substitute model._meta for opts.,opts = model . _meta
"call the method bf.css_classes, substitute the result for css_classes.",css_classes = bf . css_classes ( )
define the method _format_value with 2 arguments: self and value.,"def _format_value ( self , value ) :"
"convert var into an floating point number, substitute it for self.literal.",self . literal = float ( var )
"raise an CommandError with an argument string ""%s. Are you sure your INSTALLED_APPS setting is correct?"", with '%s' replaced by e.","raise CommandError ( ""%s. Are you sure your INSTALLED_APPS setting is correct?"" % e )"
if six.PY2 is true and rawdata is an instance of the type six.text_type.,"if six . PY2 and isinstance ( rawdata , six . text_type ) :"
"remove first element from non_capturing_groups, substitute it for start.",start = non_capturing_groups . pop ( )
"get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,",id_ = widget . attrs . get ( 'id' ) or self . auto_id
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.,"from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner"
return result.,return result
"add self.default_validators and validators, substitute the result for self.validators.",self . validators = self . default_validators + validators
"with return value of the function io.open with fname and string 'rb' as arguments, named as f,","with io . open ( fname , 'rb' ) as f :"
derive the class Command from the base class BaseCommand.,class Command ( BaseCommand ) :
define the method convert with 2 arguments: self and value.,"def convert ( self , value ) :"
import module datetime.,import datetime
"call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,",for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
"if value under the name key of self.cleaned_data dictionary is not None,",if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
"for every obj in result of the call to the method self.queryset.all,",for obj in self . queryset . all ( ) :
"for every h in handlers,",for h in handlers :
"convert to integer the value of dictionary cc under the key 'max-age', and return it",return int ( cc [ 'max-age' ] )
define the method render with 2 arguments self and context.,"def render ( self , context ) :"
define the method _get_validation_exclusions with an argument self.,def _get_validation_exclusions ( self ) :
self._unget_history is an empty list.,self . _unget_history = [ ]
value is None.,value = None
return value under the key key of self dictionary.,return self [ key ]
"for every form in self.extra_forms,",for form in self . extra_forms :
"sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.","sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist , indent , indent )"
"call the method _time.localtime with an argument stamp, substitute the result for tt.",tt = _time . localtime ( stamp )
"endless loop,",while 1 :
temp_lib is an instance of Library class.,temp_lib = Library ( )
"define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.","def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :"
substitute module for the value under the format key of the _serializers dictionary.,_serializers [ format ] = module
"call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.",sub_tried = e . args [ 0 ] . get ( 'tried' )
return initial.,return initial
define the method _get_regex an argument self.,def _get_regex ( self ) :
"if fixture_name is an absolute file path,",if os . path . isabs ( fixture_name ) :
"for every w in self.widgets,",for w in self . widgets :
return filenames.,return filenames
call the method __init__ with an argument initlist from the base class of the class ErrorList.,"super ( ErrorList , self ) . __init__ ( initlist )"
"if processors is None,",if processors is None :
def _get_post method with self class instance as the argument.,def _get_post ( self ) :
"where '%s' is replaced with elemnts of token from upto index till the end, and token. substitute filters for self.filters.",self . filters = filters
"if evaluation of the function find_command with self.program as argument equals to None,",if find_command ( self . program ) is None :
"if self.active_writers and self.waiting_writers both equal to integer 0,",if self . active_writers == 0 and self . waiting_writers == 0 :
"if self.translate is true,",if self . translate :
"if value is contained in self.empty_values,",if value in self . empty_values :
"if self has an 'error_dict' attribute,","if hasattr ( self , 'error_dict' ) :"
raise an exception.,raise
"if self has an '_get' attribute,","if hasattr ( self , '_get' ) :"
"decimal_places set to None, unpacked list args and unpacked dictionary kwargs. substitute max_digits and decimal_places for self.max_digits and self.decimal_places.","self . max_digits , self . decimal_places = max_digits , decimal_places"
"if call to the function module_has_submodule with app_config.module and ""management"" evaluates to True.","if module_has_submodule ( app_config . module , ""management"" ) :"
"call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.",ext = self . splitext ( guessed_filename ) [ 1 ]
lines is an empty list.,lines = [ ]
"and re.IGNORECASE, substitute the result for simple_url_re. call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.",simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
"if UnicodeDecodeError exception is caught,",except UnicodeDecodeError :
for every app_name in app_names.,for app_name in app_names :
return nothing.,return
"for every middleware_method in self._response_middleware,",for middleware_method in self . _response_middleware :
"call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,","if router . allow_migrate ( self . using , obj . object . __class__ ) :"
"define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.","def __init__ ( self , obj , * args ) :"
"if KeyError exception is caught,",except KeyError :
"if self is false,",if not self :
return self._callback.,return self . _callback
"call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.",table = connections [ db ] . ops . quote_name ( self . _table )
"if Exception, renamed to e, exception is caught,",except Exception as e :
"get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.",view_name = callback . __class__ . __name__ + '.__call__'
"call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,","v = datetime . datetime . strptime ( force_str ( value ) , input_format )"
"call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',","parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' , help = 'Run only checks labeled with given tag.' )"
break from the smallest enclosing loop execution.,break
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result. define the method modified_time with arguments self and name.","def modified_time ( self , name ) :"
"if not,",else :
self.verbose_name is a string 'cache entry'.,self . verbose_name = 'cache entry'
"get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.",self . verbosity = int ( options . get ( 'verbosity' ) )
"call the function hook with an argument entry, substitute the result for finder.",finder = hook ( entry )
"if node is not an instance of ExtendsNode,","if not isinstance ( node , ExtendsNode ) :"
"if index is not None and index is smaller than return value of the method self.initial_form_count,",if index is not None and index < self . initial_form_count ( ) :
call the function six.reraise with unpacked list exc_info as an argument.,six . reraise ( * exc_info )
"if type of result is ConvertingDict, ConvertingList or ConvertingTuple,","if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :"
"try,",try :
"finally perform,",finally :
"assign the result to the value under the string "".moves.urllib_error"" appended to __name__ key of the sys.modules dictionary, and to the value under the string "".moves.urllib.error"" appended to __name__ key of the sys.modules dictionary. derive class Module_six_moves_urllib_request from the _LazyModule base class.",class Module_six_moves_urllib_request ( _LazyModule ) :
"call the function datetime.date.today, substitute the year field of the result for this_year.",this_year = datetime . date . today ( ) . year
return boolean True.,return True
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"if self.file_permissions_mode is not None,",if self . file_permissions_mode is not None :
close the _file file.,_file . close ( )
register is an instance of Library class.,register = Library ( )
"strip url of surrounding '/' characters, substitute it for tmp.",tmp = url . rstrip ( '/' )
"move integer 1 left for 40 bits, substitute the result for TB.",TB = 1 << 40
"skip this loop iteration,s",continue
"call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.","return timezone . localize ( value , is_dst = None )"
"set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,","wsgi_opts [ 'bindAddress' ] = ( options [ ""host"" ] , int ( options [ ""port"" ] ) )"
"convert return value of the function time.time to an integer, increment timeout by it.",timeout += int ( time . time ( ) )
return boolean False.,return False
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"if p is greater or equal to integer 0,",if p >= 0 :
"if key is not contained in default_settings,",if key not in default_settings :
"if ValueError or TypeError exceptions occurred,","except ( ValueError , TypeError ) :"
"if best_doublecolon_len is greater than integer 1,",if best_doublecolon_len > 1 :
"if domain is true,",if domain :
define the method represent_decimal with arguments self and data.,"def represent_decimal ( self , data ) :"
"get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,","initial_value = self . initial . get ( name , field . initial )"
return an empty dictionary.,return { }
from django.conf import settings into default name space.,from django . conf import settings
close the file stream.,stream . close ( )
"replace '%s' in the string ""<BaseConverter: base%s (%s)>"" with length of self.digits and self.digits, respectively, return the string.","return ""<BaseConverter: base%s (%s)>"" % ( len ( self . digits ) , self . digits )"
"if not, self.dry_run is boolean False. get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,","self . merge = options . get ( 'merge' , False )"
"model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively. return fk.",return fk
"where '%s' is replaced with parsed.scheme. call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,","super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )"
define the method dst with 2 arguments self and dt.,"def dst ( self , dt ) :"
"if not,",else :
"define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.","def __init__ ( self , key = None , sep = ':' , salt = None ) :"
return value under key key of self dictionary,return self [ key ]
"if lengths of new_operations and operations are the same,",if len ( new_operations ) == len ( operations ) :
"if line is true,",if line :
"call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.",return six . text_type ( self . data . year ) [ 2 : ]
from django.core import urlresolvers into default name space.,from django . core import urlresolvers
result is an empty list.,result = [ ]
define the method __call__ with arguments self and value.,"def __call__ ( self , value ) :"
"call the method self.iteritems, return the list of results.",return list ( self . iteritems ( ) )
"with lock,",with lock :
_moved_attributes is an empty list.,_moved_attributes = [ ]
"raise an TemplateSyntaxError exception with an argument string ""'%s' takes one argument"", where '%s' is replaced with first element of bits.","raise TemplateSyntaxError ( ""'%s' takes one argument"" % bits [ 0 ] )"
from django.core.exceptions import ImproperlyConfigured into default name space.,from django . core . exceptions import ImproperlyConfigured
"if self.__language equals settings.LANGUAGE_CODE,",if self . __language == settings . LANGUAGE_CODE :
"call the function conf.copy, substitute it for params.",params = conf . copy ( )
return nothing.,return
return an empty list.,return [ ]
increment mes_count by one.,msg_count += 1
"convert processors elements into a tuple, substitute it for _standard_context_processors.",_standard_context_processors = tuple ( processors )
"open the file named filepath in read mode, with file descriptor renamed to fp perform,","with open ( filepath , 'rb' ) as fp :"
raise an exception.,raise
call the method LocaleRegexProvider.__init__ with arguments self and regex.,"LocaleRegexProvider . __init__ ( self , regex )"
"call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:","return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )"
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.,"src = force_text ( src , settings . FILE_CHARSET )"
pop_context is boolean True.,pop_context = True
self.FILES is an instance of MultiValueDict class.,self . FILES = MultiValueDict ( )
"call the method value.encode with an argument charset, substitute the result for value.",value = value . encode ( charset )
"if not,",else :
"substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.",cookie_value = self . COOKIES [ key ]
"call the function self._key_to_file with key and version as arguments, substitute it for fname.","fname = self . _key_to_file ( key , version )"
"if self._count is None,",if self . _count is None :
substitute context for self.context.,self . context = context
do nothing.,pass
"try,",try :
"call the function get_callable with an argument self._callback_str, substitute the result for self._callback.",self . _callback = get_callable ( self . _callback_str )
remove the first element from context.render_context.,context . render_context . pop ( )
"extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.","locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )"
"remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,","self . pk_field = kwargs . pop ( ""pk_field"" , False )"
call the method self._add_installed_apps_translations.,self . _add_installed_apps_translations ( )
"if renamed is boolean False,",if not renamed :
"for every path in collect,",for path in collect :
substitute new_obj for obj.,obj = new_obj
call the method handler.startDocument.,handler . startDocument ( )
seen_data is an empty set.,seen_data = set ( )
namespaces is an empty dictionary.,namespaces = { }
return result.,return result
"convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.",server_port = str ( self . META [ 'SERVER_PORT' ] )
derive the class Command from the AppCommand base class.,class Command ( AppCommand ) :
"call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.","super ( BaseModelFormSet , self ) . __init__ ( ** defaults )"
"from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.","from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS"
"remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,","self . input_type = attrs . pop ( 'type' , self . input_type )"
"if not,",else :
"convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.","daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )"
num is an integer 0.,num = 0
call the function shutil.move with arguments the_path and guessed_path.,"shutil . move ( the_path , guessed_path )"
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.,"handler . addQuickElement ( ""title"" , self . feed [ 'title' ] )"
m is an instance of Media class.,m = Media ( )
call the function thread.start_new_thread with main_func and args as arguments.,"thread . start_new_thread ( main_func , args )"
"if val is None,",if val is None :
derive the class PageNotAnInteger from the InvalidPage base class.,class PageNotAnInteger ( InvalidPage ) :
return it. define the function itervalues with 2 arguments: d and unpacked dictionary kw.,"def itervalues ( d , ** kw ) :"
insert mw_instance.process_exception at the beginning of self._exception_middleware.,"self . _exception_middleware . insert ( 0 , mw_instance . process_exception )"
"if i is greater than or equal to the result of the method self.initial_form_count,",if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
"decorator method register.tag with an argument 'extends',",@ register . tag ( 'extends' )
"tuple with 2 elements: upto and start and boolean False, append the result to result. substitute start for upto.",upto = start
"if value is contained in self.empty_values,",if value in self . empty_values :
tried_modules is an empty list.,tried_modules = [ ]
"if not,",else :
"instantiate class Module_six_moves_urllib_response with an argument, string "".moves.urllib.response"" appended to __name__,","sys . modules [ __name__ + "".moves.urllib_response"" ] = sys . modules [ __name__ + "".moves.urllib.response"" ] = Module_six_moves_urllib_response ( __name__ + "".moves.urllib.response"" )"
substitute declared_fields for new_class.base_fields.,new_class . base_fields = declared_fields
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
from django.utils import timezone into default name space.,from django . utils import timezone
"call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,",dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
"substitute loopvars and sequence for self.loopvars and self.sequence, respectively.","self . loopvars , self . sequence = loopvars , sequence"
"for every dict_ in self.dicts,",for dict_ in self . dicts :
"iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules. if reverse is true,",if reverse :
return an empty string.,return ''
"and code set to string 'required. otherwise if self.required is false and value is false,",elif not self . required and not value :
"call the method self.set with arguments key, value, timeout set to timeout, version set to version.","self . set ( key , value , timeout = timeout , version = version )"
field_params is an empty dictionary.,field_params = { }
call the method tpl.format with an arguments self.sysid and self.pubid.,"return tpl . format ( self . sysid , self . pubid )"
nodelist is an empty list.,nodelist = [ ]
"try,",try :
"for every i in sequence of integers, from 0 to the result of the method self.total_form_count,","for i in range ( 0 , self . total_form_count ( ) ) :"
call the method self.handle_m2m_field with arguments obj and filed.,"self . handle_m2m_field ( obj , field )"
derive the class EndToken from the TokenBase base class.,class EndToken ( TokenBase ) :
"define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.","def execute ( self , * args , ** options ) :"
self.managed is boolean True.,self . managed = True
"return an empty string,",return ''
define the method to_language with an argument self.,def to_language ( self ) :
kwargs is an empty dictionary.,kwargs = { }
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.","list_ = super ( MultiValueDict , self ) . __getitem__ ( key )"
"if is_templatized is true,",if is_templatized :
call the method archive.extract with an argument to_path.,archive . extract ( to_path )
msgattrib_options is an list with elements: string '--no-obsolete'.,msgattrib_options = [ '--no-obsolete' ]
substitute model._meta for opts.,opts = model . _meta
status_code is an integer 500.,status_code = 500
"call the function warnings.warn with an argument,",warnings . warn ( 'A secure pseudo-random number generator is not available ' 'on your system. Falling back to Mersenne Twister.' )
"call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,","return self . add_truncation_text ( ' ' . join ( words ) , truncate )"
"if prefix is None,",if prefix is None :
"substitute '%s' in string ""No changes detected in apps '%s'"" with the app_labels joined into a string, separated by string ""', '"",","self . stdout . write ( ""No changes detected in apps '%s'"" % ( ""', '"" . join ( app_labels ) ) )"
"otherwise if o is an instance of datetime.date object,","elif isinstance ( o , datetime . date ) :"
"try,",try :
substitute ngettext for ngettext_lazy.,ngettext_lazy = ngettext
"call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,","call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )"
return nothing.,return
"call the function http_date with no arguments, and substitute its return value",response [ 'Last-Modified' ] = http_date ( )
"raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',","raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )"
define the function format with 2 arguments self and formatstr.,"def format ( self , formatstr ) :"
substitute element at the bit index of current for current.,current = current [ bit ]
"if not,",else :
"raise an exception parser.error_class with an argument string ""Not expecting '%s' in this position in if tag."",","raise parser . error_class ( ""Not expecting '%s' in this position in if tag."" % self . id )"
"get models.signals name attribute, store it in obj.","obj = getattr ( models . signals , name )"
from django.utils.encoding import force_str into default name space.,from django . utils . encoding import force_str
"try,",try :
"multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.",x = x * len ( from_digits ) + from_digits . index ( digit )
"try,",try :
"if six.PY3 is boolean True,",if six . PY3 :
"join elements of extra_classes into a string separated by whitespaces, return it.",return ' ' . join ( extra_classes )
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return self . _html_output ( normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' , error_row = '%s' , row_ender = '</p>' , help_text_html = ' <span class=""helptext"">%s</span>' , errors_on_separate_row = True )"
"if first element of bits is not equal to string 'and',",if bits [ 0 ] != 'and' :
"if new_name is not equal to col_name,",if new_name != col_name :
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"substitute the result for plural_form_line. if self.verbosity is greater than integer 1,",if self . verbosity > 1 :
return self._is_rendered.,return self . _is_rendered
"call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.",self . _urlconf_module = import_module ( self . urlconf_name )
from django.utils import six into default name space.,from django . utils import six
call the method httpd.serve_forever.,httpd . serve_forever ( )
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.,"self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )"
define the method _set_queryset with 2 arguments: self and queryset.,"def _set_queryset ( self , queryset ) :"
"replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',","formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )"
"call the method self.limit_choices_to, return the result,",return self . limit_choices_to ( )
"RAW is a string ""raw"".","RAW = ""raw"""
"get the index of first occurrence of name in existing, substitute it for i.",i = existing . index ( name )
"for every item in self.items,",for item in self . items :
"yield string ""# You'll have to do the following manually to clean this up:"" as the result.","yield ""# You'll have to do the following manually to clean this up:"""
"get return value of the field.get_attname function attribute of the obj object, substitute it for value.","value = getattr ( obj , field . get_attname ( ) )"
substitute the result for the value under the 'day' key of the html dictionary. output is an empty list.,output = [ ]
call the method msg.attach with an argument body_msg.,msg . attach ( body_msg )
"if escaped is true,",if escaped :
"if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
return num_sent.,return num_sent
"append the result to sql_files. join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.","sql_files . append ( os . path . join ( app_dir , ""%s.sql"" % opts . model_name ) )"
return context_extras.,return context_extras
"try,",try :
"for every name in self.fields,",for name in self . fields :
"append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.","checks = [ check for check in self . registered_checks if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]"
imported_objects is an empty dictionary.,imported_objects = { }
"define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.","def _construct_form ( self , i , ** kwargs ) :"
"and an empty dictionary, substitute the result for httpd_cls. if not,",else :
define the function clear_script_prefix.,def clear_script_prefix ( ) :
substitute obj for the value of the memo dictionary at the identity of the self object key.,memo [ id ( self ) ] = obj
"if app_label is not contained in executor.loader.migrated_apps,",if app_label not in executor . loader . migrated_apps :
write shutdown_message to self.stdout file stream.,self . stdout . write ( shutdown_message )
"both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.","both_after = [ Tok ( ""other"" , r""."" ) , ]"
"if context is an instance of Context,","if isinstance ( context , Context ) :"
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
"if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.","return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False"
derive the class Deserializer from the six.Iterator base class.,class Deserializer ( six . Iterator ) :
derive the class Command from the TemplateCommand base class.,class Command ( TemplateCommand ) :
"if not self.pk_field is boolean False. remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,","self . to_field = kwargs . pop ( ""to_field"" , None )"
"define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.","def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :"
derive the OutputWrapper class from the object base class.,class OutputWrapper ( object ) :
"if event equals a string ""START_ELEMENT"" and node.nodeName equals a string 'object',","if event == ""START_ELEMENT"" and node . nodeName == ""object"" :"
return boolean False.,return False
return result.,return result
"for every filename in gen_filenames(),",for filename in gen_filenames ( ) :
terminal_char is an string ')'.,terminal_char = ')'
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
define the method __enter__ with argument self.,def __enter__ ( self ) :
"if label_output is true,",if label_output :
"otherwise if value under the 'app_label' key of options dictionary is true,",elif options [ 'app_label' ] :
"WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,","WEEKDAYS = { 0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) , 5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' ) }"
"if ImproperlyConfigured renamed to exc, exception is caught,",except ImproperlyConfigured as exc :
"define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.","def configure_logger ( self , name , config , incremental = False ) :"
"where string '%s' is replaced by lookup_view and mod_name, respectively. if not,",else :
define the method handle with 2 arguments: self and unpacked dictionary options.,"def handle ( self , ** options ) :"
"if not,",else :
"subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,",year = year + ( ( 2000 - year ) // 28 ) * 28
"if form.errors is true,",if form . errors :
"groupid is a string ""t%d"" formated with tok.id.","groupid = ""t%d"" % tok . id"
content is an empty string.,content = ''
substitute the result for new_class. if bases equals a tuple with an element: class BaseModelForm.,"if bases == ( BaseModelForm , ) :"
"substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.","stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO"
raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.,"raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )"
"with self.mutex perform,",with self . mutex :
import module argparse.,import argparse
import module warnings.,import warnings
call the method __init__ from the base class of the ExternalReferenceForbidden class.,"super ( ExternalReferenceForbidden , self ) . __init__ ( )"
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.,"from django . utils . datastructures import MultiValueDict , MergeDict"
"if ValueError or TypeError exceptions are caught,","except ( ValueError , TypeError ) :"
"if not,",else :
"call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,",if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
"call the method query.items, substitute the result for query.",query = query . items ( )
"if length of bits equals integer 3,",if len ( bits ) == 3 :
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.,"handler . addQuickElement ( ""title"" , item [ 'title' ] )"
"for every c in candidate without the last element and in reversed order, convert c into an integer,",odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
empty is an instance of object class.,empty = object ( )
"call the function no_style, substitute it for self.style.",self . style = no_style ( )
substitute record.request for request.,request = record . request
return string 'st'.,return 'st'
"call the method __delitem__ from the base class of the QueryDict class, with an argument key.","super ( QueryDict , self ) . __delitem__ ( key )"
"call the method next with an argument bits, substitute the result for bit.",bit = next ( bits )
derive the class EmptyPage from the InvalidPage base class.,class EmptyPage ( InvalidPage ) :
"call the method context.push with unpacked dictionary values as an argument, with the result perform,",with context . push ( ** values ) :
"if help_texts is true and f.name is contained in help_texts,",if help_texts and f . name in help_texts :
skip this loop iteration.,continue
call the method parser.delete_first_token.,parser . delete_first_token ( )
"for every char in fmt,",for char in fmt :
"with the result renamed to fp, perform the following: call the method fp.read, substitute the result for src_data.",src_data = fp . read ( )
"raise an CommandError exception with an argument ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."", where '%s' is replaced with program.","raise CommandError ( ""Can't find %s. Make sure you have GNU "" ""gettext tools 0.15 or newer installed."" % program )"
"if logging_config is true,",if logging_config :
"try,",try :
"if KeyError exception is caught,",except KeyError :
"call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,",if settings . is_overridden ( 'TEMPLATE_LOADERS' ) :
"of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary. define the method getvalue with an argument self.",def getvalue ( self ) :
"if not,",else :
substitute new_attr for self.attr.,self . attr = new_attr
"call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,","if field . _has_changed ( initial_value , data_value ) :"
response.content is bytes empty string.,response . content = b''
"raise an exception,",raise
break the loop execution.,break
"split value into words, return the length of the result.",return len ( value . split ( ) )
substitute CheckboxChoiceInput for choice_input_class.,choice_input_class = CheckboxChoiceInput
"if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,",if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
"if value is None,",if value is None :
"for every field in concrete_model._meta.local_fields,",for field in concrete_model . _meta . local_fields :
"exp is an instance of Decimal, created with an argument integer 1.",exp = Decimal ( 1 )
derive the class Command from the BaseCommand class.,class Command ( BaseCommand ) :
"call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.","_url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )"
"if not,",else :
"try,",try :
define the method keys with an argument self.,def keys ( self ) :
"instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,","return Truncator ( value ) . chars ( length , html = True )"
from django.core.management.base import CommandError into default name space.,from django . core . management . base import CommandError
define the function gettext_noop with an argument message.,def gettext ( message ) :
"if sub_match is true,",if sub_match :
return nothing.,return
derive the class Command from the BaseCommand class.,class Command ( BaseCommand ) :
return the value under the self.data.month key of the MONTHS_ALT dictionary.,return MONTHS_ALT [ self . data . month ]
"call the method handler.upload_complete, substitute the result for retval.",retval = handler . upload_complete ( )
"try,",try :
"'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re. define the function parse_date with an argument value.",def parse_date ( value ) :
"try,",try :
"if not,",else :
"call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.","cache . set ( cache_key , headerlist , cache_timeout )"
nesting is integer 0.,nesting = 0
"strip g of '""' from both ends,","g = g . strip ( '""' )"
UNKNOWN_SOURCE is a string '<unknown source>'.,UNKNOWN_SOURCE = '<unknown source>'
"call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.","m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )"
substitute attrs for self.attrs.,self . attrs = attrs
"for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.",result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
"call the method writer.as_string, write the result to fh file.",fh . write ( writer . as_string ( ) )
for every k and v in return value of the method self.kwargs.items. return resolved_args and resolved_kwargs.,"return resolved_args , resolved_kwargs"
"call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,",parsed = urlparse ( force_text ( redirect_to ) )
"if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.",encoding = self . encoding or settings . DEFAULT_CHARSET
return the content field of the base class of the class SimpleTemplateResponse.,"return super ( SimpleTemplateResponse , self ) . content"
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
"return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,","return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )"
from django.conf import settings into default name space.,from django . conf import settings
define the method defalt with arguments self and o.,"def default ( self , o ) :"
RemovedInDjango19Warning and stacklevel set to integer 2. import module logging.handlers.,import logging . handlers
derive the class Serializer from the base.Serializer base class.,class Serializer ( base . Serializer ) :
leave_locale_alone is boolean True,leave_locale_alone = True
"call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',","value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )"
call the method self._cache.delete with argument key.,self . _cache . delete ( key )
define the method __init__ with 2 arguments: self and iterable set to None.,"def __init__ ( self , iterable = None ) :"
return self.size.,return self . size
"call the function warnings.warn with 3 arguments: string ""django.utils.dictconfig will be removed in Django 1.9."",","warnings . warn ( ""django.utils.dictconfig will be removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"
model_dependencies is an empty list.,model_dependencies = [ ]
"call the function quote with return value of the evaluated function force_bytes(iri),","return quote ( force_bytes ( iri ) , safe = b""/#%[]=:;$&()+,!?*@'~"" )"
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.,"sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if not,",else :
call the method self._assert_mutable.,self . _assert_mutable ( )
"define the method __get__ with 3 arguments: self, instance and name type to None.","def __get__ ( self , instance , type = None ) :"
return a string '%02d' formated with self.data.day.,return '%02d' % self . data . day
define the method __delattr__ with 2 arguments self and name.,"def __delattr__ ( self , name ) :"
"while self.tokens is true,",while self . tokens :
increment weight by integer 2.,weight += 1
return result.,return result
return a string '%06d' formated with self.data.microsecond.,return '%06d' % self . data . microsecond
widget.is_localized is boolean True.,widget . is_localized = True
"if DecimalException exception is caught,",except DecimalException :
week_number is integer 1.,week_number = 1
from django.db.models.fields import Field as ModelField.,from django . db . models . fields import Field as ModelField
substitute self.required for widget.is_required.,widget . is_required = self . required
define the method created_time with arguments self and name.,"def created_time ( self , name ) :"
"default set to DEFAULT_DB_ALIAS and help set to a string: 'Nominates a database onto which the cache tables will be installed. Defaults to the ""default"" database.' define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.","def handle ( self , * tablenames , ** options ) :"
define the method __deepcopy__ with 2 arguments: self and memo.,"def __deepcopy__ ( self , memo ) :"
"if not,",else :
define the method _isdst with 2 arguments: self and dt.,"def _isdst ( self , dt ) :"
"if args is true,",if args :
"resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.",resolved_args = [ var . resolve ( context ) for var in self . args ]
"register.tag decorator,",@ register . tag
substitute content_type for self.content_type.,self . content_type = content_type
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"strip g of ""'"" from both ends,","g = g . strip ( ""'"" )"
from django.utils import six into default name space.,from django . utils import six
"call the function get_library with an argument taglib, substitute the result for lib.",lib = get_library ( taglib )
raise an TemplateDoesNotExist exception with an argument template_name.,raise TemplateDoesNotExist ( template_name )
"call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.","parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )"
append value to the self._closable_objects list.,self . _closable_objects . append ( value )
"call the color_style method, substitute the result for self.style.",self . style = color_style ( )
define the method __init__ with 2 arguments: self and source.,"def __init__ ( self , source ) :"
"call the method self.setlistdefault with an argument key, append value to the result.",self . setlistdefault ( key ) . append ( value )
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.,"from django . utils . translation import ugettext_lazy as _ , ungettext_lazy"
"call the self.stdout.write method, with string "" Unapplying %s..."" with '%s' replaced with migration and ending set to '', as arguments.","self . stdout . write ( "" Unapplying %s..."" % migration , ending = """" )"
inverse_match is boolean False.,inverse_match = False
from django.utils.timezone import is_aware into default name space.,from django . utils . timezone import is_aware
substitute iter for iterbytes.,iterbytes = iter
reverse the order of elements of styles.,styles . reverse ( )
"join root and filename into a file path, substitute it for old_path.","old_path = path . join ( root , filename )"
"method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,",@ lru_cache . lru_cache ( maxsize = None )
define the method to_python with arguments self and data.,"def to_python ( self , data ) :"
call the method self.add_root_elements with an argument handler.,self . add_root_elements ( handler )
define the function parse_color_setting with an argument config_string.,def parse_color_setting ( config_string ) :
"if KeyError exception is caught,",except KeyError :
close fd file descriptor.,os . close ( fd )
"t is an instance of Template class, created with 2 arguments output and name set to filepath.","t = Template ( output , name = filepath )"
"if not,",else :
prefix the base64d with a '.' character.,base64d = b'.' + base64d
"if not,",else :
"call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,","dict . __setitem__ ( result , copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )"
from django.conf import settings into default name space.,from django . conf import settings
if self.urlconf_name is an instance of a list type and its length is not zero.,"if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :"
"if item is contained in self.dict, return boolean True, otherwise return boolean False.",return item in self . dict
"if self.domain equals to string 'djangojs',",if self . domain == 'djangojs' :
content_length is integer 0.,content_length = 0
page_range is a property object with _get_page_range as a getter method.,page_range = property ( _get_page_range )
self._done is boolean True.,self . _done = True
plural is an empty list.,plural = [ ]
"msg is a string ""The use of the language code '%s' is deprecated. Please use the '%s' translation instead."".","msg = ( ""The use of the language code '%s' is deprecated. "" ""Please use the '%s' translation instead."" )"
"contextlib.contextmanager decorator,",@ contextlib . contextmanager
"call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',","warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or ' '`request.POST` instead.' , RemovedInDjango19Warning , 2 )"
"call the method self.expression, substitute the result for retval.",retval = self . expression ( )
"_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.",_supported = OrderedDict ( settings . LANGUAGES )
"substitute empty string, word an empty string for lead, middle and trail, respectively.","lead , middle , trail = '' , word , ''"
"if field_value has an attribute '__iter__' and is not an instance of six.text_type object,","if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :"
remove dirname key from dirs.,dirs . remove ( dirname )
"remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.","converter = self . value_converters . get ( prefix , None )"
"filemsg is a string 'file %s, ', where '%s' is replaced with origin.","filemsg = 'file %s, ' % origin"
"call the method get_language, substitute the result for language_code.",language_code = get_language ( )
import module tempfile.,import tempfile
"call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,","return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]"
"if not,",else :
derive the class URLInput from the TextInput base class.,class URLInput ( TextInput ) :
"called with 3 arguments: data, files and name, substitute the result for upload. if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,","if not self . is_required and CheckboxInput ( ) . value_from_datadict ( data , files , self . clear_checkbox_name ( name ) ) :"
"get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.","n = getattr ( lookup_view , '__name__' , None )"
"if not,",else :
ret_ip is an empty list.,ret_ip = [ ]
"if not,",else :
"substitute the resulting list for none_model_fields. missing_fields is difference between set containing none_model_fields and set containing result of the method,",missing_fields = ( set ( none_model_fields ) - set ( new_class . declared_fields . keys ( ) ) )
"if value under the 'description' key of the item dictionary is not None,",if item [ 'description' ] is not None :
"call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.","nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )"
"HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone, HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space. from django.http.utils import fix_location_header and conditional_content_removal into default name space.","from django . http . utils import fix_location_header , conditional_content_removal"
"LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.","LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )"
"if string '()' is contained in config,",if '()' in config :
yield key and value under key key of self dictionary.,"yield key , self [ key ]"
return url.,return url
delete self._get.,del self . _get
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.,"handler . addQuickElement ( ""description"" , self . feed [ 'description' ] )"
remove first element from self.command_stack.,self . command_stack . pop ( )
"try,",try :
"if content has an 'chunks' attribute,","if not hasattr ( content , 'chunks' ) :"
"call the method filename.rfind with an argument string ""\\"", increment the result by one,","return filename and filename [ filename . rfind ( ""\\"" ) + 1 : ] . strip ( )"
from django.utils.regex_helper import normalize into default name space.,from django . utils . regex_helper import normalize
"function-based loader."", where '%s' is replaced with loader. substitute TemplateLoader for func.",func = TemplateLoader
"call the connection.introspection.table_names with cursor as argument, store the result in tables.",tables = connection . introspection . table_names ( cursor )
define the method self and name.,"def pop ( self , name ) :"
"if not,",else :
define the function import_string with an argument dotted_path.,def import_string ( dotted_path ) :
"use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds. sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.",return ( ( evens + odds ) % 10 == 0 )
"if not,",else :
register is an instance of Library class.,register = Library ( )
"format string '&%s;' with name, append it to self.fed.",self . fed . append ( '&%s;' % name )
"call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,",return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
return result and result_args.,"return result , result_args"
substitute field_name for self.field_name.,self . field_name = field_name
"if block_context is None,",if block_context is None :
"while token.contents starts with a string 'elif',",while token . contents . startswith ( 'elif' ) :
"call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.","return super ( DjangoJSONEncoder , self ) . default ( o )"
"if TypeError, AttributeError, KeyError or ValueError exceptions are caught,","except ( TypeError , AttributeError , KeyError , ValueError ) :"
return self._cached_loaders.,return self . _cached_loaders
"obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.","obj = Node ( connector = self . connector , negated = self . negated )"
"define the method get with 3 arguments: self, key and default set to None.","def get ( self , key , default = None ) :"
"if ImportError exception is caught,",except ImportError :
derive the class IfNode from Node base class.,class IfNode ( Node ) :
do nothing.,pass
"call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,",if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
"define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.","def __init__ ( self , content_type = None , status = None , reason = None ) :"
from django.db import connections and transaction into default name space.,"from django . db import connections , transaction"
"if request has an attribute named 'urlconf',","if hasattr ( request , 'urlconf' ) :"
"if length of bits is not equal to integer 2,",if len ( bits ) != 2 :
"if KeyError exception is caught,",except KeyError :
"get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.",memo [ id ( self ) ] = result
"if not,",else :
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
import module re.,import re
"call the method self.as_table, return the result.",return self . as_table ( )
break the loop execution.,break
"call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.","val = Header ( val , encoding ) . encode ( )"
"join self._container elements into a string, return it.",return b'' . join ( self . _container )
"and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output. if not,",else :
lbp is integer 0.,lbp = 0
substitute settings.DEFAULT_CHARSET for encoding.,encoding = settings . DEFAULT_CHARSET
"call the function ugettext with an argument string ""Please correct the duplicate values below."", return the result.","return ugettext ( ""Please correct the duplicate values below."" )"
return self._choices.,return self . _choices
"if invalid_apps in not empty,",if invalid_apps :
from django.utils.http import cookie_date into default name space.,from django . utils . http import cookie_date
substitute token_type and contents for self.token_type and self.contents.,"self . token_type , self . contents = token_type , contents"
substitute first element of to_digits for res.,res = to_digits [ 0 ]
"if fget is not None,",if fget is not None :
return value.,return value
return obj.,return obj
do nothing.,pass
"split t.contents by '|' symbol, substitute the result for parts,",parts = t . contents . split ( '|' )
substitute urlconf_name for _urlconfs.value.,_urlconfs . value = urlconf_name
define method parse_starttag with self class instance and i as the arguments.,"def parse_starttag ( self , i ) :"
define the function make_list with an argument value.,def make_list ( value ) :
__caches is an empty dictionary.,_caches = { }
"to the function timedelta called with an argument seconds as negative time.altzone, return the result. if not,",else :
"try,",try :
"reminder of the division of floored result of division of seconds by 60, by integer 60. define the method P with an argument self.",def P ( self ) :
break from the loop execution.,break
"if the Exception exception is caught,",except Exception :
append string '_field' to new_name.,new_name += '_field'
"call the method context_instance.push with an argument dictionary, with the result perform,",with context_instance . push ( dictionary ) :
do nothing.,pass
import module yaml.,import yaml
if comment_lineno_cache equals cur_lineno.,if comment_lineno_cache == cur_lineno :
from django.db import models into default namespace.,from django . db import models
"get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.","print_ = getattr ( moves . builtins , ""print"" , None )"
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.,"if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :"
call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.,self . run_shell ( shell = options [ 'interface' ] )
self._current is None.,self . _current = None
substitute file_name for self.file_name.,self . file = file_name
define the method _reset_dicts with 2 arguments: self and value set to None.,"def _reset_dicts ( self , value = None ) :"
"out is an instance of StringIO class, created with an empty string as an argument.",out = StringIO ( '' )
return None.,return None
"if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.","return val if isinstance ( val , bytes ) else val . encode ( encoding )"
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","def __init__ ( self , * args , ** kwargs ) :"
"if not,",else :
"call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.","pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )"
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.,"def get_image_dimensions ( file_or_path , close = False ) :"
domains is a tuple with element string 'django'.,"domains = ( 'django' , )"
append param to i-th element of result_args.,result_args [ i ] . append ( param )
"call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',","warnings . warn ( 'import_by_path() has been deprecated. Use import_string() instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
append key to self.keyOrder.,self . keyOrder . append ( key )
import module sys.,import sys
substitute serialize for __str__.,__str__ = serialize
"try,",try :
"if base_url is None,",if base_url is None :
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"while field.rel is not None,",while field . rel is not None :
"format the string '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras. join elements of paras into a string separated with '\n\n', return the result.",return '\n\n' . join ( paras )
"get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.",self . app_label = options . get ( 'app_label' )
"where '%s' is replaced with first element of bits. call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.",filepath = parser . compile_filter ( bits [ 1 ] )
"append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.",singular . append ( '%%(%s)s' % t . contents )
substitute first element of args for arg.,arg = args [ 1 ]
"if buf is false,",if not buf :
"define the method add_item_elements with 3 arguments: self, handler and item.","def add_item_elements ( self , handler , item ) :"
"if first element of params equals a string 'context',",if params [ 0 ] == 'context' :
from django.utils.formats import get_format into default name space.,from django . utils . formats import get_format
"if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,","if contains ( result [ - 1 ] , Group ) :"
"define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.","def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :"
self._files is an instance of MultiValueDict class.,self . _files = MultiValueDict ( )
"if not,",else :
"if filename is not contained in _mtimes,",if filename not in _mtimes :
define the method __str__ with an argument self.,def __str__ ( self ) :
import module time.,import time
"call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,",obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
"if Exception, renamed to e, exception is caught,",except Exception as e :
"define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.",readline = property ( lambda self : self . file . readline )
"raise and exception InvalidCacheBackendError with string ""Could not find config for '%s' in settings.CACHES"" as argument, replace '%s' with alias.","raise InvalidCacheBackendError ( ""Could not find config for '%s' in settings.CACHES"" % alias )"
"format string '%02d' with the second element of the result, return it. define the method U with an argument self.",def U ( self ) :
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:,"return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )"
"force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url. substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,","cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % ( key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )"
"call the function timezone.get_current_timezone, substitute the result for current_timezone.",current_timezone = timezone . get_current_timezone ( )
return boolean True.,return True
define the method non_form_errors with an argument self.,def non_form_errors ( self ) :
define the function get_language_bidi.,def get_language_bidi ( ) :
"if offset is an instance of timedelta class,","if isinstance ( offset , timedelta ) :"
convert value to an integer.,value = int ( value )
substitute queryset for self._queryset.,self . _queryset = queryset
"remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,","self . initial_extra = kwargs . pop ( 'initial' , None )"
_templatetags_modules is an empty list.,_templatetags_modules = [ ]
pending_references is a empty dictionary.,pending_references = { }
import module sys.,import sys
call the function exhaust with an argument self._input_data.,exhaust ( self . _input_data )
"if e has an attribute 'code' and e.code is contained in self.error_messages,","if hasattr ( e , 'code' ) and e . code in self . error_messages :"
"for every model in return value of the function router.get_migratable_models, called with arguments:","for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :"
"if label_suffix is not None substitute label_suffix for self.label_suffix,",self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
return an instance of a dummy class.,return dummy ( )
return val.,return val
"get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,","messages . update ( getattr ( c , 'default_error_messages' , { } ) )"
define the function get_serializer with an argument format.,def get_serializer ( format ) :
return _standard_context_processors.,return _standard_context_processors
break the loop execution.,break
write ']' to the self.stream file stream.,"self . stream . write ( ""]"" )"
"if ImportError, renamed to e, exception is caught,",except ImportError as e :
"if locale_dir is false,",if not locale_dir :
"for every taglib in bits without the first element,",for taglib in bits [ 1 : ] :
"if value is not contained in result,",if value is not result :
define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.,"def Deserializer ( stream_or_string , ** options ) :"
"if self.number equals to self.paginator.num_pages,",if self . number == self . paginator . num_pages :
"use the result as an argument for the call to the method final_output.extend. call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,","final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )"
"if not,",else :
substitute func for self.func.,self . func = func
"if not,",else :
"if etags is false,",if not etags :
"if k equals a string 'fg',",if k == 'fg' :
"if not,",else :
"call the function split_url with an argument value, substitute the result for url_fields.",url_fields = split_url ( value )
from importlib import import_module into default name space.,from importlib import import_module
substitute result for self.find_template_cache dictionary value under the key key.,self . find_template_cache [ key ] = result
do nothing,pass
"call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.",self . _errors [ field ] = self . error_class ( )
skip this loop iteration.,continue
"decorator stringfilter,",@ stringfilter
"if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,",if ( self . requires_system_checks and not options . get ( 'skip_validation' ) and not options . get ( 'skip_checks' ) ) :
define the method latest_post_date with an argument self.,def latest_post_date ( self ) :
do nothing.,pass
"define the method strptime with arguments self, value and format.","def strptime ( self , value , format ) :"
"if length of bits is not equal to integer 6,",if len ( bits ) != 6 :
"call the method self.resolve_template with an argument self.template_name, substitute the result for template.",template = self . resolve_template ( self . template_name )
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.,key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
"call the function ugettext with an argument string ""%s KB"", substitute '%s' with the result of the call to the function,","value = ugettext ( ""%s KB"" ) % filesize_number_format ( bytes / KB )"
"return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,","return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap , isolated_context = isolated_context )"
substitute obj for self.data.,self . data = obj
from django.utils.six.moves import map into default name space.,from django . utils . six . moves import map
option_value is an empty string.,option_value = ''
return an empty string.,return ''
return context_extras.,return context_extras
call the method self.connection.ehlo.,self . connection . ehlo ( )
"define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.","def handle ( self , * labels , ** options ) :"
substitute deprecation_warning for self.deprecation_warning.,self . deprecation_warning = deprecation_warning
substitute force_bytes for force_str.,force_str = force_bytes
"if conflicts is true,",if conflicts :
"if end_index is None and s_len is greater than truncate_len,",if end_index is None and s_len > truncate_len :
"use the result as the argument for the call to the sql.extend method. if self.verbosity is greater or equal than integer 1 and sql is true,",if self . verbosity >= 1 and sql :
"call the function load_command_class with arguments: app_name and name, substitute the result for command.","command = load_command_class ( app_name , name )"
"parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string ""%(prog)s subcommand [options] [args]"" and add_help set to boolean False.","parser = CommandParser ( None , usage = ""%(prog)s subcommand [options] [args]"" , add_help = False )"
call the function handle_default_options with an argument options.,handle_default_options ( options )
"call the function ugettext with an argument string ""%s PB"", substitute '%s' with the result of the call to the function,","value = ugettext ( ""%s PB"" ) % filesize_number_format ( bytes / PB )"
"input_attrs, append the result to inputs list. join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,",return mark_safe ( '\n' . join ( inputs ) )
self._deleted_form_indexes is an empty list.,self . _deleted_form_indexes = [ ]
define the function i18n with an argument request.,def i18n ( request ) :
"if not,",else :
errors is an empty list.,errors = [ ]
"call the function _ with an argument string 'a.m.', return the result.",return _ ( 'a.m.' )
derive the class RWLock from the object base class.,class RWLock ( object ) :
define the method close with an argument self.,def close ( self ) :
"define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,","def mail_admins ( subject , message , fail_silently = False , connection = None , html_message = None ) :"
substitute length of chunk for chunk_length.,chunk_length = len ( chunk )
substitute memoryview for memoryview.,memoryview = memoryview
from django.utils.functional import cached_property into default name space.,from django . utils . functional import cached_property
return result.,return result
define the function filesizeformat with an argument bytes.,def filesizeformat ( bytes ) :
substitute view_name for self.view_name.,self . view_name = view_name
call the method translation.activate with an argument settings.LANGUAGE_CODE.,translation . activate ( settings . LANGUAGE_CODE )
define the function _explode_shorthand_ip_string with an argument ip_str.,def _explode_shorthand_ip_string ( ip_str ) :
from django.utils.encoding import smart_text into default name space.,from django . utils . encoding import smart_text
"get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.",logger = root . manager . loggerDict [ log ]
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
substitute the value under the 'app_label' key of options dictionary for app_label.,app_label = options [ 'app_label' ]
"for every form in valid_forms,",for form in valid_forms :
"try,",try :
"call the method get_language, substitute the result for language_code.",language_code = get_language ( )
"respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'. if not,",else :
substitute fields for self.fields.,self . fields = fields
"otherwise name is None. if name is None,",if name is None :
substitute first element of item for k.,k = item [ 0 ]
"call the method self.is_url with an argument template, if it evaluates to true,",if self . is_url ( template ) :
"if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,",known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
"call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.","utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )"
substitute length of prefixed for pflen.,pflen = len ( prefixed )
"call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.","response = self . get_exception_response ( request , resolver , 404 )"
import module sys.,import sys
substitute value for self._encoding.,self . _encoding = value
"if TypeError exception is caught,",except TypeError :
"if exception PermissionDenied is caught,",except PermissionDenied :
"raise CommandError exception, with sring ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."" as argument, substitute '%s' with self.program.","raise CommandError ( ""Can't find %s. Make sure you have GNU gettext "" ""tools 0.15 or newer installed."" % self . program )"
"if now is false,",if not now :
"for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,",return [ mark_safe ( force_text ( obj ) ) for obj in value ]
"if not an empty string, and truncate, return the result. return text.",return text
"decorator deconstructible,",@ deconstructible
increment objects_in_fixture by one.,objects_in_fixture += 1
define the function do_include with 2 arguments parser and token.,"def do_include ( parser , token ) :"
"call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.",return list ( zip ( * flatten_result ( result ) ) )
"if transfer_encoding equals a string 'base64',",if transfer_encoding == 'base64' :
"and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector. call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.",changes = autodetector . changes ( graph = executor . loader . graph )
"if autoescape is true,",if autoescape :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"raise an ValueError with an argument string ""Invalid timezone: %r"", substitute '%r' with timezone.","raise ValueError ( ""Invalid timezone: %r"" % timezone )"
use global variable _supported.,global _supported
return self.empty_value.,return self . empty_value
"replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the","module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )"
DEFAULT_TIMEOUT is a instance of the class object.,DEFAULT_TIMEOUT = object ( )
from django.utils import timezone and six into default name space.,"from django . utils import timezone , six"
"define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,","def __init__ ( self , required = True , widget = None , label = None , initial = None , help_text = '' , error_messages = None , show_hidden_initial = False , validators = [ ] , localize = False , label_suffix = None ) :"
substitute self for value under the 'block' key of context dictionary.,context [ 'block' ] = self
"assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.","header , value = settings . SECURE_PROXY_SSL_HEADER"
"call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.","self . _options = params . get ( 'OPTIONS' , None )"
"call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,","return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )"
"use tag as an argument to call the iterator method next, substitute the result for invalid_tag. raise an CommandError exception with an argument string 'There is no system check with the ""%s"" tag.', where '%s' is replaced with invalid_tag.","raise CommandError ( 'There is no system check with the ""%s"" tag.' % invalid_tag )"
"call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.","return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )"
from django.conf import settings into default name space.,from django . conf import settings
return an empty list.,return [ ]
"if IndexError exception is caught,",except IndexError :
"resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,","resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )"
"define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.","def _convert_to_charset ( self , value , charset , mime_encode = False ) :"
"if sep is an instance of unicode,","if isinstance ( sep , unicode ) :"
"to the function url.hexdigest(), respectively, substitute it for cache_key. call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.","return _i18n_cache_key_suffix ( request , cache_key )"
"return a dictionary generated with an expression, return value of the method e.as_data for f,","return { f : e . as_data ( ) for f , e in self . items ( ) }"
define the function python_reloader with main_func and kwargs as arguments.,"def python_reloader ( main_func , args , kwargs ) :"
"if string 'version' is not contained in config,",if 'version' not in config :
"if AttributeError exception is caught,",except AttributeError :
"for every path in paths,",for path in paths :
"if value under the 'load_initial_data' key of the options dictionary is true,",if options . get ( 'load_initial_data' ) :
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.,context_extras [ 'sql_queries' ] = connection . queries
"call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.","return super ( CommandParser , self ) . parse_args ( args , namespace )"
"call the function normpath with an argument path, return the result.",return normpath ( path )
"if self._non_form_errors is None,",if self . _non_form_errors is None :
"try,",try :
docstirng,"""""""Close the cache connection"""""""
append string '</optgroup>' to output.,output . append ( '</optgroup>' )
"raise an TemplateSyntaxError exception with an argument string ""Could not parse the remainder: '%s' from '%s'"",","raise TemplateSyntaxError ( ""Could not parse the remainder: '%s' "" ""from '%s'"" % ( token [ upto : ] , token ) )"
substitute months for self.months.,self . months = months
"return an instance of EscapeText, created with an argument s.",return EscapeText ( s )
"msg is a string ""%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?"", where '%(model)s' is replaced,","msg = ( ""%(model)s.Meta.%(opt)s cannot be a string. "" ""Did you mean to type: ('%(value)s',)?"" % { 'model' : new_class . __name__ , 'opt' : opt , 'value' : value , } )"
"get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,",id_ = widget . attrs . get ( 'id' ) or self . auto_id
"if self.verbosity is greater than integer 1,",if self . verbosity > 1 :
"if value is an instance of six.string_types class,","if isinstance ( value , six . string_types ) :"
define the method has_next with an argument self.,def has_next ( self ) :
"join self.file_path and fname into a valid file path, substitute it for self._fname.","self . _fname = os . path . join ( self . file_path , fname )"
remove the first element of context.,context . pop ( )
"if not, substitute self.auto_id for id_. if id_ is true,",if id_ :
return a string '%02d' formated with self.data.second.,return '%02d' % self . data . second
"return value,",return value
define the method configure_filter with 2 arguments: self and config.,"def configure_filter ( self , config ) :"
"call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.",byte2int = operator . itemgetter ( 0 )
num_pages is a property object with _get_num_pages as a getter method.,num_pages = property ( _get_num_pages )
return self._fname.,return self . _fname
"call the function six.iteritems with an argument dict_, for every item in the result,",for item in six . iteritems ( dict_ ) :
"if lib is true,",if lib :
return path an an empty string.,"return path , ''"
delete entry under the attr key of obj_dict dictionary.,del obj_dict [ attr ]
errors is an empty list.,errors = [ ]
define the method _get_filename with argument self.,def _get_filename ( self ) :
substitute i for self.pointer.,self . pointer = i
from django.core.management.base import AppCommand into default name space.,from django . core . management . base import AppCommand
"if not,",else :
substitute settings.DATE_FORMAT for arg.,arg = settings . DATE_FORMAT
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.,connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
"call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.",base2 = BaseConverter ( BASE2_ALPHABET )
"otherwise if self.name exists and self.name file path exists,",elif self . name and os . path . exists ( self . name ) :
define the method __getattr__ with self and name as arguments.,"def __getattr__ ( self , name ) :"
"if value is None,",if value is None :
"call the method copy.copy, substitute the result for obj.",obj = copy . copy ( self )
"for every f in files,",for f in dirs :
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.,"os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )"
return self.,return self
"property decorator,",@ property
append a tuple with elements key and value to current_fields.,"current_fields . append ( ( key , value ) )"
"write string "" you can delete them."" to self.stdout.","self . stdout . write ( "" you can delete them."" )"
delete the form.cleaned_data dictionary entry under the field key.,del form . cleaned_data [ field ]
"if value is None and attr is contained in declared_fields,",if value is None and attr in declared_fields :
"define the method add_item_elements with 3 arguments: self, handler and item.","def add_item_elements ( self , handler , item ) :"
"for every name in MEDIA_TYPES,",for name in MEDIA_TYPES :
"otherwise if first element of second row of args equals a string '3',",elif args [ 1 ] [ 0 ] == '3' :
return a list with an element tuple with 2 elements: an empty string and an empty list.,"return [ ( '' , [ ] ) ]"
"from django.utils.encoding import force_bytes, force_text, force_str and iri_to_uri into default name space.","from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri"
"if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.",return self . size > chunk_size
"if self is not contained in state_frame,",if self not in state_frame :
"call the function warnings.warn with previous string and CacheKeyWarning as arguments. define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.","def incr_version ( self , key , delta = 1 , version = None ) :"
define the function parse_etags with an argument etag_str.,def parse_etags ( etag_str ) :
"create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.","module = type ( 'BadSerializerModule' , ( object , ) , { 'Deserializer' : bad_serializer , 'Serializer' : bad_serializer , } )"
self._js is an empty list.,self . _js = [ ]
substitute self.queryset for qs.,qs = self . queryset
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
"match string s with regex IDENTIFIER, substitute the result for m.",m = IDENTIFIER . match ( s )
"call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.",ctx . update ( force_bytes ( value ) )
"call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.","main_value_pair , params = parse_header ( line )"
"call the os.path.basename with path as argument, substitute the result for filename.",filename = os . path . basename ( path )
append app_output to output.,output . append ( app_output )
"call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.",queryset = queryset . filter ( pk__in = primary_keys )
"while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,","while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :"
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.",content_disposition = info . get ( 'content-disposition' )
"define the function __init__ with 3 arguments: self, token and parser.","def __init__ ( self , token , parser ) :"
"if value is contained in self.empty_values,",if value in self . empty_values :
convert processors into a tuple and substitute it for processors.,processors = tuple ( processors )
"new_msg is a tuple containing a string: ""Database %s couldn't be flushed. Possible reasons:\n""","new_msg = ( ""Database %s couldn't be flushed. Possible reasons:\n"" "" * The database isn't running or isn't configured correctly.\n"" "" * At least one of the expected database tables doesn't exist.\n"" "" * The SQL was invalid.\n"" ""Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"" ""The full error: %s"" ) % ( connection . settings_dict [ 'NAME' ] , e )"
derive DatabaseCache from the BaseDatabaseCache base class.,class DatabaseCache ( BaseDatabaseCache ) :
"call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.","t = super ( SafeText , self ) . __add__ ( rhs )"
derive Serializer from the base.Serializer base class.,class Serializer ( base . Serializer ) :
return a string 'Raw content'.,return 'Raw content'
"try,",try :
"call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.","super ( CheckboxInput , self ) . __init__ ( attrs )"
"call the function importlib.import_module with an argument serializer_module, substitute it for module.",module = importlib . import_module ( serializer_module )
substitute _itervalues for values.,values = _itervalues
"call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.",db = router . db_for_write ( self . cache_model_class )
"python_2_unicode_compatible decorator,",@ python_2_unicode_compatible
return nothing.,return
"call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.","result = middleware . process_exception ( request , e )"
return first end elements of list chunk.,return chunk [ : end ]
raise an exception.,raise
define the method resolve_context with 2 arguments: self and context.,"def resolve_context ( self , context ) :"
"otherwise if vale is not an instance of ConvertingList and value is an instance of list type,","elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :"
"writer is an instance of MigrationWriter class, created with an argument migration.",writer = MigrationWriter ( migration )
"call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.",return baseconv . base62 . encode ( int ( time . time ( ) ) )
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"if ImportError, rename it to e, exception is caught,",except ImportError as e :
define the method add_root_elements with 2 arguments: self and handler.,"def add_root_elements ( self , handler ) :"
return the value under the language_code key of the self._app_dict dictionary.,return self . _app_dict [ language_code ]
"try,",try :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.","localize = kwargs . get ( 'localize' , False )"
"take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,",name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
return self.__name.,return self . __name
"define the function ungettext with 3 arguments: singular, plural and number.","def ungettext ( singular , plural , number ) :"
from email.mime.multipart import MIMEMultipart into default name space.,from email . mime . multipart import MIMEMultipart
from django.core.handlers import base into default name space.,from django . core . handlers import base
"if vale is None or an empty string,","if value in ( None , '' ) :"
"substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.","return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name"
"'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'. if not,",else :
import module sys.,import sys
call the function write with an argument sep.,write ( sep )
"call the function urlparse with an argument url, substitute the result for url_info.",url_info = urlparse ( url )
substituet node for value under the name key of the parser._namedCycleNodes dictionary.,parser . _namedCycleNodes [ name ] = node
"return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.","return SsiNode ( filepath , parsed )"
"otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,",elif user_settings [ key ] != default_settings [ key ] :
call the method self.add_handlers with 2 arguments: logger and handlers.,"self . add_handlers ( logger , handlers )"
"from django.template.loader import get_template, select_template.","from django . template . loader import get_template , select_template"
import module copy.,import copy
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.",raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' )
import module datetime.,import datetime
"get the value under the 'locale' key of the options dictionary, substitute it for locale.",locale = options . get ( 'locale' )
return style.,return style
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
initial is boolean False.,initial = False
"evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.",return http . parse_cookie ( raw_cookie )
"decorator stringfilter,",@ stringfilter
"if args is None,",if args is None :
"call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.","app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )"
"for every chunk in content.chunks function return value,",for chunk in content . chunks ( ) :
define the method as_table with an argument self.,def as_table ( self ) :
"raise CommandError exception with string ""The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM."", with '%s' replaced with po_path, as argument.","raise CommandError ( ""The %s file has a BOM (Byte Order Mark). "" ""Django only supports .po files encoded in "" ""UTF-8 and without any BOM."" % po_path )"
"substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,",security_logger = logging . getLogger ( 'django.security.%s' % e . __class__ . __name__ )
"call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.",return self . _create_attachments ( self . _create_alternatives ( msg ) )
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the method warnings.warn with 2 arguments: string ""No fixture data found for '%s'. (File format may be invalid.)"",","warnings . warn ( ""No fixture data found for '%s'. (File format may be "" ""invalid.)"" % fixture_name , RuntimeWarning )"
"try,",try :
"from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.","from django . db import connections , router , transaction , DEFAULT_DB_ALIAS"
"call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.",res = instance . __dict__ [ self . name ] = self . func ( instance )
"try,",try :
derive the class TranslatableFile from the object class.,class TranslatableFile ( object ) :
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,"@ register . filter ( is_safe = True , needs_autoescape = True )"
"if fixture_name is not equal to string 'initial_data' and fixture_files is false,",if fixture_name != 'initial_data' and not fixture_files :
f.required is boolean False.,f . required = False
substitute kw for self.__kw.,self . __kw = kw
return an empty string.,return ''
raise an exception.,raise
from django.db.migrations.state import ProjectState into default name space.,from django . db . migrations . state import ProjectState
import module warnings.,import warnings
"if ValidationError exception is caught,",except ValidationError :
"if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.",return None if timeout is None else time . time ( ) + timeout
"call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.","translation = self . _new_gnu_trans ( localedir , use_null_fallback )"
return context.,return context
"match rest string with self.WORD_PATTERN regex, substitute the result for m.",m = self . WORD_PATTERN . match ( rest )
"if self.localize is true,",if self . localize :
"if priority is false,",if not priority :
"if view_function is not a callable function,",if not callable ( view_func ) :
call the method self.add_error with 2 arguments: None and errors.,"self . add_error ( None , errors )"
convert arg to an integer.,arg = int ( arg )
"try,",try :
from django.utils.translation import ugettext as _ into default name space.,from django . utils . translation import ugettext as _
return an instance of DebugNode class.,return DebugNode ( )
raise a ValidationError exception with arguments self.message and code set to self.code.,"raise ValidationError ( self . message , code = self . code )"
define the method nud with 2 arguments: self and parser.,"def nud ( self , parser ) :"
"call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks, and date_checks, respectively.","unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )"
define the function check_for_migrations with 2 arguments: app_config and connection.,"def check_for_migrations ( app_config , connection ) :"
"called with 2 arguments: singular and trimmed, write the result to out. if not,",else :
do nothing.,pass
"call the method self.check_test with an argument value, if it evaluates to true,",if self . check_test ( value ) :
"raise an TemplateSyntaxError exception with an argument string ""'for' statements should use the format 'for x in y': %s"",","raise TemplateSyntaxError ( ""'for' statements should use the format"" "" 'for x in y': %s"" % token . contents )"
"return field_type, field_params and field_notes.","return field_type , field_params , field_notes"
"for every k in keys,",for k in keys :
"call the function urlsplit with an argument location, substitute the result for bits.",bits = urlsplit ( location )
step is an string 'any'.,step = 'any'
"if connection exists dont change it, if not call the get_connection function with username set to auth_user,","connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )"
"get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element","connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]"
"if elt is an instance of Group class,","if isinstance ( elt , Group ) :"
"try,",try :
"call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.","return type . __new__ ( cls , name , ( ) , d )"
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.,raise ValueError ( 'Unable to configure root ' 'logger: %s' % e )
"if self.required is boolean true,",if self . required :
"covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,",guid_attrs [ 'isPermaLink' ] = str ( item [ 'unique_id_is_permalink' ] ) . lower ( )
"if children is true, copy children list to self.children, otherwise self.children is an empty list.",self . children = children [ : ] if children else [ ]
append list containing string '--no-location' to self.msguniq_options.,self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
"call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,","return cls ( file_dict [ 'filename' ] , file_dict [ 'content' ] , file_dict . get ( 'content-type' , 'text/plain' ) )"
"subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,",kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
self.cleaned_data is an empty dictionary.,self . cleaned_data = { }
substitute sys.stdin for fd.,fd = sys . stdin
"from django.utils.six.moves import cPickle as pickle, into default namespace.",from django . utils . six . moves import cPickle as pickle
"call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,","return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )"
define the method __nonzero__ with an argument self.,def __nonzero__ ( self ) :
"and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or', result of the function inflix called with 2 arguments, integer 7, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and', result of the function prefix called with 2 arguments, integer 8, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context), for 'not in', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=', result of the function inflix called with 2 arguments, integer 10 and, lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than y.eval(context) for '<', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=', call the function OPERATORS.items, for every key and op in result,","for key , op in OPERATORS . items ( ) :"
"if endbmatch is true,",if endbmatch :
"format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function, force_text with an argument e, for every e in self, return the result. define the method as_text with an argument self.",def as_text ( self ) :
call the function time.sleep with argument integer 1.,time . sleep ( 1 )
"RemovedInDjango19Warning and stacklevel set to integer 2. if not,",else :
if length of args is greater than 4.,if len ( args ) > 4 :
"remove the first element from self.command_stack, assign the result to command and source, respectively.","command , source = self . command_stack . pop ( )"
"__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',","__all__ = ( 'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' , 'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' , 'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' , 'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' , 'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' , 'CheckboxSelectMultiple' , 'MultiWidget' , 'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' , )"
raise an exception.,raise
raise an ImportError exception.,raise ImportError
"call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.",return self . flatten ( ) == other . flatten ( )
"call the function base64.b64decode with an argument raw_data, substitute the result for data.",data = base64 . b64decode ( raw_data )
from django.utils.translation import get_language into default name space.,from django . utils . translation import get_language
"if use_base_manager is true,",if use_base_manager :
"substitute the result for sequence_sql. if sequence_sql is true,",if sequence_sql :
"if plan is true,",if plan :
"return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,","return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )"
if _default is None,if _default is None :
convert number into an integer and substitute it for number,number = int ( number )
"m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,",m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
derive the class InterBoundaryIter from the six.Iterator base class.,class InterBoundaryIter ( six . Iterator ) :
"if old_style_list is false,",if not old_style_list :
define the method __init__ with an argument self.,def __init__ ( self ) :
"if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.",return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
"define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.","def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :"
"use it as an argument for the call to the function force_text, return the result. define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.","def as_text ( self , attrs = None , ** kwargs ) :"
"call the method dictConfigClass with an argument config, call the method configure on the result.",dictConfigClass ( config ) . configure ( )
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.,"def make_template_fragment_key ( fragment_name , vary_on = None ) :"
"if UnicodeEncodeError exception is caught,",except UnicodeEncodeError :
"replace '%s' in a string ""Error: %s"" with error_text, write it to self.stderr.","self . stderr . write ( ""Error: %s"" % error_text )"
"and join the results into a string, separated with '|' character, return the result. derive the class Lexer from the object base class.",class Lexer ( object ) :
substitute abspath for abspathu.,abspathu = abspath
"call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,",d = self . config [ m . groups ( ) [ 0 ] ]
"call the method field.clean with an argument field_value, append the result to clean_data.",clean_data . append ( field . clean ( field_value ) )
"call the method connection.introspection.table_names, substitute the result for tables.",tables = connection . introspection . table_names ( )
"call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.","return number_format ( value , use_l10n = use_l10n )"
call the method check_for_language.cache_clear.,check_for_language . cache_clear ( )
substitute settings.MEDIA_URL for base_url.,base_url = settings . MEDIA_URL
"substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name. call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,","compile_func = partial ( generic_tag_compiler , params = params , varargs = varargs , varkw = varkw , defaults = defaults , name = function_name , takes_context = takes_context , node_class = InclusionNode )"
do nothing.,pass
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET. if Exception exception is caught,",except Exception :
"if not,",else :
"re.U and re.S, substitute the result for re_chars. call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,","re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )"
"join the result in a string separated by whitespaces, substitute it for s. return s.",return s
"return string first element of t, '=', second element of t.","return '%s=%s' % ( t [ 0 ] , t [ 1 ] )"
call the method self.handle_startendtag with tag and attrs as the arguments.,"self . handle_startendtag ( tag , attrs )"
return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'. define the function validate_ipv6_address with an argument value.,def validate_ipv6_address ( value ) :
from django.utils.translation import ungettext and ugettext as _ into default name space.,"from django . utils . translation import ungettext , ugettext as _"
"and param_dict, respectively. evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.","return callback ( request , ** param_dict )"
"call the function _trans.get_language, return the result.",return _trans . get_language ( )
do nothing.,pass
"for every template_name in template_name_list,",for template_name in template_name_list :
define the method _get_image_dimensions with self class instance as the argument.,def _get_image_dimensions ( self ) :
define the method _ipython with an argument self.,def _ipython ( self ) :
define the method has_changed with an argument self.,def has_changed ( self ) :
define the function _dec with an argument func.,def _dec ( func ) :
"if not,",else :
"call the method self._cull with db, cursor and now as arguments.","self . _cull ( db , cursor , now )"
"otherwise if ch equals a string '.',",elif ch == '.' :
"where '%s' are replaced by sel.file and errors, respectively. if command.verbosity is greater than integer 0,",elif command . verbosity > 0 :
"define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.","def __init__ ( self , stream_or_string , ** options ) :"
"return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.","return Page ( * args , ** kwargs )"
call the functoin callback with an argument self.,callback ( self )
derive the class ImageField from the base class FileField class.,class ImageField ( FileField ) :
"define the method __init__ with arguments self, stream and boundary.","def __init__ ( self , stream , boundary ) :"
call the function check_for_migrations with arguments app_config and connection.,"check_for_migrations ( app_config , connection )"
substitute basestring for string_types.,"string_types = basestring ,"
"define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,","def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :"
"verbosity set to verbosity, interactive set to interactive and using set to db. call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,","models . signals . pre_syncdb . send ( sender = app_config . models_module , app = app_config . models_module , create_models = create_models , verbosity = verbosity , interactive = interactive , db = db )"
call the self.load_middleware method.,self . load_middleware ( )
"append the result to app_dirs. join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,","old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )"
"add together self.to, self.cc and self.bcc, return the result.",return self . to + self . cc + self . bcc
ORDERING_FIELD_NAME is a string 'ORDER'.,ORDERING_FIELD_NAME = 'ORDER'
"call the strftime function with argument string ""%Y%m%d-%H%M%S"" on the return value of the function datetime.datetime.now, substitute the result for timestamp.","timestamp = datetime . datetime . now ( ) . strftime ( ""%Y%m%d-%H%M%S"" )"
"raise an ValueError exception with string ""The file cannot be reopened."" as an argument.","raise ValueError ( ""The file cannot be reopened."" )"
substitute bp for lbp.,lbp = bp
"call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.",hfile = msvcrt . get_osfhandle ( _fd ( f ) )
"get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.",connection = connections [ options . get ( 'database' ) ]
"if AttributeError exception is caught,",except AttributeError :
define the function rjust with 2 arguments value and arg.,"def rjust ( value , arg ) :"
"call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,","mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] , connection = connection )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.","return force_bytes ( s , encoding , strings_only , errors )"
"raise an TypeError with an argument string ""The argument `field` must be `None` when the `error`argument contains errors for multiple fields."".","raise TypeError ( ""The argument `field` must be `None` when the `error` "" ""argument contains errors for multiple fields."" )"
"if self.can_import_settings is true,",if self . can_import_settings :
"""Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n"", where '""%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version, '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true, or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command. call the method translation.activate with an argument settings.LANGUAGE_CODE.",translation . activate ( settings . LANGUAGE_CODE )
"define the get_many method with self class instance, keys and version set to None as arguments.","def get_many ( self , keys , version = None ) :"
value is None.,value = None
"substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.","self . template_cache [ key ] = ( template , origin )"
"call the method self.configurator.convert with an argument value, substitute the result for result.",result = self . configurator . convert ( value )
"call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.","new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )"
"if m is false and p is lesser than integer 0,",if not m and p < 0 :
derive the class ManagementForm from the Form base class.,class ManagementForm ( Form ) :
"define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.","def __init__ ( self , regex , callback , default_args = None , name = None ) :"
if exit_code is not equal to integer 3.,if exit_code != 3 :
"if var is not an instance of six.string_types,","if not isinstance ( var , six . string_types ) :"
"if 'HTTP_HOST' is contained in self.META,",elif 'HTTP_HOST' in self . META :
from django.forms.utils import from_current_timezone and to_current_timezone into default name space.,"from django . forms . utils import from_current_timezone , to_current_timezone"
"for every pattern in self.url_patterns,",for pattern in self . url_patterns :
"if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',","if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :"
from django.forms.formsets import everything into default name space.,from django . forms . formsets import *
substitute attrs and choices for self.attrs and self.choices,"self . attrs , self . choices = attrs , choices"
from django.db.migrations.loader import AmbiguityError into default name space.,from django . db . migrations . loader import AmbiguityError
"replace '%(size)d with bytes, substitute the result for value. otherwise if bytes is smaller than MB,",elif bytes < MB :
"if fields is true and f.name is not contained in fields,",if fields and f . name not in fields :
"call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.","return do_ifequal ( parser , token , True )"
"yield string ""# * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"" as the result.","yield ""# * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"""
"self.__name is a string ""%s%02d%02d"", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,","self . __name = ""%s%02d%02d"" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )"
replace every occurrence of '\r' in s with '\\r'.,"s = s . replace ( '\r' , '\\r' )"
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.,class CacheKeyWarning ( DjangoRuntimeWarning ) :
define the method ext_convert with 2 arguments: self and value.,"def ext_convert ( self , value ) :"
"raise an TemplateSyntaxError exception with an argument string ""%r expected at least one variable assignment"",","raise TemplateSyntaxError ( ""%r expected at least one variable "" ""assignment"" % bits [ 0 ] )"
derive the class StreamingHttpResponse from the HttpResponseBase base class.,class StreamingHttpResponse ( HttpResponseBase ) :
from django.core.exceptions import ImproperlyConfigured into default name space.,from django . core . exceptions import ImproperlyConfigured
"default set to None and help set to string 'Overrides the default address where the live server (used ' 'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.' call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.","test_runner_class = get_runner ( settings , self . test_runner )"
"if six.PY3 is true,",if six . PY3 :
"if doublecolon_len is greater than best_doublecolon_len,",if doublecolon_len > best_doublecolon_len :
skip this loop iteration.,continue
substitute encoding for self.encoding.,self . encoding = encoding
"if not,",else :
"divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.",x = int ( x // len ( to_digits ) )
define the function _parse_header_params with an argument s.,def _parse_header_params ( s ) :
creation_counter is an integer 0.,creation_counter = 0
"call the method msg.as_bytes, substitute the result for msg_data.",msg_data = msg . as_bytes ( )
"if Exception exception is caught,",except Exception :
"break from the loop execution,",break
value is an empty string.,value = ''
"if not,",else :
"call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.",self . _non_form_errors = self . error_class ( e . error_list )
substitute SafeText for SafeUnicode.,SafeUnicode = SafeText
remove key element from self.keyOrder dictionary.,self . keyOrder . remove ( key )
"raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.","raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )"
"otherwise if ch equals a string ')',",elif ch == ')' :
"use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs. call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.","super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )"
define the function is_valid_path with arguments path and urlconf set to None.,"def is_valid_path ( path , urlconf = None ) :"
from django.utils.encoding import smart_text and is_protected_type into default name space.,"from django . utils . encoding import smart_text , is_protected_type"
call the function urlresolvers.set_urlconf with urlconf as the argument.,urlresolvers . set_urlconf ( urlconf )
"otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',","elif options [ 'method' ] in ( 'thread' , 'threaded' ) :"
define the function parse_time with an argument value.,def parse_time ( value ) :
"from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.","from . messages import ( CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR , CRITICAL )"
"throw an exception with string ""unexpected call to parse_endtag"" as the message. search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.","match = _html_parser . endendtag . search ( rawdata , i + 1 )"
"if ImportError exception is caught,",except ImportError :
raise an AttributeError with an argument attr.,raise AttributeError ( attr )
for every pattern in allowed_hosts:,for pattern in allowed_hosts :
"skip this loop iteration,",continue
"call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.","return self . _stream . readline ( * args , ** kwargs )"
"if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,",if code in _supported and check_for_language ( code ) :
call the function write with an argument arg.,write ( arg )
first and second are None.,first = second = None
define the method resolve with an argument self.,"def resolve ( self , path ) :"
"if ignore is true,",if ignore :
"call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,","changes = autodetector . changes ( graph = loader . graph , trim_to_apps = app_labels or None , convert_apps = app_labels or None , )"
define the function sanitize_separators with an argument value.,def sanitize_separators ( value ) :
self.active_readers is an integer 0.,self . active_readers = 0
"and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions. extra_files is an empty list.",extra_files = [ ]
self.translate is boolean True.,self . translate = True
"if fname doesnt start with self._dir and fname file path doesnt exists,",if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
"content_type, length of content, None and None. decorator classmethod.",@ classmethod
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if formatter is true,",if formatter :
"for every __ in range of integers from 0 up to sep subtracted from fill_to,",for __ in xrange ( fill_to - sep ) :
"if parent is false,",if not parent :
"if AttributeError exception is caught,",except AttributeError :
derive the class EmailMessage from the object base class.,class EmailMessage ( object ) :
"if not,",else :
and prefix as node.prefix. call the method node.replace with an argument decorated.,node . replace ( decorated )
"substitute self.urlconf_module for self.urlconf_module. try,",try :
define the function last with an argument value.,def last ( value ) :
append data to self.children.,self . children . append ( data )
url is an empty string.,url = ''
"instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,","return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )"
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
do nothing.,pass
"call the method self.render, return the result.",return self . render ( )
increment bytes_read by length of bytes.,bytes_read += len ( bytes )
"call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.","import_module ( '%s.%s' % ( app_config . name , module_to_search ) )"
"define the method __exit__ with arguments: self, exc_type, exc_value and traceback.","def __exit__ ( self , exc_type , exc_value , traceback ) :"
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
"get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,","globalpath = os . path . join ( os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )"
define the function callable with an argument obj.,def callable ( obj ) :
input_type is a string 'email'.,input_type = 'email'
"if not,",else :
"if path_to_remove is file,",if path . isfile ( path_to_remove ) :
return an empty string.,"return """""
define the method open with argument self.,def open ( self ) :
buffer_ is None.,buffer_ = None
"default set to boolean False and help set to string 'Tells Django to stop running the test suite after first failed test.'. call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',","parser . add_argument ( '--testrunner' , action = 'store' , dest = 'testrunner' , help = 'Tells Django to use specified test runner class instead of ' 'the one specified by the TEST_RUNNER setting.' ) ,"
define the method _existing_object with 2 arguments: self and pk.,"def _existing_object ( self , pk ) :"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"define the method handle_file_complete with 3 arguments: self, old_field_name and counters.","def handle_file_complete ( self , old_field_name , counters ) :"
from django.utils.six.moves import http_cookies into default name space.,from django . utils . six . moves import http_cookies
"if response is True,",if response :
substitute value under the cache_key key of the _format_cache dictionary for cached.,cached = _format_cache [ cache_key ]
call the function ensure_echo_on.,ensure_echo_on ( )
substitute level for rv.,rv = level
import memcache.,import memcache
derive the class DateTimeInput from the DateTimeBaseInput base class.,class DateTimeInput ( DateTimeBaseInput ) :
substitute callback for self._callback.,self . _callback = callback
substitute first header_end elements of chunk list for header.,header = chunk [ : header_end ]
derive class SingleZipReader for zipfile.ZipFile base class.,class SingleZipReader ( zipfile . ZipFile ) :
"split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,","args [ 1 : 2 ] = [ '""%s""' % arg for arg in args [ 1 ] . split ( "","" ) ]"
"slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,",if len ( language [ p + 1 : ] ) > 2 :
"evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.",DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
"if ch is true,",if ch :
from django.core.management.utils import find_command and popen_wrapper into default name space.,"from django . core . management . utils import find_command , popen_wrapper"
from email.mime.base import MIMEBase into default name space.,from email . mime . base import MIMEBase
"kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,","kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )"
"if kwarg is true,",if kwarg :
derive the class SsiNode from Node base class.,class SsiNode ( Node ) :
delete the value under key key of self._cache dictionary.,del self . _cache [ key ]
"call the method datetime.datetime with an argument unpacked dictionary kw, return the result.",return datetime . datetime ( ** kw )
define the method __iter__ with an argument self.,def __iter__ ( self ) :
define the method __init__ with 2 arguments self and file.,"def __init__ ( self , file ) :"
return message.,return message
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.,return { 'MEDIA_URL' : settings . MEDIA_URL }
"call the sys.exc_info function, assign the result to et, ev and tb, respectively.","et , ev , tb = sys . exc_info ( )"
"if self.field.required is true and self.form has an attribute 'required_css_class' ,","if self . field . required and hasattr ( self . form , 'required_css_class' ) :"
call the method self.add_filters with 2 arguments: logger and filters.,"self . add_filters ( logger , filters )"
from io import BytesIO into default name space.,from io import BytesIO
"if NameError exception is caught,",except NameError :
substitute nonlocal_root for tuple root.,"root , = nonlocal_root"
"call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.",thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
"get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,","self . dry_run = options . get ( 'dry_run' , False )"
"call the function pformat with an argument sys.modules, append the result for output.",output . append ( pformat ( sys . modules ) )
"value under the 'unique' key of the extra_params dictionary is boolean True,",extra_params [ 'unique' ] = True
"call the method app.rpartition with an argument '.', substitute last element of the result for app.",app = app . rpartition ( '.' ) [ - 1 ]
"if value is an instance of datetime.datetime class,","if isinstance ( value , datetime . datetime ) :"
return an instance of CsrfTokenNode class.,return CsrfTokenNode ( )
"if KeyboardInterrupt exception is caught,",except KeyboardInterrupt :
"if nodelist is true,",if nodelist :
"try,",try :
if s is an instance of SafeData.,"if isinstance ( s , SafeData ) :"
"define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.","def sql_destroy_indexes ( app_config , style , connection ) :"
define the method _get_request with self class instance as argument.,def _get_request ( self ) :
from django.db import models and DEFAULT_DB_ALIAS into default name space.,"from django . db import models , DEFAULT_DB_ALIAS"
"raise an TemplateSyntaxError exception with an argument string ""Invalid templatetag argument: '%s'. Must be one of: %s"",","raise TemplateSyntaxError ( ""Invalid templatetag argument: '%s'."" "" Must be one of: %s"" % ( tag , list ( TemplateTagNode . mapping ) ) )"
substitute self._meta for opts.,opts = self . _meta
"substitute the result for file_name. call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,",file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
delete entry under the name key of the moves.__dict__ dictionary.,del moves . __dict__ [ name ]
"return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.","basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) , 'conf' , 'locale' ) , 'locale' ]"
define the method validate_number with self class instance and number as arguments.,"def validate_number ( self , number ) :"
return nothing.,return
return response.,return response
substitute connection_reset for self.connection_reset.,self . connection_reset = connection_reset
"for every migration in merge_migrations. try,",try :
"increment length of boundary by integer 6, substitute the result for self._rollback.",self . _rollback = len ( boundary ) + 6
"otherwise if value is an instance of decimal.Decimal, float or six.integer_types,","if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :"
define the method __nonzero__ with an argument self.,def __nonzero__ ( self ) :
"replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '""' with '\\""' in the previous result,","return value . replace ( '\\' , '\\\\' ) . replace ( '""' , '\\""' ) . replace ( ""'"" , ""\\'"" )"
"if os has an attribute 'utime',","if hasattr ( os , 'utime' ) :"
append filepath to tried.,tried . append ( filepath )
yield and empty string as the result.,yield ''
"call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.",_localtime = pytz . timezone ( settings . TIME_ZONE )
import module re.,import re
for every cat in value under the 'categories' key of the self.feed dictionary.,for cat in self . feed [ 'categories' ] :
"if six.PY2 is true,",if six . PY2 :
return list_ and boolean False.,"return list_ , False"
"for every key and val in return value of the function six.iteritems called with an arguments self.extra_context. call the method context.push with an argument unpacked dictionary values, with the result as an argument,",with context . push ( ** values ) :
has_bz2 is boolean True.,has_bz2 = True
"replace '%s' in string ""%s, from %s"" with second and first element of the first targets row, respectively,","self . stdout . write ( self . style . MIGRATE_LABEL ( "" Target specific migration: "" ) + ""%s, from %s"" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )"
return form.,return form
derive the class BaseContext from the object base class.,class BaseContext ( object ) :
"value under the 'author_name' key of the item dictionary and dictionary with an entry: ""http://purl.org/dc/elements/1.1/"" for ""xmlns:dc"". if value under the 'pubdate' key of the item dictionary is not None,",if item [ 'pubdate' ] is not None :
"multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,","max_age = max ( 0 , delta . days * 86400 + delta . seconds )"
"call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.",fixture_name = os . path . basename ( fixture_name )
for every f in return value of the return value of the method chain.from_iterable called with argument:,for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","def __init__ ( self , * args , ** kwargs ) :"
"try,",try :
"raise an CommandError with an argument string ""couldn't extract file %s to %s: %s"", where '%s' is replaced with filename, tempdir and e.","raise CommandError ( ""couldn't extract file %s to %s: %s"" % ( filename , tempdir , e ) )"
"call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,","handler . addQuickElement ( ""summary"" , item [ 'description' ] , { ""type"" : ""html"" } )"
"call the self.style.MIGRATE_HEADING method, with string ""Operations to perform:"" as an argument,","self . stdout . write ( self . style . MIGRATE_HEADING ( ""Operations to perform:"" ) )"
import module re.,import re
"call the function no_style, substitute the result for self.style.",self . style = no_style ( )
"created with 2 arguments: required as boolean False and widget set to HiddenInput. value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )"
"substitute elements of tuple boundary to end and next, respectively.","end , next = boundary"
"missing_args_message is an string ""Enter at least one application label."".","missing_args_message = ""Enter at least one application label."""
"from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.","from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError"
pid is integer 1.,pid = 1
define the method encoding with arguments self and value.,"def encoding ( self , value ) :"
"if KeyError and TypeError exceptions are caught,","except ( KeyError , TypeError ) :"
DELETION_FIELD_NAME is a string 'DELETE'.,DELETION_FIELD_NAME = 'DELETE'
append self.choices to args.,args . append ( self . choices )
from django.utils.text import get_text_list and capfirst into default name space.,"from django . utils . text import get_text_list , capfirst"
append an empty string to list hextets.,hextets += [ '' ]
"for every f in post_sql_fields,",for f in post_sql_fields :
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.,chunk_size = self . DEFAULT_CHUNK_SIZE
renamed_methods is an tuple.,renamed_methods = ( )
import module operator.,import operator
"call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.","result . _choices = copy . deepcopy ( self . _choices , memo )"
"call the method value.rjust with an argument, arg converted into a integer, return the result.",return value . rjust ( int ( arg ) )
define the function import_library with an argument taglib_module.,def import_library ( taglib_module ) :
substitute mapped_tokens for self.tokens.,self . tokens = mapped_tokens
"if second element of the i-th row of relations equals table_name, rel_to is string 'self',","rel_to = ""self"" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )"
substitute self.remaining for size.,size = self . remaining
"call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.","parts = fixture_name . rsplit ( '.' , 2 )"
"call the method dig1.digest, use the result as an argument for the call to the function dig2.update.",dig2 . update ( dig1 . digest ( ) )
"e.args is a tuple containing string ""Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s,","e . args = ( ""Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s"" % { 'app_label' : obj . object . _meta . app_label , 'object_name' : obj . object . _meta . object_name , 'pk' : obj . object . pk , 'error_msg' : force_text ( e ) } , )"
call the method posixpath.splitext with an argument the_path.,"base , ext = posixpath . splitext ( the_path )"
derive the class RssFeed from the SyndicationFeed base class.,class RssFeed ( SyndicationFeed ) :
"call the method self.as_data, for every error in the result.",for error in self . as_data ( ) :
"for name in attributes of models_signals object,",for name in dir ( models . signals ) :
"define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.","def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :"
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.,"from django . utils . encoding import force_text , python_2_unicode_compatible"
"define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.","def _truncate_html ( self , length , truncate , text , truncate_len , words ) :"
"call the function meta with 3 arguments: name, base and d.","return meta ( name , bases , d )"
"if MultiPartParserError exception is caught,",except MultiPartParserError :
derive the class BaseConfigurator from object base class.,class BaseConfigurator ( object ) :
self._post_parse_error is boolean True.,self . _post_parse_error = True
return result.,return result
"call the object d with arguments stream_or_string and unpacked dictionary options, return the result.","return d ( stream_or_string , ** options )"
self.regexes is an empty dictionary.,self . regexes = { }
"if not,",else :
"open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.","stream = open ( output , 'w' ) if output else None"
substitute utc for tzinfo.,tzinfo = utc
return None.,return None
"call the method cursor.execute with string ""SELECT cache_key, expires FROM %s WHERE cache_key = %%s"" as argument,","cursor . execute ( ""SELECT cache_key, expires FROM %s "" ""WHERE cache_key = %%s"" % table , [ key ] )"
"if it is not equal to stat.S_IREAD, raise an exception.",raise
define __enter__ method with self as the argument.,def __enter__ ( self ) :
"raise an ValueError exception with an argument string ""Base36 input too large"".","raise ValueError ( ""Base36 input too large"" )"
_cached_filenames is an empty list.,_cached_filenames = [ ]
"raise an TemplateSyntaxError exception with an argument string ""'for' tag received an invalid argument: %s"",","raise TemplateSyntaxError ( ""'for' tag received an invalid argument:"" "" %s"" % token . contents )"
"append field.widget.media to media, substitute the result for media.",media = media + field . widget . media
"substitute '%s' with title in the string "" [ ] %s"", write it to the standard output.","self . stdout . write ( "" [ ] %s"" % title )"
field_notes is an empty list.,field_notes = [ ]
"for every key and value in list created out of the elements of the result of the call to the method attrs.items,","for key , value in list ( attrs . items ( ) ) :"
"if is_templatized is true,",if is_templatized :
del self._post,del self . _post
define the method __init__ with 2 arguments: self and obj.,"def __init__ ( self , obj ) :"
"help is a string, containing ""Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."".","help = ""Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."""
call the method self.connection.quit.,self . connection . quit ( )
"if not,",else :
"if other is an instance of BaseContext class,","if isinstance ( other , BaseContext ) :"
"if length of words is greater than length,",if len ( words ) > length :
"msg is an string ""django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead."".","msg = ( ""django.utils.text.javascript_quote() is deprecated. "" ""Use django.utils.html.escapejs() instead."" )"
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
define the method write_message with arguments self and message.,"def write_message ( self , message ) :"
"call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.","text = unicodedata . normalize ( 'NFC' , self . _wrapped )"
"call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.",get_function_code = operator . attrgetter ( _func_code )
"if not,",else :
from django.utils import datastructures into default name space.,from django . utils import datastructures
return result.,return result
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.,"class SafeMIMEText ( MIMEMixin , MIMEText ) :"
"and self.ns for ""xmlns"". if not,",else :
increment factor by one.,factor += 1
substitute hashlib.sha256 for digest.,digest = hashlib . sha256
"call the function middleware_method with request and response as the arguments, substitute the result for response.","response = middleware_method ( request , response )"
return boolean False.,return False
"return an instance of SafeText, created with an argument data.",return SafeText ( data )
"covert to lowercase language element at (p+1)-th index, append it to the previous result, covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it. convert fist p elements of language to lowercase, append '_' to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
return boolean False.,return False
"call the key.lower method for every key in self.extra_headers, join the results into a header_names.",header_names = [ key . lower ( ) for key in self . extra_headers ]
ser_fmt is None.,ser_fmt = None
return self._count.,return self . _count
"call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.","return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )"
import module errno.,import errno
"call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,","if not self . compile_filter_error ( token , e ) :"
substitute complain for __iadd__.,__iadd__ = complain
"raise an TemplateSyntaxError exception with an argument ""Searching for value. Expected another value but found end of string: %s"",","raise TemplateSyntaxError ( ""Searching for value. Expected another "" ""value but found end of string: %s"" % subject )"
intrans is boolean True.,intrans = True
from django.apps import apps into default name space.,from django . apps import apps
"call the method other.__cast, substitute the result for other.",other = other . __cast ( )
"result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years', result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month', result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks', result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days', result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours', result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes', if d is not an instance of datetime.datetime,","if not isinstance ( d , datetime . datetime ) :"
"define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.","def lazy_number ( func , resultclass , number = None , ** kwargs ) :"
"call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.",addr = parseaddr ( force_text ( addr ) )
"if OSError exception is caught,",except OSError :
"if second element of t is boolean True,",if t [ 1 ] is True :
"if ""__call__"" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.","return any ( ""__call__"" in klass . __dict__ for klass in type ( obj ) . __mro__ )"
"register.tag decorator,",@ register . tag
define the function set_script_prefix with an argument prefix.,def set_script_prefix ( prefix ) :
NON_FIELD_ERRORS is an string '__all__'.,NON_FIELD_ERRORS = '__all__'
"call the function force_bytes with arguments k and self.encoding, substitute the result for k.","k = force_bytes ( k , self . encoding )"
"call the function self.regex.search with an argument path, substitute the result for match.",match = self . regex . search ( path )
return boolean upload.,return upload
"if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,","if ( isinstance ( args [ 0 ] , SafeData ) and getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :"
"call the function warnings.simplefilter with 2 arguments: string ""default"" and RemovedInNextVersionWarning.","warnings . simplefilter ( ""default"" , RemovedInNextVersionWarning )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
output is an empty list.,output = [ ]
"if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
__locks is an empty dictionary.,_locks = { }
"if IndexError exception is caught,",except IndexError :
"substitute choice for choice_value and choice_label, respectively.","choice_value , choice_label = choice"
"append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,","return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]"
"with lock,",with lock :
"if value under the ""RUN_MAIN"" key of the os.environ dictionary equals to string ""true"",","if os . environ . get ( ""RUN_MAIN"" ) == ""true"" :"
"define the function npgettext with 4 arguments: context, singular, plural and number.","def npgettext ( context , singular , plural , number ) :"
define the function trim_whitespace with an argument s.,def trim_whitespace ( s ) :
return errors.,return errors
"call the method self._resolve, substitute the result for _module.",_module = self . _resolve ( )
return value.,return value
define the method render with 2 arguments self and context.,"def render ( self , context ) :"
substitute sysid for self.sysid.,self . sysid = sysid
substitute content_length for self._content_length.,self . _content_length = content_length
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.,"handler . addQuickElement ( ""author"" , item [ ""author_email"" ] )"
call the method obj.save.,obj . save ( )
"value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,",self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
"if origin is true,",if origin :
define the method dst with 2 arguments: self and dt.,"def dst ( self , dt ) :"
extend comment_notes list with field_notes.,comment_notes . extend ( field_notes )
"if ns_pattern is true,",if ns_pattern :
"if level is not None,",if level is not None :
call the method self._assert_mutable.,self . _assert_mutable ( )
"format string ' gettext(%r) ' with g, write it to out.",out . write ( ' gettext(%r) ' % g )
raise an exception.,raise
break the execution of the smallest enclosing loop.,break
"if message is an instance of ValidationError class and message.code is contained in error_messages,","if ( isinstance ( message , ValidationError ) and message . code in error_messages ) :"
substitute Select for widget.,widget = Select
return hard copy of self.keyOrder elements.,return self . keyOrder [ : ]
"find position of '-' in the index of the language, substitute the result for p.",p = language . find ( '-' )
"if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.",self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
"with the result, call the method connection.cursor, with the result as cursor,",with connection . cursor ( ) as cursor :
"instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.",return Truncator ( value ) . chars ( length )
"if f.unique is true, substitute ""UNIQUE "" for unique, otherwise unique is an empty string.","unique = ""UNIQUE "" if f . unique else """""
return path.,return path
"raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.","raise CommandError ( ""Unknown application: %s"" % app_label )"
derive the class Error from base class CheckMessage.,class Error ( CheckMessage ) :
"try,",try :
"define the method setlist with 3 arguments: self, key and list_.","def setlist ( self , key , list_ ) :"
count is a property object with _get_count as a getter method.,count = property ( _get_count )
"append string "".moves.urllib_error"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.","error = sys . modules [ __name__ + "".moves.urllib_error"" ]"
"join elements of self.fed into a string, return the result.",return '' . join ( self . fed )
fixture_files is an empty list.,fixture_files = [ ]
substitute file for self.file.,self . file = file
"call the method content.message, substitute the result for content.",content = content . message ( )
substitute _upload_handlers for self.__upload_handlers.,self . _upload_handlers = upload_handlers
"try,",try :
return msg_count.,return msg_count
define the method nud with 2 arguments: self and parser.,"def nud ( self , parser ) :"
"if not,",else :
do nothing.,pass
substitute value under n key of dictionary d for d.,d = d [ n ]
define the function humanize with an argument dirname.,def humanize ( dirname ) :
raise an exception.,raise
call the method logger.removeHandler with an argument handler.,logger . removeHandler ( handler )
msg_count is an integer 0.,msg_count = 0
"convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,","response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )"
"raise an TemplateSyntaxError exception with an argument string ""second argument to 'regroup' tag must be 'by'"".","raise TemplateSyntaxError ( ""second argument to 'regroup' tag must be 'by'"" )"
return value.,return value
if fd is greater or equal to integer 0.,if fd >= 0 :
"if lib is false,",if not lib :
substitute form.cleaned_data for cleaned_data.,cleaned_data = form . cleaned_data
"_itervalues is a string ""values"".","_itervalues = ""values"""
call the method self.create_parser with arguments prog_name and subcommand.,"parser = self . create_parser ( prog_name , subcommand )"
substitute current_app for ns.,ns = current_app
substitute BytesIO for stream_class.,stream_class = BytesIO
"define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.","def run_checks ( self , app_configs = None , tags = None ) :"
"convert language to lowercase, return it.",return language . lower ( )
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.,targets = executor . loader . graph . leaf_nodes ( )
"if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,",if settings . DEBUG_PROPAGATE_EXCEPTIONS :
"if middleware has an attribute 'process_response',","if hasattr ( middleware , 'process_response' ) :"
"from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.","from os . path import join , normcase , normpath , abspath , isabs , sep , dirname"
"get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.",verbosity = options . get ( 'verbosity' )
"if self.regex is not an instance of a six.string_types type,","if isinstance ( self . regex , six . string_types ) :"
"substitutions dictionary. call the function mark_safe with an argument template, formated with substitutions, return the result.",return mark_safe ( template % substitutions )
"obj is None,",obj = None
"if m is true,",if m :
call the method self.open.,self . open ( )
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.",max_width = int ( self . max_width . resolve ( context ) )
define the method e with an argument self.,def e ( self ) :
import module unicodedata.,import unicodedata
return an empty string.,return ''
"try,",try :
opts.fields is None.,opts . fields = None
"if common_ancestor is None,",if common_ancestor is None :
define the function split_url with an argument url.,def split_url ( url ) :
"if migrations_directory is not a directory,",if not os . path . isdir ( migrations_directory ) :
from django.utils.text import get_text_list into default name space.,from django . utils . text import get_text_list
"if args is true,",if args :
"if settings.DEBUG is true,",if settings . DEBUG :
return nothing.,return
call the function force_str with raw data as an argument and substitute it for rawdata.,rawdata = force_str ( rawdata )
assign obj to the obj field of self instance of this class.,self . obj = obj
"try,",try :
"for every var in self._varlist. if not,",else :
"if ImportError, renamed to e, exception is caught,",except ImportError as e :
from django.core.handlers.wsgi import WSGIHandler into default name space.,from django . core . handlers . wsgi import WSGIHandler
"if timeout equals to DEFAULT_TIMEOUT,",if timeout == DEFAULT_TIMEOUT :
"if end is not a '>' or '/>' character,","if end not in ( "">"" , ""/>"" ) :"
"tpl is an string ""DTDForbidden(name='{}', system_id={!r}, public_id={!r})"".","tpl = ""DTDForbidden(name='{}', system_id={!r}, public_id={!r})"""
"id is a string ""literal"".","id = ""literal"""
"call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,",for error in self . errors . as_data ( ) [ field ] :
define the method path with arguments self and name.,"def path ( self , name ) :"
return nothing.,return
substitute MultipleHiddenInput for hidden_widget.,hidden_widget = MultipleHiddenInput
"call the function handle_extensions exts, substitute self.extensions.",self . extensions = handle_extensions ( exts )
"if f.primary_key is true,",if f . primary_key :
substitute None for self.style_func.,self . style_func = None
"call the function getcallargs with an argument current,",getcallargs ( current )
"if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:",match = ( pattern == '*' or pattern . startswith ( '.' ) and ( host . endswith ( pattern ) or host == pattern [ 1 : ] ) or pattern == host )
"if comment_notes is true,",if comment_notes :
"cat for 'term'. if value under the 'feed_copyright' key of the self.feed dictionary is not None,",if self . feed [ 'feed_copyright' ] is not None :
return self.value.,return self . value
"define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
"substitute the result for data. if AttributeError exception is caught,",except AttributeError :
from django.utils.encoding import force_bytes into default name space.,from django . utils . encoding import force_bytes
call the function shutil.copymode with arguments old_path and new_path.,"shutil . copymode ( old_path , new_path )"
"get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',",return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
"if filename is true,",if filename :
"help is a string, ""Prints the custom table modifying SQL statements for the given app name(s)."".","help = ""Prints the custom table modifying SQL statements for the given app name(s)."""
"call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.",input_text = ugettext_lazy ( 'Change' )
substitute io.BytesIO for BytesIO.,BytesIO = io . BytesIO
return self.empty_form.media.,return self . empty_form . media
"try,",try :
"where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get, return value of the function six.text_type called with an argument post, return value of the function six.text_type, called with an argument cookies and return value of the function six.text_type called with an argument meta. define the function bytes_to_text with 2 arguments s and encoding.","def bytes_to_text ( s , encoding ) :"
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.,temp_lib . filters [ name ] = lib . filters [ name ]
import module warnings.,import warnings
"finally perform,",finally :
"append the result to the result of the method, self.as_widget, return the resulting string. call the method self.as_widget, return the result.",return self . as_widget ( )
"call the method apps.get_model with exclude as an argument, substitute it for model.",model = apps . get_model ( exclude )
define the method add_arguments with self class instance and parse as the arguments.,"def add_arguments ( self , parser ) :"
"call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,","for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :"
"call the method regex_match.group with an argument integer 1, substitute the result for lang_code.",lang_code = regex_match . group ( 1 )
"if not,",else :
"instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.","return ContextDict ( self , * args , ** kwargs )"
"if self.timezone is false,",if not self . timezone :
"from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.","from django . core . management . utils import ( handle_extensions , find_command , popen_wrapper )"
"call the function get_language, split the result by '-', substitute the first element of the result for base_lang.",base_lang = get_language ( ) . split ( '-' ) [ 0 ]
"if e.errno is not equal to errno.ENOENT,",if e . errno != errno . ENOENT :
"and with safe set to bytes string ""/#%[]=:;$&()+,!?*@'~"", return the result. define function filepath_to_uri with path as the argument.",def filepath_to_uri ( path ) :
"if test_runner_class has an 'option_list' attribute,","if hasattr ( test_runner_class , 'option_list' ) :"
"call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,","super ( Command , self ) . handle ( 'project' , project_name , target , ** options )"
derive the class OVERLAPPED from the Structure base class.,class OVERLAPPED ( Structure ) :
"define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.","def execute ( self , * args , ** options ) :"
"if not,",else :
"if encoded contains string ""\\"" and if encoded doesnt start with the double quote symbol,","if ""\\"" in encoded and not encoded . startswith ( '""' ) :"
"call the value.natural_key method, substitute the result for natural.",natural = value . natural_key ( )
define the function iri_to_uri with iri as an argument.,def iri_to_uri ( iri ) :
"if not,",else :
extra_params is an instance of the class OrderedDict.,extra_params = OrderedDict ( )
derive the class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"if sep is None,",if sep is None :
return total_forms.,return total_forms
derive the class TemplateDoesNotExist form the base class Exception.,class TemplateDoesNotExist ( Exception ) :
"if app_label is not contained in executor.loader.migrated_apps,",if app_label not in executor . loader . migrated_apps :
"strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,",if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
derive class Command from the base class BaseCommand.,class Command ( BaseCommand ) :
"if m is false,",if not m :
"join root and f into a file, substitute it for f.","f = os . path . join ( root , f )"
derive the class TypedChoiceField from the base class ChoiceField class.,class TypedChoiceField ( ChoiceField ) :
"define the method __promise__ with 4 arguments: cls, klass, funcname and method.","def __promise__ ( cls , klass , funcname , method ) :"
"if cword equlals a integer 1,",if cword == 1 :
"subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.",self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
"from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.","from ctypes . wintypes import BOOL , DWORD , HANDLE"
import module sys.,import sys
"for every app_config in return value of the call to the function apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
add k to seen.,seen . add ( k )
return ipv4_unpacked.,return ipv4_unpacked
resolved_path is an empty list.,resolved_path = [ ]
from django.core.mail.utils import DNS_NAME into default name space.,from django . core . mail . utils import DNS_NAME
"default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a number.' ) , }"
define the function unlock with argument f.,def unlock ( f ) :
"if message is not None,",if message is not None :
"call the method datetime_safe.new_datetime with an argument date, substitute the result for date.",date = datetime_safe . new_datetime ( date )
"if settings.ADMINS is false,",if not settings . ADMINS :
"if not,",else :
"from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.","from django . utils . safestring import mark_safe , SafeData , mark_for_escaping"
call the method app.start.,app . start ( )
return result.,return result
"join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,",return mark_safe ( '\n' . join ( output ) )
import module warnings.,import warnings
"if pk is an instance of OneToOneField or ForeignKey classes,","if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :"
"if first element of text equals '#',",if text [ 0 ] == '#' :
"if want_unicode is false,",if not want_unicode :
from django.forms.widgets import everything into default name space.,from django . forms . widgets import *
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.,"from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT"
"call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.","recipients = [ sanitize_address ( addr , email_message . encoding ) for addr in email_message . recipients ( ) ]"
raise an exception.,raise
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.,"def list ( self , * args , ** kwargs ) :"
"if AttributeError exception is caught,",except AttributeError :
errors is an empty list.,errors = [ ]
substitute c_ulong for ULONG_PTR.,ULONG_PTR = c_ulong
do nothing.,pass
"if use_workaround is boolean False,",if not use_workaround :
substitute so and se for sys.stdout and sys.stderr.,"sys . stdout , sys . stderr = so , se"
"default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'. call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',","parser . add_argument ( '--failfast' , action = 'store_true' , dest = 'failfast' , default = False , help = 'Tells Django to stop running the test suite after first ' 'failed test.' ) ,"
"if KeyError exception is caught,",except KeyError :
"define the method get_response, with self class instance and request as the arguments.","def get_response ( self , request ) :"
append block to the value under the name key of self.blocks dictionary.,self . blocks [ name ] . append ( block )
if other_dict is an instance of MultiValueDict.,"if isinstance ( other_dict , MultiValueDict ) :"
"message, code as a string 'ambiguous_timezone' and params as params, and third element of the return value of the function sys.exc_info. return value.",return value
"define the function get_bytes_from_wsgi with environ, key and default as arguments.","def get_bytes_from_wsgi ( environ , key , default ) :"
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.,if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
"get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.","t = getattr ( _active , ""value"" , None )"
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.,return { 'STATIC_URL' : settings . STATIC_URL }
import module glob.,import glob
append mw_instance.process_view at the end of self._view_middleware.,self . _view_middleware . append ( mw_instance . process_view )
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.","return func ( * self . __args , ** self . __kw )"
define the function dec with an argument func.,def dec ( func ) :
"call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.",obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
from django.utils.encoding import force_str into default name space.,from django . utils . encoding import force_str
args is an empty string.,args = ''
options is a list containing a tuple with 2 entries: string '--help' and None.,"options = [ ( '--help' , None ) ]"
derive the class Parser form the base class object.,class Parser ( object ) :
"substitute '%s' with first element of bits and block_name, respectively. append block_name to parser.__loaded_blocks.",parser . __loaded_blocks . append ( block_name )
substitute style.ERROR for style.ERROR_OUTPUT.,style . ERROR_OUTPUT = style . ERROR
"divide value by max_value, multiply the result with max_width, substitute it for ratio.",ratio = ( value / max_value ) * max_width
"if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.","connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )"
"define the method fetch_command, with arguments self and subcommand.","def fetch_command ( self , subcommand ) :"
"missing_args_message is a string ""You must provide an application name."".","missing_args_message = ""You must provide an application name."""
"if words is true, substitute re_words for regex, if not substitute re_chars for regex.",regex = re_words if words else re_chars
"otherwise if ch equals a string '$',",elif ch == '$' :
"bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.",DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
return boolean False.,return False
add self.form.error_css_class to extra_classes set.,extra_classes . add ( self . form . error_css_class )
"from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.","from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal"
"raise an TemplateSyntaxError exception with an argument string ""%r received an invalid token: %r"", where '%r' is replaced with,","raise TemplateSyntaxError ( ""%r received an invalid token: %r"" % ( bits [ 0 ] , remaining_bits [ 0 ] ) )"
"is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,","if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :"
translators_comment_start is None.,translators_comment_start = None
"floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.",base36 . append ( digits [ i // j ] )
"if exp is None or exp is greater than the return value of the call to the function time.time,",if exp is None or exp > time . time ( ) :
"from django.utils.encoding import smart_text, force_str and force_text into default name space.","from django . utils . encoding import smart_text , force_str , force_text"
"ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.","ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )"
return boolean True.,return True
if Exception exception is caught.,except Exception :
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
add data to seen_data set.,seen_data . add ( data )
do nothing.,pass
derive the class BoundField from the base class object.,class BoundField ( object ) :
"return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv. from django.conf import settings into default namespace.",from django . conf import settings
"call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',",netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
"otherwise is settings.USE_TI is true,",elif settings . USE_TZ :
"if autoescape is true,",if autoescape :
"call the method token.split_contents, substitute the result for args.",args = token . split_contents ( )
"value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image', and third element of the return value of the function sys.exc_info. if f has an attribute 'seek' and if f.seek is an callable object,","if hasattr ( f , 'seek' ) and callable ( f . seek ) :"
"call the method bit.group with an argument integer 0, yield the result.",yield bit . group ( 0 )
import module sys.,import sys
append contents to plural.,plural . append ( contents )
"formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2. call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.","return f ( * args , ** kwargs )"
define the function render_value_in_context with 2 arguments: value and context.,"def render_value_in_context ( value , context ) :"
"call the method smart_split_re.finditer with an argument text, for every bit in result,",for bit in smart_split_re . finditer ( text ) :
"if using_sysrandom is false,",if not using_sysrandom :
"zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.","unpacked_vars = dict ( zip ( self . loopvars , item ) )"
"define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.","def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :"
stats is a list with 2 elements: 2 integers 0.,"stats [ : ] = [ 0 , 0 ]"
"return value under the name key of the data dictionary, if it doesnt exists, return None.","return data . get ( name , None )"
"if args is true,",if not args :
"call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.","_dict = func ( * resolved_args , ** resolved_kwargs )"
define the method has_key with 2 arguments: self and key.,"def has_key ( self , key ) :"
remove first 7 elements form template.,template = template [ 7 : ]
"register.tag decorator,",@ register . tag
"for every exclude in excludes,",for exclude in excludes :
"call the function six.text_type with s as an argument, substitute result for s.",s = six . text_type ( s )
substitute tokens for self.tokens.,self . tokens = tokens
"call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.","migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )"
derive the class ImproperlyConfigured from the Exception base class.,class ImproperlyConfigured ( Exception ) :
define the function parse_http_date with an argument date.,def parse_http_date ( date ) :
"substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.","return '%s-%s-%s' % ( y , m , d )"
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","ch , escaped = next ( pattern_iter )"
"call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.","super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )"
return value.,return value
call method __init__ with argument params from the base class of the FileBaseCache.,"super ( FileBasedCache , self ) . __init__ ( params )"
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
from django.utils import timezone into default name space.,from django . utils import timezone
"convert bytes to floating point number, substitute it for bytes.",bytes = float ( bytes )
"otherwise if value is an instance of datetime.time,","elif isinstance ( value , datetime . time ) :"
_encoding is None.,_encoding = None
"call the function conditional_escape with an argument contents, substitute the result for contents.",contents = conditional_escape ( contents )
"call the method node.render with an argument context, append the result to the nodelist.",nodelist . append ( node . render ( context ) )
break loop execution.,break
"try,",try :
"if upto is not equal to length of token,",if upto != len ( token ) :
"table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,","table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )"
"call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.",subcommand_cls = self . fetch_command ( cwords [ 0 ] )
if code is not None,if code is not None :
"sum m and value under the medium key of the base dictionary, substitute it for m.",m = m + base [ medium ]
timeout is a integer -1.,timeout = - 1
"if AttributeError exception is caught,",except AttributeError :
"if proto is greater than or equal to integer 2,",if proto >= 2 :
"and args, respectively. call the method handle_default_options with an argument options.",handle_default_options ( options )
where '%s' is replaced with self.id. define the method display with an argument self.,def display ( self ) :
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.,"raise ValueError ( 'Unable to configure logger ' '%r: %s' % ( name , e ) )"
"if not,",else :
return the value under the self.data.month key of the MONTHS_AP dictionary.,return MONTHS_AP [ self . data . month ]
do nothing.,pass
"call the encode function on the Header class instance, created with argument val, substitute the result for val.",val = Header ( val ) . encode ( )
"if not,",else :
call the method self.validate_key with argument key.,self . validate_key ( key )
plural is an empty list.,plural = [ ]
"from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.","from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR"
register is an instance of Library class.,register = Library ( )
"convery value into a tuple, substitute it for value.",value = tuple ( value )
"and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments. for every char in key,",for char in key :
input_type is a string 'checkbox'.,input_type = 'checkbox'
"for every bit in bits,",for bit in bits :
errors is an empty list.,errors = [ ]
"languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback, substitute the result for translation. if translation has an attribute '_catalog',","if not hasattr ( translation , '_catalog' ) :"
define the method encoding with an argument self.,def encoding ( self ) :
"result of the call to the function _ with an argument string 'Tuesday' for 1, result of the call to the function _ with an argument string 'Wednesday' for 2, result of the call to the function _ with an argument string 'Thursday' for 3, result of the call to the function _ with an argument string 'Friday' for 4, result of the call to the function _ with an argument string 'Saturday' for 5, and result of the call to the function _ with an argument string 'Sunday' for 6. WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,","WEEKDAYS_ABBR = { 0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) , 5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' ) }"
"define the method __init__ with self, server and params as arguments.","def __init__ ( self , server , params ) :"
"raise an CommandError exception with an argument string '""%s"" is not a valid port number or address:port pair.',","raise CommandError ( '""%s"" is not a valid port number ' 'or address:port pair.' % options [ 'addrport' ] )"
"for every domain in domains,",for domain in domains :
"remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.","location = params . pop ( 'LOCATION' , '' )"
"take two characters from the i-th element of rawdata, if they are not equal to the string '</',","assert rawdata [ i : i + 2 ] == ""</"" , ""unexpected call to parse_endtag"""
def method add_arguments with self class instance and parser as the arguments.,"def add_arguments ( self , parser ) :"
"if first and second element of sys.version_info are equal to integers 3 and 4, respectively,","if sys . version_info [ : 2 ] >= ( 3 , 4 ) :"
define the method save with 2 arguments: self and commit set to boolean True.,"def save ( self , commit = True ) :"
TOKEN_COMMENT is integer 3.,TOKEN_COMMENT = 3
call the __init__ method with an argument name from the base class of the MovedModule class.,"super ( MovedModule , self ) . __init__ ( name )"
substitute the last element of parts for parts.,parts = parts [ : - 1 ]
return instance.,return instance
substitute self._request_middleware for request_middleware.,self . _request_middleware = request_middleware
return default_key_func.,return default_key_func
"call the method self.configurator.convert with an argument value, substitute the result for result.",result = self . configurator . convert ( value )
"while model_dependencies is true,",while model_dependencies :
"if obj_list is None,",if obj_list is None :
import module logging.,import logging
return obj.,return obj
call the method logging._acquireLock.,logging . _acquireLock ( )
call the method self.configure_root with 2 arguments: root and boolean True.,"self . configure_root ( root , True )"
"property decorator,",@ property
"substitute the result for starttag_re. call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.",endtag_re = re . compile ( '</%s>' % tags_re )
"if exception of the class Exception, as e, is caught,",except Exception as e :
"call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.","register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )"
"if las equals integer 2,",if last == 2 :
"call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',","parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )"
"if param is true,",if param :
"if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,","return all ( getattr ( self , attr ) == getattr ( other , attr ) for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )"
substitute serializers for _serializers.,_serializers = serializers
"strip message_context of ""'"" characters from both ends, substitute the result for message_context.","message_context = message_context . strip ( ""'"" )"
"if AttributeError exception is caught,",except AttributeError :
return dec.,return dec
"if initial is not None,",if initial is not None :
"call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.","new_key = self . key_func ( key , self . key_prefix , version )"
return nothing.,return
"try,",try :
"call the method self.stdout.write with string "" No migrations to apply."" as an argument.","self . stdout . write ( "" No migrations to apply."" )"
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.,"raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )"
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.,"from django . core . mail . utils import CachedDnsName , DNS_NAME"
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
"if s is an instance of bytes or Promise and s._delegate_bytes is true,","if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :"
define the function add_library with 2 arguments: self and lib.,"def add_library ( self , lib ) :"
return result.,return result
self._validate_unique is boolean False.,self . _validate_unique = False
do nothing.,pass
"call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,",return mark_safe ( six . text_type ( value ) )
do nothing.,pass
"call the method base.__dict__.items, for every attr and value in the result,","for attr , value in base . __dict__ . items ( ) :"
"otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,",elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
"from datetime import datetime, timedelta and tzinfo into default name space.","from datetime import datetime , timedelta , tzinfo"
return ZERO.,return ZERO
"call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.","value = bytes_to_text ( value , self . encoding )"
"args is an list with 3 initial elements self.name, self.value and self.attrs.","args = [ self . name , self . value , self . attrs ]"
define the method prepare_value with 2 arguments: self and value.,"def prepare_value ( self , value ) :"
from django.utils import six into default name space.,from django . utils import six
define the method extract with 2 arguments: self and to_path set to an empty string.,"def extract ( self , to_path = '' ) :"
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
"default as boolean False and help as a string ""Don't break long message lines into several lines."". call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',","parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' , default = False , help = ""Don't write '#: filename:line' lines."" )"
from django.forms.formsets import BaseFormSet and formset_factory into default name space.,"from django . forms . formsets import BaseFormSet , formset_factory"
"call the method ustring_re.sub with 2 arguments: fix and s, return the result.","return ustring_re . sub ( fix , s )"
define the method is_rendered with an argument self.,def is_rendered ( self ) :
"call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.","cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )"
define the method get_limit_choices_to with arguments self.,def get_limit_choices_to ( self ) :
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.,root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
"self.choices is an list containing an tuple with 2 elements: an empty string and string ""---------"".","self . choices = [ ( """" , ""---------"" ) ]"
"with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.","with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :"
"if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES. if Exception exception is caught,",except Exception :
define the function address_string with an argument self.,def address_string ( self ) :
return endpos.,return endpos
"define the method __init__ with 3 arguments: self, template_string and origin.","def __init__ ( self , template_string , origin ) :"
"call the method parser.compile_filter with an argument string ""var|%s"", where '%s' is replaced with rest, substitute the result for filter_expr.","filter_expr = parser . compile_filter ( ""var|%s"" % ( rest ) )"
"if expires is an instance of datetime.datetime class,","if isinstance ( expires , datetime . datetime ) :"
"otherwise if name is not None and filter_func is None,",elif name is not None and filter_func is None :
output is an empty list.,output = [ ]
substitute smart_text for smart_str.,smart_str = smart_text
substitute c for factory.,factory = c
"for every loader_name in settings.TEMPLATE_LOADERS,",for loader_name in settings . TEMPLATE_LOADERS :
"for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.",return all ( w . is_hidden for w in self . widgets )
"if not,",else :
from django.utils.html import conditional_escape and format_html into default name space.,"from django . utils . html import conditional_escape , format_html"
"TemplateSyntaxError and VariableDoesNotExist. from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,","from django . template . base import ( Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string , filter_raw_string )"
substitute config dictionary value under '()' key for factory.,factory = config [ '()' ]
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.,"raise ValueError ( 'Unable to configure ' 'filter %r: %s' % ( name , e ) )"
derive the class EscapeText from six.text_type and EscapeData base classes.,"class EscapeText ( six . text_type , EscapeData ) :"
"raise an CommandError exception with an argument string ""%r conflicts with the name of an existing Python module and cannot be used ""","raise CommandError ( ""%r conflicts with the name of an existing "" ""Python module and cannot be used as an app "" ""name. Please try another name."" % app_name )"
"m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:",m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
"default is boolean False, and help is a string ""Don't colorize the command output."". if self.args is true,",if self . args :
"otherwise if first element of second row of args equals a string '1',",elif args [ 1 ] [ 0 ] == '1' :
"join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,","sql_files . append ( os . path . join ( app_dir , ""%s.%s.sql"" % ( opts . model_name , backend_name ) ) )"
call the function is_naive with an argument obj.,if is_naive ( obj ) :
"for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,","for obj in PythonDeserializer ( objects , ** options ) :"
app_list is an instance of a class OrderedDict.,app_list = OrderedDict ( )
define the method full_clean with an argument self.,def full_clean ( self ) :
"if empty_label is an instance of list or tuple type,","if isinstance ( empty_label , ( list , tuple ) ) :"
"instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,","for t in Lexer ( src , origin ) . tokenize ( ) :"
"otherwise if end is not an instance of string type,","elif not isinstance ( end , str ) :"
"use the result as an argument for the call to the function bytes, return the result. define the method __cast with an argument self.",def __cast ( self ) :
return self.,return self
"from django.db import connections, DEFAULT_DB_ALIAS and migrations into default name space.","from django . db import connections , DEFAULT_DB_ALIAS , migrations"
"get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.","formatters = config . get ( 'formatters' , EMPTY_DICT )"
"locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.","locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )"
"if IndexError exception is caught,",except IndexError :
"define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.","def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :"
"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the ""default"" database.'. call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',","parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True , help = 'Tells Django not to load any initial data after database synchronization.' )"
call the function logging_config_func with an argument DEFAULT_LOGGING.,logging_config_func ( DEFAULT_LOGGING )
expires is None.,expires = None
"if not,",else :
LOCK_EX is a hexadecimal 2.,LOCK_EX = 0x2
return split.,return split
import module logging.,import logging
"define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.","def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :"
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.,raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
"raise an CommandError with an argument string ""errors happened while running msgattrib\n%s"", where '%s' is replaced with errors.","raise CommandError ( ""errors happened while running msgattrib\n%s"" % errors )"
substitute name for new_mod.,new_mod = name
append bit to split.,split . append ( bit )
"if objects_in_fixture equals integer 0,",if objects_in_fixture == 0 :
define the function compress_sequence with an argument sequence.,def compress_sequence ( sequence ) :
return an empty string.,return ''
"if self.body is true,",if self . body :
"if AttributeError exception is caught,",except AttributeError :
"call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,","locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )"
return result.,return result
"name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True, return value of the method models.TextField called with argument name set to a string 'value', and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True. table_output is an empty list.",table_output = [ ]
where '%r' is replaced with first element of bits. append first element of bits to 'end'. substitute the result for end_tag.,end_tag = 'end' + bits [ 0 ]
base is an instance of Media class.,base = Media ( )
"if self.max_length is not None and length of file_name is grater than self.max_length,",if self . max_length is not None and len ( file_name ) > self . max_length :
"get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.","opfunc . __doc__ = getattr ( int , opname ) . __doc__"
return a string '%02d' formated with self.data.month.,"return '%s %s' % ( self . f ( ) , self . a ( ) )"
and database set to value under the 'database' key of the options dictionary. break the loop execution.,break
"if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.",self . extra_context = extra_context or { }
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
"call the self._lock.writer method, with the result perform the following,",with self . _lock . writer ( ) :
"register.tag decorator,",@ register . tag
increment res by element of to_digit at the digit index.,res = to_digits [ digit ] + res
"if item is not an instance of list or tuple class,","if not isinstance ( item , ( list , tuple ) ) :"
"call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,","s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )"
from django.forms.utils import flatatt and to_current_timezone into default name space.,"from django . forms . utils import flatatt , to_current_timezone"
return boolean True.,return True
import gettext module.,import gettext
"define the method bound_data with arguments self, data and initial.","def bound_data ( self , data , initial ) :"
import module os.,import os
"call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.","self . execute ( * args , ** cmd_options )"
"if length of version does not equals to integer 5, raise an exception.",assert len ( version ) == 5
"if csrf_token is not None,",if csrf_token is not None :
"if _cookie_allows_colon_in_names is False,",if not _cookie_allows_colon_in_names :
attrs as attrs_plus and choices as choice_label. substitute self.choice_input_class for sub_ul_renderer.choice_input_class.,sub_ul_renderer . choice_input_class = self . choice_input_class
"if value is not contained in result,",if value is not result :
define the method dict with an argument self.,def dict ( self ) :
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.,"conditions_nodelists = [ ( condition , nodelist ) ]"
"call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.","get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )"
"define the method add_fields with 3 arguments: self, form and index.","def add_fields ( self , form , index ) :"
prepend an empty string to hextets list.,hextets = [ '' ] + hextets
substitute value for value under the key key of safe_data dictionary.,safe_data [ key ] = value
"instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the result for to_py.","to_py = super ( ModelMultipleChoiceField , self ) . to_python"
"and warning as a string ""You cannot alter upload handlers after the upload has been processed."". parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.","parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )"
return None.,return None
"if not,",else :
cached_loaders is an empty list.,cached_loaders = [ ]
delete frame.,del frame
import module zipfile.,import zipfile
"join self.dirpath and self.file into a file path, substitute it for orig_file.","orig_file = os . path . join ( self . dirpath , self . file )"
"if TypeError exception is caught,",except TypeError :
curr is an empty string.,curr = ''
"if attr is contained in obj_dict,",if attr in obj_dict :
value is boolean False.,value = False
"if self has an '_post' attribute,","if hasattr ( self , '_post' ) :"
define the method render with 2 arguments self and context.,"def render ( self , context ) :"
"if s is instance of a class Promise,","if isinstance ( s , Promise ) :"
derive the class MultipleHiddenInput from the HiddenInput base class.,class MultipleHiddenInput ( HiddenInput ) :
_cookie_allows_colon_in_names is a boolean True.,_cookie_allows_colon_in_names = True
"if not,",else :
self._current is None.,self . _current = None
return key and pdict.,"return key , pdict"
derive the class PasswordInput from the TextInput base class.,class PasswordInput ( TextInput ) :
"for every sublist in second_item,",for sublist in second_item :
call the method self.validate_key with argument key.,self . validate_key ( key )
"get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,","self . localized_fields = getattr ( options , 'localized_fields' , None )"
substitute doublecolon_start for best_doublecolon_start.,best_doublecolon_start = doublecolon_start
define the method start_serialization with an argument self.,def start_serialization ( self ) :
"return result converted into an integer. if not,",else :
from django.core.management.sql import sql_indexes into default name space.,from django . core . management . sql import sql_indexes
"only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,","return ( form_class is not None and ( hasattr ( form_class , '_meta' ) and ( form_class . _meta . fields is not None or form_class . _meta . exclude is not None ) ) )"
"for every key in sorted list of user_settings,",for key in sorted ( user_settings ) :
"for every key and value in items of dictionary self,","for key , value in dict . items ( self ) :"
substitute app_or_project for self.app_or_project.,self . app_or_project = app_or_project
substitute fcntl.LOCK_SH for LOCK_SH.,LOCK_SH = fcntl . LOCK_SH
i is integer 365.,i = 365
substitute options for self.options.,self . options = options
define the function lower with an argument value.,def lower ( value ) :
return an empty list.,return [ ]
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
increment self.loaded_object_count by loaded_objects_in_fixture.,self . loaded_object_count += loaded_objects_in_fixture
"convert max_entries into a string, substitute it for self._max_entries.",self . _max_entries = int ( max_entries )
"if six.PY2 is true and path is not an instance of six.text_type type,","if six . PY2 and not isinstance ( path , six . text_type ) :"
"url_schemes is list of strings 'http', 'https' and 'ftp'.","url_schemes = [ 'http' , 'https' , 'ftp' ]"
args is an empty list.,args = [ ]
import module codecs.,import codecs
substitute content_type_extra for self.content_type_extra.,self . content_type_extra = content_type_extra
from django.core.files.move import file_move_safe into default name space.,from django . core . files . move import file_move_safe
"if self._pk_field equals self.fk,",if self . _pk_field == self . fk :
"append string "" Got this from the '%s' variable."" to error_msg, where '%s is replaced with self.parent_name.token.","error_msg += "" Got this from the '%s' variable."" % self . parent_name . token"
raise a SerializerDoesNotExist exception with an argument format.,raise SerializerDoesNotExist ( format )
"call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.","return _generate_cache_key ( request , method , headerlist , key_prefix )"
substitute template for self.template_name.,self . template_name = template
"if not,",else :
"if not,",else :
"call the function formats.localize_input with 2 arguments: value and self.format if true, if not,","return formats . localize_input ( value , self . format or formats . get_format ( self . format_key ) [ 0 ] )"
"call the method self.itervalues, return the list of results.",return list ( self . itervalues ( ) )
"RemovedInDjango19Warning and stacklevel as integer 2. try,",try :
"call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,","handler . startElement ( ""entry"" , self . item_attributes ( item ) )"
"append header to the string 'HTTP_', append the result to the list headerlist.",headerlist . append ( 'HTTP_' + header )
substitute choices for self.choices.,self . choices = choices
"if not,",else :
use global variable _supported.,global _supported
"define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,","def send_mass_mail ( datatuple , fail_silently = False , auth_user = None , auth_password = None , connection = None ) :"
substitute list containing element self for self.error_list.,self . error_list = [ self ]
define the method writer_leaves with an argument self.,def writer_leaves ( self ) :
define the method get_queryset with an argument self.,def get_queryset ( self ) :
"use the result as a key to get the value from the connections dictionary, substitute the result for connection. call the function check_for_migrations with 2 arguments: app_config and connection.","check_for_migrations ( app_config , connection )"
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
"if mtime is different than the value of dictionary _mtimes under the key filename,",if mtime != _mtimes [ filename ] :
"raise an InvalidTemplateLibrary exception with an argument string ""Template library %s does not have a variable named 'register'"",","raise InvalidTemplateLibrary ( ""Template library %s does not have "" ""a variable named 'register'"" % taglib_module )"
from django.utils import six into default name space.,from django . utils import six
"for every sql_file in sql_files,",for sql_file in sql_files :
"match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.","match = _html_parser . endtagfind . match ( rawdata , i )"
"if model is contained in created_models,",if model in created_models :
from django.core.validators import EMPTY_VALUES into default name space.,from django . core . validators import EMPTY_VALUES
import module socket.,import socket
"if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,","if ( isinstance ( data , Node ) and not data . negated and ( data . connector == conn_type or len ( data ) == 1 ) ) :"
substitute field for self.field.,self . field = field
"define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,","def modelformset_factory ( model , form = ModelForm , formfield_callback = None , formset = BaseModelFormSet , extra = 1 , can_delete = False , can_order = False , max_num = None , fields = None , exclude = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) :"
truncate first size number of elements of self.buffer.,self . buffer = self . buffer [ size : ]
derive the class RemovedInDjango19Warning from DeprecationWarning base class.,class RemovedInDjango19Warning ( DeprecationWarning ) :
"call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to print the SQL for. Defaults to the ' '""default"" database.' )"
"if not,",else :
"convert pattern to lowercase, substitute it for pattern.",pattern = pattern . lower ( )
"call the method self.emit_post_migrate with arguments verbosity, interactive and database.","self . emit_post_migrate ( verbosity , interactive , database )"
"call the method self.__dict__.copy, substitute the result for obj_dict.",obj_dict = self . __dict__ . copy ( )
"media is a property object of the current class, with _get_media as getter function.",media = property ( _get_media )
call the function sys.exit with argument integer 3.,sys . exit ( 3 )
"call the method logging.getLogger, substitute the result for root.",root = logging . getLogger ( )
call the method self.xml.endElement with an argument string 'natural',"self . xml . endElement ( ""natural"" )"
"open err_log flie in append mode with buffering size of input buffer, substitute the result for se.","se = open ( err_log , 'a+' , buffering )"
"if props is true,",if props :
do nothing.,pass
"call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.",keys = node . getElementsByTagName ( 'natural' )
define the method _get_scheme with self class instance as argument.,def _get_scheme ( self ) :
"if key_func is not of None type,",if key_func is not None :
"if ImportError exception is caught,",except ImportError :
"call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.","six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc_info ( ) [ 2 ] )"
"as the arguments, substitute the result for response. append the request to the end of the protected class member response._closable_objects.",response . _closable_objects . append ( request )
"get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.","lib = libraries . get ( library_name , None )"
"define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.","def sql_delete ( app_config , style , connection , close_connection = True ) :"
"tf is an instance of TimeFormat class, created with an argument value.",tf = TimeFormat ( value )
sublist is an empty string.,sublist = ''
define the method __init__ with 2 arguments: self and unpacked list dicts.,"def __init__ ( self , * dicts ) :"
"if six.PY3 is true,",if six . PY3 :
"otherwise if self.nodelist_false is true,",elif self . nodelist_false :
"if AttributeError exception is caught,",except AttributeError :
derive the class HttpResponseBadRequest from the HttpResponse base class.,class HttpResponseBadRequest ( HttpResponse ) :
nodelist.contains_nontext is boolean True.,nodelist . contains_nontext = True
call the self.close method.,self . close ( )
"join self.dirpath and thefile in a string, substitute the result for work_file.","work_file = os . path . join ( self . dirpath , thefile )"
"call the function data with 3 arguments: d.year, d.month and d.day, return the result.","return date ( d . year , d . month , d . day )"
"concatenate CheckCommand.help to string 'Deprecated. Use ""check"" command instead. ', substitute it for help.","help = 'Deprecated. Use ""check"" command instead. ' + CheckCommand . help"
"if lookup is false,",if not lookup :
"call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.","self . nodelist = compile_string ( template_string , origin )"
"call the function now.replace with microseconds set to integer 0, substitute the result for now.",now = now . replace ( microsecond = 0 )
"for every event and node in self.event_stream,","for event , node in self . event_stream :"
from django.utils import six into default name space.,from django . utils import six
"call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.","app_list_value = app_list . setdefault ( app_config , [ ] )"
return qs.,return qs
if self._fname is None:,if self . _fname is None :
"if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it. if cc contains item 'private' and kwargs contains item 'public',",if 'private' in cc and 'public' in kwargs :
if number is an instance of int type.,"if isinstance ( number , int ) :"
"if failures is true,",if failures :
"call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.","self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )"
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.,raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
append ':' and ipv4_address to result.,result += ':' + ipv4_address
return nothing.,return
"for every app_config in reversed list created out of the return value of the function apps.get_app_configs,",for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
raise an exception.,raise
code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'. return new_value.,return new_value
"try,",try :
"if template_dirs is true,",if template_dirs :
define the method __next__ with an argument self.,def __next__ ( self ) :
"convert self.option_list into a boolean, return the inverted value.",return not bool ( self . option_list )
call the method parser.delete_first_token.,parser . delete_first_token ( )
"if elt is an instance of Choice or NonCapture classes,","if isinstance ( elt , ( Choice , NonCapture ) ) :"
"open new_path file in 'wb' mode, with file descriptor renamed to new_file,","with open ( new_path , 'wb' ) as new_file :"
"if KeyError exception is caught,",except KeyError :
substitute list with an element block_name for parser.__loaded_blocks.,parser . __loaded_blocks = [ block_name ]
"get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.","self . widgets = getattr ( options , 'widgets' , None )"
"call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.",result = factory ( ** kwargs )
define the method __iter__ with an argument self.,def __iter__ ( self ) :
from django.utils import six into default name space.,from django . utils import six
"call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,","result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )"
"from .registry import register, run_checks, tag_exists and Tags into default name space.","from . registry import register , run_checks , tag_exists , Tags"
"define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.","def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :"
"and var_arg, respectively. if constant_arg is true,",if constant_arg :
nodelist_false is an instance of NodeList.,nodelist_false = NodeList ( )
"convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.",pieces = accept_language_re . split ( lang_string . lower ( ) )
"days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.","days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )"
raise an TemplateSyntaxError exception with an argument error_msg.,raise TemplateSyntaxError ( error_msg )
__all__ is an list containing string 'SelectDateWidget'.,__all__ = [ 'SelectDateWidget' ]
"if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.",PY3 = sys . version_info [ 0 ] == 3
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
"if self_closing is true or tagname is contained in html4_singlets,",if self_closing or tagname in html4_singlets :
"try,",try :
return value.,return value
"widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,","widgets = ( DateInput ( attrs = attrs , format = date_format ) , TimeInput ( attrs = attrs , format = time_format ) )"
define the method __init__ with 2 arguments: self and format_string.,"def __init__ ( self , format_string ) :"
"call the method parser.parse_args with an argument args set to args, substitute the result for defaults.",defaults = parser . parse_args ( args = args )
"slots is a list with an element, slots.",slots = [ slots ]
call the method self.xml.startElement with argument string 'object' and an empty dictionary.,"self . xml . startElement ( ""object"" , { } )"
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.",raise NotImplementedError ( 'subclasses of BaseCache must provide a delete() method' )
return integer 12.,return 12
define the function urlquote_plus with 2 arguments: url and safe set to an empty string.,"def urlquote_plus ( url , safe = '' ) :"
"call the method cursor.execute with string ""UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s"" as argument,","cursor . execute ( ""UPDATE %s SET value = %%s, expires = %%s "" ""WHERE cache_key = %%s"" % table , [ b64encoded , exp , key ] )"
import module calendar.,import calendar
raise an ValidationError exception with an argument errors.,raise ValidationError ( errors )
"if middleware has an attribute 'process_response',","if hasattr ( middleware , 'process_response' ) :"
define the serialize content with an argument self.,def serialize ( self ) :
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.,if settings . USE_X_FORWARDED_HOST and ( 'HTTP_X_FORWARDED_HOST' in self . META ) :
derive the class IfEqualNode from Node base class.,class IfEqualNode ( Node ) :
"call the method self.open, substitute the result for stream_created.",stream_created = self . open ( )
"call the function get_wsgi_application, return the result.",return get_wsgi_application ( )
"if delta is smaller than integer 0,",if delta < 0 :
"if not,",else :
call the os.umask function with argument old_umask.,os . umask ( old_umask )
"if instance is None,",if instance is None :
asvar is None.,asvar = None
"call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,","data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )"
"evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.",return smart_text ( self . name or '' )
"if format is not contained in return value of the method serializers.get_public_serializer_formats,",if format not in serializers . get_public_serializer_formats ( ) :
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.,"setattr ( style , role , termcolors . make_style ( ** format ) )"
"if index is lesser than integer 0,",if index < 0 :
"if not,",else :
return media.,return media
"if self doesnt have an '_body' attribute,","if not hasattr ( self , '_body' ) :"
"choice and i, substitute the result for w. call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,","output . append ( format_html ( self . inner_html , choice_value = force_text ( w ) , sub_widgets = '' ) )"
return input_val.,return input_val
"get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.","loggers = config . get ( 'loggers' , EMPTY_DICT )"
"if help_texts is not None,",if help_texts is not None :
define the method write with 2 arguments: self and s.,"def write ( self , s ) :"
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.,"handler . addQuickElement ( ""rights"" , self . feed [ 'feed_copyright' ] )"
"call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.",value = self . to_python ( value ) . strip ( )
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.,temp_lib . filters [ name ] = lib . filters [ name ]
define the function to_language with an argument locale.,def to_language ( locale ) :
return nothing.,return
found is boolean True.,found = True
"try,",try :
"get field.name from the obj, substitute it for related.","related = getattr ( obj , field . name )"
"multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.",count2 = ( since - ( seconds * count ) ) // seconds2
"for every e in errors convert e into a string and append it to a string ' * ',",output . append ( '\n' . join ( ' * %s' % e for e in errors ) )
return value.,return value
derive the class DebugLexer from the Lexer base class.,class DebugLexer ( Lexer ) :
"from email.utils import formatdate, getaddresses, formataddr and parseaddr into default name space.","from email . utils import formatdate , getaddresses , formataddr , parseaddr"
substitute value under the number key of the rhs dictionary for number_value.,number_value = rhs [ number ]
"from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.","from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation"
"if ending is true and msg doesnt end with ending,",if ending and not msg . endswith ( ending ) :
"try,",try :
"otherwise if o is an instance of decimal.Decimal object,","elif isinstance ( o , decimal . Decimal ) :"
and elements of rfcdate from 12-th to the 25-th index. define the function http_date with an argument epoch_seconds set to None.,def http_date ( epoch_seconds = None ) :
"if truncate_text is true,",if truncate_text :
yield self.,yield self
substitute kwargs for self.kwargs.,self . kwargs = kwargs
"if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.",self . keyOrder = list ( data ) if data else [ ]
"substitute string "" "" for space.","space = "" """
"set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.","return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )"
do nothing.,pass
"try,",try :
"try,",try :
"call the __call__ method from the base class of the URLValidator class, with an argument url.","super ( URLValidator , self ) . __call__ ( url )"
"get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,","widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )"
"define the function sql_custom with 3 arguments: app_config, style and connection.","def sql_custom ( app_config , style , connection ) :"
"raise an ImproperlyConfigured exception with an argument string ""Error importing template source loader %s - can't pass arguments to","raise ImproperlyConfigured ( ""Error importing template source loader %s - can't pass arguments to function-based loader."" % loader )"
substitute ClearableFileInput for widget.,widget = ClearableFileInput
import module locale.,import locale
substitute value for the value under the key key of self._cache dictionary.,self . _cache [ key ] = value
"all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.","ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )"
"if self._encoding is None,",if self . _encoding is None :
define the method clean with an argument self.,def clean ( self ) :
"call the function converter with an argument suffix, substitute the result for value.",value = converter ( suffix )
increment piece by firs element of elt.,piece += elt [ 0 ]
"call the function pgettext_lazy with an argument self.message_context and value, return the result.","return pgettext_lazy ( self . message_context , value )"
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.,raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
"define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.","def __init__ ( self , name , nodelist , parent = None ) :"
"if kwargs is true,",if kwargs :
"if os.name equals string 'nt',",if os . name == 'nt' :
"convert base to lowercase, if it ends with string '.tar',",if base . lower ( ) . endswith ( '.tar' ) :
from subprocess import PIPE and Popen into default name space.,"from subprocess import PIPE , Popen"
"call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,","top_errors . extend ( [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) } for e in bf_errors ] )"
"define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def push ( self , * args , ** kwargs ) :"
"append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,","getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )"
"yield string ""# This is an auto-generated Django model module."" as the result.","yield ""# This is an auto-generated Django model module."""
"assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.",parts = 2 if version [ 2 ] == 0 else 3
"RemovedInDjango19Warning, stacklevel set to integer 2. for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.","fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]"
define the mehod __lt__ with self and other.,"def __lt__ ( self , other ) :"
"if next_item is true and next_item is an instance of list or tuple type,","if next_item and isinstance ( next_item , ( list , tuple ) ) :"
call the method test_runner_class.add_arguments with an argument parser.,test_runner_class . add_arguments ( parser )
call the sys.stderr.write function with an argument msg.,sys . stderr . write ( msg )
"call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.",formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
substitute self.min_value for the value under the 'min' key of the attrs dictionary.,attrs [ 'min' ] = self . min_value
return None.,return None
define the method delete_first_token with an argument self.,def delete_first_token ( self ) :
"call the method self.path with argument name, substitute the result for full_path.",full_path = self . path ( name )
"sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,","sub_ul_renderer = ChoiceFieldRenderer ( name = self . name , value = self . value , attrs = attrs_plus , choices = choice_label )"
self.to is an empty list.,self . to = [ ]
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
call the function self.tag with 2 arguments: function_name and compile_func.,"self . tag ( function_name , compile_func )"
"if Exception, renamed to e, exception is caught,",except Exception as e :
"convert result of the method self.__iter__ into a list, return its length.",return len ( list ( self . __iter__ ( ) ) )
derive the class _OFFSET_UNION from the Union base class.,class _OFFSET_UNION ( Union ) :
"if p_pattern starts with a string '^',",if p_pattern . startswith ( '^' ) :
derive class Command from the base class AppCommand.,class Command ( AppCommand ) :
and result of the method self.__getstate__. define the method __deepcopy__ with 2 arguments self and memo.,"def __deepcopy__ ( self , memo ) :"
"substitute '%s' in a string "" Branch %s"" with migration.name,","self . stdout . write ( self . style . MIGRATE_LABEL ( "" Branch %s"" % migration . name ) )"
substitute timeout for self.default_timeout.,self . default_timeout = timeout
define the function parse_boundary_stream with arguments stream and max_header_size.,"def parse_boundary_stream ( stream , max_header_size ) :"
"default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a list of values.' ) , 'incomplete' : _ ( 'Enter a complete value.' ) , }"
substitute length of list_ for list_length.,list_length = len ( list_ )
"get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.",errors . append ( field . error_messages [ 'incomplete' ] )
define the method is_hidden with an argument self.,def is_hidden ( self ) :
"get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.",self . no_obsolete = options . get ( 'no_obsolete' )
append x converted to an integer to bits.,bits . append ( int ( x ) )
"call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,","Field . __init__ ( self , required , widget , label , initial , help_text , * args , ** kwargs )"
"call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.","return self . as_widget ( TextInput ( ) , attrs , ** kwargs )"
"call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,","name = _resolve_name ( name [ level : ] , package , level )"
"use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions, append the results respectively, return the result.","return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )"
call the method base64.urlsafe_b64decode with sum of s and pad as argument.,return base64 . urlsafe_b64decode ( s + pad )
"get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,","return getattr ( self , _assertRegex ) ( * args , ** kwargs )"
"call the method handler.startElement with 2 arguments: string ""item"" and result of the method self.item_attributes with an argument item.","handler . startElement ( 'item' , self . item_attributes ( item ) )"
decorator decorator.,@ decorator
"get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,","value = getattr ( self , 'clean_%s' % name ) ( )"
"if not,",else :
import module tarfile.,import tarfile
ch is None.,ch = None
"call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.","super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )"
define the method delete with arguments self and name.,"def delete ( self , name ) :"
"call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.","value = super ( IntegerField , self ) . to_python ( value )"
"call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.",input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
cc is an empty dictionary.,cc = { }
"format truncate with a dictionary with an element: text for 'truncated_text', return the result.",return truncate % { 'truncated_text' : text }
input_type is a string 'radio'.,input_type = 'radio'
"call the method copy.copy with an argument self, substitute the result for result.",result = copy . copy ( self )
"if not,",else :
"and self.format_string, return the result. derive the class SpacelessNode from Node base class.",class SpacelessNode ( Node ) :
"try,",try :
"call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.","return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )"
"try,",try :
"return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,","return WidthRatioNode ( parser . compile_filter ( this_value_expr ) , parser . compile_filter ( max_value_expr ) , parser . compile_filter ( max_width ) , asvar = asvar )"
derive the class NumberAwareString from the resultclass base class.,class NumberAwareString ( resultclass ) :
"if value is false or value is not an instance of list or tuple types,","if not value or isinstance ( value , ( list , tuple ) ) :"
"and third element of the return value of the function sys.exc_info. if inhibit_post_migrate is false,",if not inhibit_post_migrate :
I18N_MODIFIED is integer 2,I18N_MODIFIED = 2
substitute EscapeBytes for EscapeString.,EscapeString = EscapeBytes
"define delete method with self class instance, key and version set to None, as arguments.","def delete ( self , key , version = None ) :"
"if arg is true,",if arg :
"if ImportError exception occurred,",except ImportError :
"try,",try :
"call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,","super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name , content_type , len ( content ) , None , None )"
call the method self._stream.unget with an argument unused_char.,self . _stream . unget ( unused_char )
return new_class.,return new_class
"string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message. code is a string 'min_length'",code = 'min_length'
"call the method cursor.execute with string ""DELETE FROM %s"" as argument, substitute the '%s' with table.",cursor . execute ( 'DELETE FROM %s' % table )
define the method _add_fallback with an argument self.,def _add_fallback ( self ) :
"endless loop,",while 1 :
"if not,",else :
"if option_value is contained in selected_choices,",if option_value in selected_choices :
"convert name to lower case, if it is contained in ADDRESS_HEADERS,s",if name . lower ( ) in ADDRESS_HEADERS :
substitute post for self._post.,self . _post = post
"if not,",else :
from collections import OrderedDict into default name space.,from collections import OrderedDict
"match value string with regex self.CONVERT_PATTERN, substitute the result for m.",m = self . CONVERT_PATTERN . match ( value )
"raise an BadSignature exception with an argument string 'Signature ""%s"" does not match', where '%s' is replaced by sig.","raise BadSignature ( 'Signature ""%s"" does not match' % sig )"
"call the method pattern.resolve with an argument new_path, substitute the result for sub_match.",sub_match = pattern . resolve ( new_path )
"raise an CommandError exception with an argument string ""you must provide %s %s name"", where '%s' is replaced with string 'an',","raise CommandError ( ""you must provide %s %s name"" % ( ""an"" if app_or_project == ""app"" else ""a"" , app_or_project ) )"
import module binascii.,import binascii
"if message-id' is not in header_names,",if 'message-id' not in header_names :
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,","return bytes ( func ( * self . __args , ** self . __kw ) )"
"tok is a string '""REGEX""',","tok = '""REGEX""'"
"call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method, Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.",data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( node . getAttribute ( 'pk' ) )
"if pattern.namespace is true,",if pattern . namespace :
"append string "" The domain name provided is not valid according to RFC 1034/1035."" to msg.","msg += "" The domain name provided is not valid according to RFC 1034/1035."""
"for every ch and escaped in input_iter,","for ch , escaped in input_iter :"
"define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.","def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :"
return decorating_function.,return decorating_function
"convert idx to an integer, substitute it or n.",n = int ( idx )
"get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]"
"if stream_created is true,",if stream_created :
"for every f in opts.local_fields,",for f in opts . local_fields :
initial is an empty list.,initial = [ ]
code is a string 'max_value',code = 'max_value'
"if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,","except ( ImportError , IndentationError , NameError , SyntaxError , TypeError , AttributeError ) :"
"call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.","decode = curry ( _proxy_method , method = bytes . decode )"
split is an empty list.,split = [ ]
"substitute the result for last element of output. if not,",else :
"if not,",else :
"if _urlconfs has an attribute 'value',","if hasattr ( _urlconfs , ""value"" ) :"
"import_module called with an argument parentmod and submod, evaluates to false. raise an ViewDoesNotExist exception with an argument string ""Could not import '%s'. Parent module %s does not exist."",","raise ViewDoesNotExist ( ""Could not import '%s'. Parent module %s does not exist."" % ( lookup_view , mod_name ) )"
"call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,","if field . _has_changed ( field . to_python ( initial ) , data ) :"
"use the result as an argument for the call to the function strip_spaces_between_tags, return the result. derive the class TemplateTagNode from Node base class.",class TemplateTagNode ( Node ) :
return Operator.,return Operator
define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
derive the class VerbatimNode from Node base class.,class VerbatimNode ( Node ) :
self._reverse_dict is an empty dictionary.,self . _reverse_dict = { }
input_type is None.,input_type = None
substitute old for self.mod.,self . mod = old
"for every handler in self._upload_handlers,",for handler in self . _upload_handlers :
define the function remove_move with an argument name.,def remove_move ( name ) :
"find first index of occurrence of character '-' in locale, substitute it for p.",p = locale . find ( '_' )
"define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , template , * args , ** kwargs ) :"
"and '%s' is replaced with app_or_project and message, respectively. define the method download with arguments self and url.","def download ( self , url ) :"
"property decorator,",@ property
define the method __init__ with 2 arguments: self and name.,"def __init__ ( self , name ) :"
"define the protected method _cull with self class instance, db, cursor and now as arguments.","def _cull ( self , db , cursor , now ) :"
"substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.",self . check_test = boolean_check if check_test is None else check_test
return boolean True.,return True
"use it as an argument for the call to the mark_safe function, return the result. define the method value_from_datadict with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) :"
"if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.",is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
"call the method kwarg_re.match with an argument first element of bits, substitute the result for match.",match = kwarg_re . match ( bits [ 0 ] )
"append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,","options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )"
"if message is true,",if message :
"define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.","def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :"
"if form is contained in forms_to_delete,",if form in forms_to_delete :
"if source is an instance of NonCapture class,","if isinstance ( source , NonCapture ) :"
"if app_labels is false,",if not app_labels :
substitute cls.__text_cast for cls.__str__.,cls . __str__ = cls . __text_cast
close file_ file descriptor.,file_ . close ( )
"call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.",self . can_read = threading . Semaphore ( 0 )
substitute chr for unichr.,unichr = chr
return boolean True.,return True
filters is an empty list.,filters = [ ]
"and truncate set to string ' ...', return the result. decorator function register.filter with an argument is_safe set to boolean True.",@ register . filter ( is_safe = True )
if t is not None,if t is not None :
substitute jython_reloader for reloader.,reloader = jython_reloader
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field)s."",","return ugettext ( ""Please correct the duplicate data for %(field)s."" ) % { ""field"" : unique_check [ 0 ] , }"
"for every model in app_models,",for model in app_models :
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
substitute file_name for self.file_name.,self . file_name = file_name
define the function get_template with 2: template_name and dirs set to None.,"def get_template ( template_name , dirs = None ) :"
"if limit_choices_to is callable object,",if callable ( limit_choices_to ) :
return boolean False.,return False
"call the function new_method_proxy with an argument str, substitute the result for __str__.",__str__ = new_method_proxy ( str )
"call the method df.format with an argument format_string, return the result.",return df . format ( format_string )
"if invalid_var_format_string is true,",if invalid_var_format_string :
call the function add_to_builtins with an argument string 'django.template.defaulttags'.,add_to_builtins ( 'django.template.defaulttags' )
derive class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
"if TemplateSyntaxError, replaced with e, exception is caught,",except TemplateSyntaxError as e :
"if path is None,",if path is None :
define the method __init__ with 2 arguments: self and filter_expression.,"def __init__ ( self , filter_expression ) :"
"deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.","def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :"
define the method _cull with argument self.,def _cull ( self ) :
substitute _iteritems for iteritems.,iteritems = _iteritems
"evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.",chunk_buffer = BytesIO ( chunk )
define the method __call__ with 2 arguments: self and f.,"def __call__ ( self , f ) :"
"if self.addr is false,",if not self . addr :
and connection as the result of the method self.connection. define the connection with an argument self.,def connection ( self ) :
"call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.","self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )"
define the method __init__ with 2 arguments self and dt.,"def __init__ ( self , dt ) :"
"if not,",else :
"define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"if status is not equal to STATUS_OK,",if status != STATUS_OK :
"f _serializers is false,",if not _serializers :
"define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.","def find_command ( cmd , path = None , pathext = None ) :"
derive the class Atom1Feed from the SyndicationFeed base class.,class Atom1Feed ( SyndicationFeed ) :
call the method __init__ form the base class of the Command class.,"super ( Command , self ) . __init__ ( )"
from django.conf import settings into default name space.,from django . conf import settings
"while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,","while end > 0 and s . count ( b'""' , 0 , end ) % 2 :"
"called with an argument value under the 'updateddate' key of the item dictionary. if value under the 'author_name' key of the item dictionary is not None,",if item [ 'author_name' ] is not None :
"call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,","super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )"
"help is an string ""Creates the tables needed to use the SQL cache backend."".","help = ""Creates the tables needed to use the SQL cache backend."""
"if value is an instance of datetime.time,","if isinstance ( value , datetime . time ) :"
"call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.",return self . __cast ( ) < other
define the function int_to_base36 with an argument i.,def int_to_base36 ( i ) :
"if print_ is None,",if print_ is None :
raise an exception.,raise
call the method self.indent with argument integer 2.,self . indent ( 2 )
define the __init__ method with argument self.,def __init__ ( self ) :
call the function sys.exit with argument exit_code.,sys . exit ( exit_code )
errors is an empty list.,errors = [ ]
"call the function force_text with an argument output, substitute the result for output.",output = force_text ( output )
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.,self . GET = QueryDict ( mutable = True )
"if KeyError exception is caught,",except KeyError :
"call the method token_string.count with an argument '\n', append the result to self.lineno.",self . lineno += token_string . count ( '\n' )
"substitute setting and nodelist for self.setting and self.nodelist, respectively.","self . setting , self . nodelist = setting , nodelist"
"call the function timedelta with an argument seconds as negative time.timezone, return the result.",return timedelta ( seconds = - time . timezone )
"append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.",BASE64_ALPHABET = BASE62_ALPHABET + '-_'
call the method cls.__dict__.copy substitute the result for orig_vars.,orig_vars = cls . __dict__ . copy ( )
"slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.",self . handle_data ( rawdata [ i : j ] )
from django.apps import apps into default name space.,from django . apps import apps
"if not,",else :
"remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.","data = obj_dict . pop ( '_data' , { } )"
"if secret is None,",if secret is None :
call the method __init__ from the base class of the class SortedDict.,"super ( SortedDict , self ) . __init__ ( )"
return self.,return self
mail.outbox is an empty list.,mail . outbox = [ ]
"join elements of name into a string, substitute it for param.",param = '' . join ( name )
"return an empty string,",return ''
define the method create_var with 2 arguments: self and value.,"def create_var ( self , value ) :"
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"define the method render with 4 arguments: self, name, value and attrs set to None.","def render ( self , name , value , attrs = None ) :"
"call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.",timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
"where '%s' is replaced with migration_name and app_label. if KeyError exception is caught,",except KeyError :
"call the method parser.expression with an argument bp, substitute the result for self.first.",self . first = parser . expression ( bp )
define the method __getitem__ with 2 arguments: self and key.,"def __getitem__ ( self , key ) :"
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.,cls . __dispatch [ resultclass ] = { }
"get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.","t = getattr ( _active , ""value"" , None )"
from itertools import groupby and cycle as itertools_cycle into default name space.,"from itertools import groupby , cycle as itertools_cycle"
derive the LabelCommand class from the BaseCommand base class.,class LabelCommand ( BaseCommand ) :
"if obj_pk is not None,",if obj_pk is not None :
"if attachment is an instance of MIMEBase,","if isinstance ( attachment , MIMEBase ) :"
"join statements into a string, separated by newlines, return it.",return '\n' . join ( statements )
substitute DNS_NAME for idhost.,idhost = DNS_NAME
"call the method sys.stderr.write with an argument string ""fork #1 failed: (%d) %s\n"", formated with e.errno and e.strerror.","sys . stderr . write ( ""fork #1 failed: (%d) %s\n"" % ( e . errno , e . strerror ) )"
"call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,","final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )"
"call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.","options [ 'secret_key' ] = get_random_string ( 50 , chars )"
"otherwise if base_url does not ends with '/' character,",elif not base_url . endswith ( '/' ) :
define the function wordwrap with 2 arguments value and arg.,"def wordwrap ( value , arg ) :"
"call the method self.check,",self . check ( )
"from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.","from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY"
"define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.","def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :"
"raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.",raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
value under the 'debug' key of the context_extras dictionary is boolean True.,context_extras [ 'debug' ] = True
"append flup_module to string ""Can't import flup."", print it to the standard output.","print ( ""Can't import flup."" + flup_module )"
decorator cached_property.,@ cached_property
"return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,","return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )"
outdict is an empty dictionary.,outdict = { }
"define the method extend_nodelist with 4 arguments: self, nodelist, node and token.","def extend_nodelist ( self , nodelist , node , token ) :"
call the method update_watch.,update_watch ( )
"and include_auto_created set to boolean True, call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.","output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )"
"if value is an instance of datetime.date class,","if isinstance ( value , datetime . date ) :"
"define the method load_template with 3 arguments: self, template_name and template_dirs set to None.","def load_template ( self , template_name , template_dirs = None ) :"
"call the method self._populate,",self . _populate ( )
self._app_dict is an empty dictionary.,self . _app_dict = { }
"convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments. if not,",else :
template_source_loaders is None.,template_source_loaders = None
"call the method self.__cast, return the hash value of the result.",return hash ( self . __cast ( ) )
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.,"f . save_form_data ( instance , cleaned_data [ f . name ] )"
call the function walk_to_end with 2 arguments: ch and pattern_iter.,"walk_to_end ( ch , pattern_iter )"
"call the method self.attrs.copy, substitute the result for attrs_plus.",attrs_plus = self . attrs . copy ( )
"if name is callable object,",if callable ( name ) :
"unpacked list field_value as an argument, substitute the result for obj. get field.rel.field_name attribute of the object obj, substitute it for value.","value = getattr ( obj , field . rel . field_name )"
"if block_name is contained in parser.__loaded_blocks,",if block_name in parser . __loaded_blocks :
return obj.,return obj
"raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,","raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )"
"call the method other_dict.lists, for every key and value_list in result,","for key , value_list in other_dict . lists ( ) :"
"define handle_field method with self, obj and field arguments.","def handle_field ( self , obj , field ) :"
"extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.",connection = connections [ options [ 'database' ] ]
define the method __ne__ with 2 arguments: self and other.,"def __eq__ ( self , other ) :"
"call the method self.recipients, if it evaluates to false,",if not self . recipients ( ) :
derive the class FileBasedCache from BaseCache base class.,class FileBasedCache ( BaseCache ) :
"if parent has an attribute 'render',","if hasattr ( parent , 'render' ) :"
"call the style.NOTICE method with an argument string ""[%s]"", where '%s' is replaced with app, append the result to usage.","usage . append ( style . NOTICE ( ""[%s]"" % app ) )"
"if block is None,",if block is None :
"call the method self.source_error with 2 arguments: token.source and msg, return the result.","return self . source_error ( token . source , msg )"
"define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.","def __init__ ( self , query_string = None , mutable = False , encoding = None ) :"
"call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.","super ( MultipleHiddenInput , self ) . __init__ ( attrs )"
"call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,",view = transaction . atomic ( using = db . alias ) ( view )
"if supported_platform is False or is_a_tty is False,",if not supported_platform or not is_a_tty :
"if length of app_labels equals integer 0,",if len ( app_labels ) == 0 :
define the method _update_unget_history with arguments self and num_bytes.,"def _update_unget_history ( self , num_bytes ) :"
valid is boolean False.,valid = False
"evaluate the function backend_cls with location and params as arguments, return the result.","return backend_cls ( location , params )"
"property decorator,",@ property
import module sys.,import sys
import module io.,import io
"if not,",else :
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.,"handler . addQuickElement ( ""title"" , self . feed [ 'title' ] )"
default_validators is an empty list.,default_validators = [ ]
"and help is a string 'Specifies file to which the output is written.'. define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.","def handle ( self , * app_labels , ** options ) :"
return supported.,return supported
"call the function _add_doc with 2 arguments: u and string """"""Text literal"""""".","_add_doc ( u , """"""Text literal"""""" )"
do nothing.,pass
"for every filename is filelist,",for filename in filelist :
"call the function blankout with 2 arguments: p and 'F', write the result to out.","out . write ( blankout ( p , 'F' ) )"
import module time.,import time
"call the itertools.count function with argument integer 1, substitute the result for count.",count = itertools . count ( 1 )
"if not,",else :
derive the class Command from the BaseCommand class.,class Command ( BaseCommand ) :
"if KeyError exception is caught,",except KeyError :
"if third element of bits is not equal to a string 'by',",if bits [ 2 ] != 'by' :
call the method serializers.get_serializer with an argument format.,serializers . get_serializer ( format )
substitute arg converted into an integer for length.,length = int ( arg )
"if not,",else :
"call the function warnings.warn with 2 arguments string ""IPAddressField has been deprecated. Use GenericIPAddressField instead."",","warnings . warn ( ""IPAddressField has been deprecated. Use GenericIPAddressField instead."" , RemovedInDjango19Warning )"
return boolean False.,return False
convert role to uppercase.,role = role . upper ( )
"if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,","if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :"
"call the function get_current_timezone, substitute the result for timezone.",timezone = get_current_timezone ( )
"queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.","queryset = property ( _get_queryset , _set_queryset )"
"if not,",else :
"if unused_char is false,",if not unused_char :
return default.,return default
return self._errors.,return self . _errors
substitute chunk_size for self.chunk_size.,self . chunk_size = chunk_size
"if current_app and is true and current_app is contained in app_list,",if current_app and current_app in app_list :
"call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.","resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )"
"assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.","format = color_settings . get ( role , { } )"
import module datetime.,import datetime
"try,",try :
return the media field of the first element of self.forms.,return self . forms [ 0 ] . media
"define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.","def __new__ ( cls , * args , ** kwargs ) :"
derive the class AppRegistryNotReady from the Exception base class.,class AppRegistryNotReady ( Exception ) :
"with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk. if not,",else :
"for every k and v in result of the call to the method type_.__dict__.items,","for ( k , v ) in type_ . __dict__ . items ( ) :"
"if self.use_ssl and self.use_tls are boolean True,",if self . use_ssl and self . use_tls :
"if callback doesnt have '__name__' attribute,","if not hasattr ( callback , '__name__' ) :"
"while bits is true,",while bits :
substitute exclude for value under the 'exclude' key of attrs dictionary.,attrs [ 'exclude' ] = exclude
"return tuple containing 3 elements: RAW, an empty dictionary and stream.","return ( RAW , { } , stream )"
"if initial is not None,",if initial is not None :
"for every bit in bits,",for bit in bits :
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result. define the method created_time with arguments self and name.","def created_time ( self , name ) :"
"call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.",form = self . form ( ** defaults )
"decorator deconstructible,",@ deconstructible
_upload_handlers is an empty list.,_upload_handlers = [ ]
define the function get_unbound_function with an argument unbound.,def get_unbound_function ( unbound ) :
"or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables, invert the evaluated expression and return it. manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.","manifest = OrderedDict ( ( app_name , list ( filter ( model_installed , model_list ) ) ) for app_name , model_list in all_models )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"root is an list with 4 elements: root, root, None and None.","root [ : ] = [ root , root , None , None ]"
"if not,",else :
do nothing.,pass
break from the loop execution,break
if self._cull_frequency equals to integer 0.,if self . _cull_frequency == 0 :
"if LookupError exception is caught,",except LookupError :
"if lengths of initial and data are equal,",if len ( initial ) != len ( data ) :
define method _get_width with self class instance as the argument.,def _get_width ( self ) :
"if ValueError or self.queryset.model.DoesNotExist exception is caught,","except ( ValueError , self . queryset . model . DoesNotExist ) :"
"call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.","result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )"
return a string '%02d' formated with the result of the function self.g.,return '%02d' % self . g ( )
define the method write with 2 arguments: self and content.,"def write ( self , content ) :"
"if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,","if module_has_submodule ( app_config . module , module_to_search ) :"
convert first element of answer to lowercase and substitute it for answer.,answer = answer [ 0 ] . lower ( )
derive the class ContextPopException from the Exception base class.,class ContextPopException ( Exception ) :
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.,attrs [ 'pk' ] = smart_text ( obj_pk )
"append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.","ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]"
"otherwise if, first element of message_context is equal to ""'"",","elif message_context [ 0 ] == ""'"" :"
"evaluate method self.has_key with key and version as arguments, if the result is true,","if self . has_key ( key , version ) :"
"join prefix and path into an url, return it.","return urljoin ( prefix , path )"
"if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'. substitute content_type for value under the 'Content-Type' key of the self dictionary.",self [ 'Content-Type' ] = content_type
substitute template for self.template.,self . template = template
import module os.,import os
return resulting list. define the method keys with an argument self.,def keys ( self ) :
"define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.,self . POST = QueryDict ( mutable = True )
"if content_length is lesser than integer 0,",if content_length < 0 :
"if self.data.hour is greater than integer 11,",if self . data . hour > 11 :
self.lineno is integer 1.,self . lineno = 1
"if p is greater or equal to integer 0,",if p >= 0 :
"if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.",extra_classes = set ( extra_classes or [ ] )
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","handler . addQuickElement ( ""link"" , """" , { ""rel"" : ""alternate"" , ""href"" : self . feed [ 'link' ] } )"
"split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.",vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
if statue is not equal to STATUS_OK.,if status != STATUS_OK :
"join management_dir and string 'commands' into a file path name, substitute it for command_dir.","command_dir = os . path . join ( management_dir , 'commands' )"
substitute cached_loaders for self._cached_loaders.,self . _cached_loaders = cached_loaders
"raise an TypeError exception with an argument string ""Variable must be a string or number, got %s"", replace '%s' with type of var.","raise TypeError ( ""Variable must be a string or number, got %s"" % type ( var ) )"
remove the first element from the self.context.,self . context . pop ( )
"define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , redirect_to , * args , ** kwargs ) :"
"use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys, and stream set to stream, if the stream is true, otherwise stream set to self.stdout. finally perform,",finally :
"if not,",else :
call the method self.validate_key with argument key.,self . validate_key ( key )
return self.name.,return self . name
"if new_name ends with a string '_',",if new_name . endswith ( '_' ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
return WRAPPER_ASSIGNMENTS.,return WRAPPER_ASSIGNMENTS
derive class CheckMessage from object base class.,class CheckMessage ( object ) :
delete dictionary item 'private' from cc.,del cc [ 'private' ]
from django.utils.deconstruct import deconstructible into default name space.,from django . utils . deconstruct import deconstructible
"if value under the 'umask' key of options dictionary is true,",if options [ 'umask' ] :
"if errors_on_separate_row and bf_errors are both true,",if errors_on_separate_row and bf_errors :
"if settings.DEBUG is true,",if settings . DEBUG :
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"fork a child process, if the result equals integer 0,",if os . fork ( ) > 0 :
"'\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '""', '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<', '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=', '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';', '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'. for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,","_js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )"
"call the function _ with an argument string 'midnight', return the result.",return _ ( 'midnight' )
"define the method get with 4 arguments: self, key, default set to None and version set to None.","def get ( self , key , default = None , version = None ) :"
call the method context.update with an argument unpacked_vars.,context . update ( unpacked_vars )
an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'. template is a string '%(input)s'.,template = '%(input)s'
"get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.","seconds2 , name2 = chunks [ i + 1 ]"
append a tuple with 2 elements: None and nodelist to conditions_nodelists.,"conditions_nodelists . append ( ( None , nodelist ) )"
"if six.PY2 is true,",if six . PY2 :
"if not,",else :
"match regex datetime_re with value, substitute the result for match.",match = datetime_re . match ( value )
"split extra_classes into words, by whitespaces, substitute the result for extra_classes.",extra_classes = extra_classes . split ( )
"call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,","d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )"
raise an exception.,raise
set value under the 'timeout' key of the connection_params to self.timeout.,connection_params [ 'timeout' ] = self . timeout
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
substitute obj for self.object.,self . object = obj
"define the method appendlist with 3 arguments: self, key and value.","def appendlist ( self , key , value ) :"
"call the method self.next_token, substitute the result for self.current_token.",self . current_token = self . next_token ( )
return s.,return s
import module posixpath.,import posixpath
"if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.",trimmed = 'trimmed' in t . split_contents ( )
"if not, substitute self.field.initial for data. if data is an callable object,",if callable ( data ) :
from threading import local into default name space.,from threading import local
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if UnicodeDecodeError exception is caught,",except UnicodeDecodeError :
ignored is an empty list.,ignored = [ ]
"if row_data is contained in seen_data,",if row_data in seen_data :
"call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,","with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :"
"get absolute directory path of dir, substitute it for self._dir.",self . _dir = os . path . abspath ( dir )
substitute Paginator for QuerySetPaginator.,QuerySetPaginator = Paginator
"if self._cached_loaders is false,",if not self . _cached_loaders :
"try,",try :
"call the method autoreload.main with 3 arguments: self.inner_run, None and options.","autoreload . main ( self . inner_run , None , options )"
"if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,","if ( hasattr ( self . cmd , 'missing_args_message' ) and not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) :"
define the function capfirst with an argument value.,def capfirst ( value ) :
break from the loop execution.,break
"if func is None,",if func is None :
"if level is an instance of int type,","if isinstance ( level , int ) :"
"append string 'Form' to model.__name__, substitute the result for class_name.",class_name = model . __name__ + str ( 'Form' )
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
return self._non_form_errors.,return self . _non_form_errors
"try,",try :
"define the method execute with an argument self,",def execute ( self ) :
"for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,",forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
define the method next with an argument self.,def next ( self ) :
"call the function popen_wrapper with argument args, assign the result to msgs, errors and status.","msgs , errors , status = popen_wrapper ( args )"
"while i is lesser than length of subject and i-th element of subject is an empty space or tab character,","while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :"
"call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.","cleaned_line = comment_re . sub ( r""\1"" , line ) . strip ( )"
substitute self for value.configurator.,value . configurator = self
substitute SelectMultiple for widget.,widget = SelectMultiple
"if not,",else :
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.,"handler . addQuickElement ( ""email"" , self . feed [ 'author_email' ] )"
"property decorator,",@ property
"call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,",with connections [ db ] . cursor ( ) as cursor :
call the cursor.execute method with statement as argument.,cursor . execute ( statement )
"call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,","args , kwargs = parse_bits ( parser , bits , params , varargs , varkw , defaults , takes_context , function_name )"
"join to_path and name into a valid system path, substitute the result for filename.","filename = os . path . join ( to_path , name )"
"call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.",offset = self . timezone . utcoffset ( self . data )
"call the method self._isdst with an argument dt, if it evaluates to true,",if self . _isdst ( dt ) :
substitute class_name for self.class_name.,self . class_name = class_name
"if self.verbosity is greater than integer 0,",if self . verbosity > 0 :
"for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,","return b' ' . join ( [ force_bytes ( arg , encoding , strings_only , errors ) for arg in s ] )"
"if KeyError, renamed to key, exception is caught,",except KeyError as key :
define the method compress with arguments self and data_list.,"def compress ( self , data_list ) :"
FILE_INPUT_CONTRADICTION is an instance of object class.,FILE_INPUT_CONTRADICTION = object ( )
"call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.",duplicate . render_context = copy ( self . render_context )
"parent is a tuple with 1 element, object.","parent = ( object , )"
append key to self.keyOrder dictionary.,self . keyOrder . append ( key )
"get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.","root = config . get ( 'root' , None )"
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.,"raise ValueError ( 'Unable to configure ' 'formatter %r: %s' % ( name , e ) )"
in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key. return cache_key.,return cache_key
increment Field.creation_counter by one.,Field . creation_counter += 1
property decorator.,@ property
"call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.",msg = self . style . HTTP_SUCCESS ( msg )
define the function compress_string with an argument s.,def compress_string ( s ) :
substitute self.var for obj.,obj = self . var
define the method usage with 2 argument: self and subcommand.,"def usage ( self , subcommand ) :"
"call the method self.next_token, substitute the result for token.",token = self . next_token ( )
"call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.","value = super ( TypedChoiceField , self ) . clean ( value )"
"for every choice in value,",for choice in value :
"if self.fail_silently is boolean False,",if not self . fail_silently :
"raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '","raise KeyError ( 'Your dictionary lacks key \'%s\'. ' 'Please provide it, because it is required to ' 'determine whether string is singular or plural.' % number )"
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","def __init__ ( self , * args , ** kwargs ) :"
"if os.name equals to 'nt',",if os . name == 'nt' :
import module copy.,import copy
"if chunks is false,",if not chunks :
substitute i for self.pointer.,self . pointer = i
"if self._delegate_bytes is true,",if self . _delegate_bytes :
"call the function force_text with an argument v, for every v in selected_choices, add results to a set,",selected_choices = set ( force_text ( v ) for v in selected_choices )
"if self.first is true,",if self . first :
"kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',","kwargs = { 'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) ) }"
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.,"handler . addQuickElement ( ""link"" , item [ 'link' ] )"
import module copy.,import copy
return a tuple with an element self.__dt.,"return self . __dt ,"
"get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.","value = dict . get ( self , key , default )"
define the function get_tag_uri with 2 arguments: url and date.,"def get_tag_uri ( url , date ) :"
"if m is true,",if m :
"if value is true and method self.valid_value called with an argument value evaluates to false,",if value and not self . valid_value ( value ) :
define the method label_from_instance with 2 arguments: self and obj.,"def label_from_instance ( self , obj ) :"
"if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,",if palette == PALETTES [ NOCOLOR_PALETTE ] :
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.,class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
"call the method self.nodelist_false.render with an arguments context, return the result.",return self . nodelist_false . render ( context )
define the function get_objects.,def get_objects ( ) :
"if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,","function_name = ( name or getattr ( func , '_decorated_function' , func ) . __name__ )"
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.,"raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )"
"call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.",hfile = msvcrt . get_osfhandle ( _fd ( f ) )
"otherwise if f.unique is true,",elif f . unique :
"substitute the result for offset_mins, otherwise offset_mins is integer 0. convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,",offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
"call the fastcgi_help function with an argument string ""ERROR: Invalid option for daemonize parameter."", return it.","return fastcgi_help ( ""ERROR: Invalid option for daemonize "" ""parameter."" )"
set filter_func._decorated_function objects attr attribute to value.,"setattr ( filter_func . _decorated_function , attr , value )"
"and '3' for '3', substitute it for value. if KeyError exception is caught,",except KeyError :
"for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None, and app_config is not contained in excluded_apps. if not,",else :
define the method run_validators with arguments self and value.,"def run_validators ( self , value ) :"
"append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.",plural . append ( '%%(%s)s' % t . contents )
"re_formatchars.split, for every i and piece in enumerated result, if i is even number,",if i % 2 :
"if maxsize equals integer 0,",if maxsize == 0 :
"call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.",mode = stat . S_IMODE ( st . st_mode )
import flup,import flup
"if second element of options is true,",if option [ 1 ] :
"join self.dirpath and self.file in a string, substitute with it '%s' in string ""<TranslatableFile: %s>"", return the result.","return ""<TranslatableFile: %s>"" % os . sep . join ( [ self . dirpath , self . file ] )"
"if self object has an attribute '_client',","if getattr ( self , '_client' , None ) is None :"
"try,",try :
gettext._translations is an empty dictionary.,gettext . _translations = { }
from django.utils.translation import ugettext and ungettext_lazy into default name space.,"from django . utils . translation import ugettext , ungettext_lazy"
"if not,",else :
"write string ""App '%s' could not be found. Is it in INSTALLED_APPS?"" with '%s' where '%s' is replaced with app_label,","self . stderr . write ( ""App '%s' could not be found. Is it in INSTALLED_APPS?"" % app_label )"
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.,"handler . addQuickElement ( ""description"" , item [ 'description' ] )"
import module types.,import types
"string '<select multiple=""multiple""{0}>' and result of the function flatatt called with an argument final_attrs. call the method self.render_options with 2 arguments: choices and value, substitute the result for options.","options = self . render_options ( choices , value )"
integer_types is a tuple with 2 elements int and long.,"integer_types = ( int , long )"
replace every occurrence of '\n' in s with '\\n'.,"s = s . replace ( '\n' , '\\n' )"
"call the method self.tag, substitute the result for self.tagname.",self . tagname = self . tag ( )
"if not,",else :
TOKEN_TEXT is integer 0,TOKEN_TEXT = 0
"call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.",_default = translation ( settings . LANGUAGE_CODE )
from django.core.management.base import BaseCommand into default name space.,from django . core . management . base import BaseCommand
"if Exception, renamed to e, exception is caught,",except Exception as e :
self._caches.caches is an empty dictionary.,self . _caches . caches = { }
"define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.","def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :"
pathext is an list containing an empty string.,pathext = [ '' ]
"if decimal_pos is not None,",if decimal_pos is not None :
derive the class Enclosure from the object base class.,class Enclosure ( object ) :
append string 'AutoField?' to comment_notes.,comment_notes . append ( 'AutoField?' )
derive the class PermissionDenied from the Exception base class.,class PermissionDenied ( Exception ) :
"if func_name is false,",if not func_name :
define the function do_translate with 2 arguments: message and translation_function.,"def do_translate ( message , translation_function ) :"
"convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.",self . _raw_ipv6 = bool ( self . use_ipv6 )
"call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.",date_value = datetime_safe . new_date ( date_value )
"if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.",reversed_text = ' reversed' if self . is_reversed else ''
"substitute value under the ""unifunc"" key of the results dictionary for unifunc.","unifunc = results [ ""unifunc"" ]"
define the method sign with arguments self and value.,"def sign ( self , value ) :"
"if app_config is None,",if app_config is None :
"if match is true,",if match :
"if is_relation is true,",if is_relation :
"substitute the result for value under 'mailhost' key of config dictionary. otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,","elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :"
define the method serialize_headers with an argument self.,def streaming_content ( self ) :
substitute second element of renamed_method for new_method_name.,new_method_name = renamed_method [ 1 ]
"otherwise if char is contained in string 'bEFMmNn',",elif char in 'bEFMmNn' :
"call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.",return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
call the method self._get_model_from_node with arguments node and string 'model'.,"Model = self . _get_model_from_node ( node , ""model"" )"
from lib2to3.pgen2 import token into default name space.,from lib2to3 . pgen2 import token
"format string ' _(%s) ', with fmatch, write it to out.",out . write ( ' _(%s) ' % cmatch )
"if TypeError and AttributeError exceptions are caught,","except ( TypeError , AttributeError ) :"
"if saved_locale is not None,",if saved_locale is not None :
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.,from django . core . servers . fastcgi import FASTCGI_HELP
"if self.is_bound is false,",if not self . is_bound :
"if self.min_value is not None,",if self . min_value is not None :
"from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,","from django . template . base import ( Library , add_to_builtins , builtins , get_library , get_templatetags_modules , get_text_list , import_library , libraries )"
"define the method handle_m2m_field with self, obj and field arguments.","def handle_m2m_field ( self , obj , field ) :"
call the method self.error with an argument self.cmd.missing_args_message.,self . error ( self . cmd . missing_args_message )
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware', 'is_naive', 'make_aware' and 'make_naive'. call the function timedelta with an argument integer 0, substitute the result for ZERO.",ZERO = timedelta ( 0 )
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.,ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
want_unicode is boolean True.,want_unicode = True
define the method make_writeable with arguments self and filename.,"def make_writeable ( self , filename ) :"
do nothing.,pass
locale_dir is None.,locale_dir = None
"output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',","output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]"
define the method __contains__ with an argument self.,"def __contains__ ( self , item ) :"
"get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.","total_forms = max ( initial_forms , self . min_num ) + self . extra"
return doy.,return doy
define the function is_aware with an argument value.,def is_aware ( value ) :
"wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string "" OK"" as a argument.","self . stdout . write ( self . style . MIGRATE_SUCCESS ( "" OK"" ) )"
define the method as_string with arguments self and unixfrom set to boolean False.,"def as_string ( self , unixfrom = False ) :"
"if the tuple result equals to tuple containing character ';' and string '""\\073""', respectively, assign _cookie_encodes_correctly the boolean True value, otherwise assign it False. assign return value of the call to the http_cookies.SimpleCookie function to _tc.",_tc = http_cookies . SimpleCookie ( )
"call the method formats.sanitize_separators with an argument value, substitute the result for value.",value = formats . sanitize_separators ( value )
from django.utils.deprecation import RemovedInDjango20Warning into default name space.,from django . utils . deprecation import RemovedInDjango20Warning
"if self.queryset is not None,",if self . queryset is not None :
define the method tzname with 2 arguments: self and dt.,"def tzname ( self , dt ) :"
"append list with element inner to list containing first start elements of result, substitute it for result.",result = result [ : start ] + [ inner ]
"convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.","obj = '%s.%s' % ( app , model . _meta . object_name )"
"call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,",url_fields = split_url ( urlunsplit ( url_fields ) )
"call the function ungettext with 3 arguments: string ""%(size)d byte"", string ""%(size)d bytes"" and 0, '%(size)d' is replaced with 0,","value = ungettext ( ""%(size)d byte"" , ""%(size)d bytes"" , 0 ) % { 'size' : 0 }"
call the function ugettext with an argument message.,return ugettext ( message )
define the method has_previous with an argument self.,def has_previous ( self ) :
from django.core.exceptions import SuspiciousFileOperation into default name space.,from django . core . exceptions import SuspiciousFileOperation
"call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.","arg = ugettext ( 'yes,no,maybe' )"
append attr.name to attrs for every attr in self._moved_attributes.,attrs += [ attr . name for attr in self . _moved_attributes ]
"if self.is_localized is true,",if self . is_localized :
"call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.","options = params . get ( 'OPTIONS' , { } )"
derive the class LocalTimezone from the tzinfo base class.,class LocalTimezone ( tzinfo ) :
increment self.buffer by chunk.,self . buffer += chunk
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.,"def _check_middleware_classes ( app_configs = None , ** kwargs ) :"
from django.core.urlresolvers import set_script_prefix into default name space.,from django . core . urlresolvers import set_script_prefix
return a tuple with 2 elements: integers 1 and 0.,"return ( 1 , 0 )"
derive the class ImmutableList from the tuple base class.,class ImmutableList ( tuple ) :
derive the class IfParser from the object base class.,class IfParser ( object ) :
define the function flatatt with an argument attrs.,def flatatt ( attrs ) :
from django.conf import settings into default name space.,from django . conf import settings
"if extracted is true,",if extracted :
"define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.","def fset ( instance , value , name = fset . __name__ ) :"
"join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.","file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )"
"call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.","module = importlib . import_module ( '.%s' % flup_module , 'flup' )"
"call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.",return bytes ( self ) % rhs
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
yield one element of line iterable.,yield line
substitute Tok.num for self.id.,self . id = Tok . num
define the function to_current_timezone with an argument value.,def to_current_timezone ( value ) :
define the method reload with an argument self.,def reload ( self ) :
from django.utils.safestring import SafeData and mark_safe into default name space.,"from django . utils . safestring import SafeData , mark_safe"
"if not,",else :
from django.utils import six into default name space.,from django . utils import six
"raise an ValueError with an argument string ""Non-reversible reg-exp portion: '(?P%s'"" formated with ch.","raise ValueError ( ""Non-reversible reg-exp portion: '(?P%s'"" % ch )"
"raise an ImportError exception with an argument string ""No IPython"".","raise ImportError ( ""No IPython"" )"
"call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.","super ( ContextDict , self ) . __init__ ( * args , ** kwargs )"
"if http_cookies.CookieError exception is raised,",except http_cookies . CookieError :
call the method HTMLParser.__init__ with an argument self.,HTMLParser . __init__ ( self )
"call the function from_current_timezone with an argument result, return the result.",return from_current_timezone ( result )
"if string 'help' is contained in options,","if ""help"" in options :"
"call the function re.compile with an argument string ""^\s*trans\s+((?:""[^""]*?"")|(?:'[^']*?'))(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?\s*"", substitute the result for inline_re.","inline_re = re . compile ( r""""""^\s*trans\s+((?:""[^""]*?"")|(?:'[^']*?'))(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?\s*"""""" )"
"call the method self.configure_custom with an argument config, substitute the result for result.",result = self . configure_custom ( config )
substitute first 12 elements of r for r.,r = r [ : 12 ]
write 79 '-' characters into self.stream file stream.,self . stream . write ( b'-' * 79 )
return default.,return default
import module random.,import random
"call the method self.setlistdefault with an argument key, append value to the result.",self . setlistdefault ( key ) . append ( value )
return result.,return result
"evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,","return ( isinstance ( other , RegexValidator ) and self . regex . pattern == other . regex . pattern and self . regex . flags == other . regex . flags and ( self . message == other . message ) and ( self . code == other . code ) and ( self . inverse_match == other . inverse_match ) )"
"if not,",else :
"define the method has_key with self class instance, key and version defaulting to None as arguments.","def has_key ( self , key , version = None ) :"
call the method notifier.process_events.,notifier . process_events ( )
use_func is boolean False.,use_func = False
"call the function fastcgi_help with an argument string ""ERROR: Implementation must be one of prefork or thread."", return the result.","return fastcgi_help ( ""ERROR: Implementation must be one of prefork or "" ""thread."" )"
call the self._load_post_and_files method.,self . _load_post_and_files ( )
"call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.","return _generate_cache_key ( request , request . method , [ ] , key_prefix )"
"if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.",is_dst = False if dt is None else self . _isdst ( dt )
"call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.",label = conditional_escape ( force_text ( bf . label ) )
where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name. call the function sys.exit with an argument integer 1.,sys . exit ( 1 )
msg is an empty string.,"msg = """""
substitute first element of row for column_name.,column_name = row [ 0 ]
"if settings.TEMPLATE_DEBUG and display_name are both true,",if settings . TEMPLATE_DEBUG and display_name :
"if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,","return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )"
"called with an argument path, substitute path for locale_dir.",locale_dir = path
relations is an empty dictionary.,relations = { }
substitute filter_func for value under the name key of self.filters dictionary.,self . filters [ name ] = filter_func
return the value under the language_code key of the self._regex_dict dictionary.,return self . _regex_dict [ language_code ]
define initialization method __init__ with self instance of the class as an argument.,def __init__ ( self ) :
"raise an TemplateSyntaxError exception with an argument string ""Could not parse some characters: %s|%s|%s"",","raise TemplateSyntaxError ( ""Could not parse some characters: "" ""%s|%s|%s"" % ( token [ : upto ] , token [ upto : start ] , token [ start : ] ) )"
skip this loop iteration.,continue
"and data, if it evaluates to true, return boolean True.",return True
"define the method source_error with 3 arguments: self, source and msg.","def source_error ( self , source , msg ) :"
define the funtion _generate_cache_header_key with key_prefix and request as arguments.,"def _generate_cache_header_key ( key_prefix , request ) :"
"call the method middleware.process_request with an argument request, substitute the result for result.",result = middleware . process_request ( request )
"raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' , params = { 'value' : val } , )"
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.,"raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )"
derive the class Origin form the base class object.,class Origin ( object ) :
invert self.negated.,self . negated = not self . negated
"otherwise if name is contained in lib.filters,",elif name in lib . filters :
"compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.","exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )"
self.tokens is an empty dictionary.,self . toks = { }
substitute viewname for view.,view = viewname
"if not,",else :
"format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.","return time_str + '%+03d:%02d' % ( hour , minute )"
"otherwise if fourth element of version does not equals to 'final',",elif version [ 3 ] != 'final' :
"'Database state will be brought to the state after that migration.' as arguments. call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.","t = super ( SafeBytes , self ) . __add__ ( rhs )"
"if _serializers is false,",if not _serializers :
define the method __init__ with 2 arguments: self and attrs set to None.,"def __init__ ( self , attrs = None ) :"
raise an exception.,raise
"return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,","return ( path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) , obj . _constructor_args [ 0 ] , obj . _constructor_args [ 1 ] , )"
"""This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state."" ""Are you sure you want to do this?""Type 'yes' to continue, or 'no' to cancel: "", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary. if not,",else :
"and guid_attrs. if value under the 'ttl' key of the item dictionary is not None,",if item [ 'ttl' ] is not None :
"if self.verbosity is integer 1,",if self . verbosity > 1 :
"widget set to None, label set to None, initial set to None, help_text set to an empty strign, unpacked list args and unpacked dictionary kwargs. call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,","super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None , cache_choices , required , widget , label , initial , help_text , * args , ** kwargs )"
call the method cls.__new__ with 2 arguments: cls and unpacked list args.,"return cls . __new__ ( cls , * args )"
break the loop execution.,break
derive the class FileField from the base class Field class.,class FileField ( Field ) :
"call the function re.compile with an argument raw string ""^((?:'[^']*'|[^'])*?)--.*$"", substitute the result for comment_re.","comment_re = re . compile ( r""^((?:'[^']*'|[^'])*?)--.*$"" )"
exit the program with failures converted to boolean as a message.,sys . exit ( bool ( failures ) )
"otherwise if common_prefix is None,",elif common_prefix is None :
saved_locale is None.,saved_locale = None
from django.apps import apps into default name space.,from django . apps import apps
return default.,return default
derive the class override from the object base class.,class override ( object ) :
m2m_data is an empty dictionary.,m2m_data = { }
"get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,","self . error_messages = getattr ( options , 'error_messages' , None )"
"if min_length is not None,",if min_length is not None :
"try,",try :
define the method _cull with argument self.,def _cull ( self ) :
"which has not been installed."" with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively, obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors. return errors.",return errors
"return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,","return chain ( * [ [ format_html ( '<link href=""{0}"" type=""text/css"" media=""{1}"" rel=""stylesheet"" />' , self . absolute_path ( path ) , medium ) for path in self . _css [ medium ] ] for medium in media ] )"
return self.data.hour.,return self . data . hour
self.fixture_count is integer 0.,self . fixture_count = 0
"otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',","elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' , 'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :"
result is None.,result = None
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.,self . META [ 'SCRIPT_NAME' ] = script_name
"convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',","convert = { '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) , ( '__le__' , lambda self , other : self < other or self == other ) , ( '__ge__' , lambda self , other : not self < other ) ] , '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) , ( '__lt__' , lambda self , other : self <= other and not self == other ) , ( '__gt__' , lambda self , other : not self <= other ) ] , '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) , ( '__ge__' , lambda self , other : self > other or self == other ) , ( '__le__' , lambda self , other : not self > other ) ] , '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) , ( '__gt__' , lambda self , other : self >= other and not self == other ) , ( '__lt__' , lambda self , other : not self >= other ) ] }"
do nothing.,pass
"if value is an instance of datetime.datetime,","if isinstance ( value , datetime . datetime ) :"
"append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.",self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"map elements of self._iterator through self.make_bytes function, return the result.","return map ( self . make_bytes , self . _iterator )"
substitute serialize_headers for __bytes__.,__bytes__ = serialize_headers
"call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.","nodelist_false = parser . parse ( ( end_tag , ) )"
define the method _read_limited with self class instance and size set to None as arguments.,"def _read_limited ( self , size = None ) :"
"self.getlist with an argument k, for every k in self. return obj_dict.",return obj_dict
"if node is an instance of Node,","if isinstance ( node , Node ) :"
"open the file fn in read mode, with file descriptor as f,","with open ( fn , 'rb' ) as f :"
try,try :
"if m is true,",if m :
substitute file_size for self.file.size.,self . file . size = file_size
"if not, substitute self.auto_id for id_. if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.",attrs = { 'id' : id_ } if id_ else { }
"append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.",flup_module = 'server.' + options [ 'protocol' ]
"get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,","self . hide_empty = options . get ( 'hide_empty' , False )"
"msg is a string '%sError importing module %s: ""%s""', where '%s' is replaced with error_prefix, dotted_path and e, respectively.","msg = '%sError importing module %s: ""%s""' % ( error_prefix , dotted_path , e )"
"if not,",else :
substitute stream for self.stream.,self . stream = stream
"substitute the result for context_match. call the method context_match.group with an argument integer 1, substitute the result for message_context.",message_context = context_match . group ( 1 )
"try,",try :
"call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.","u = salt + struct . pack ( b'>I' , i )"
call the method self.instance.validate_unique with an argument exclude set to exclude.,self . instance . validate_unique ( exclude = exclude )
"call the context.push method, with the result, perform,",with context . push ( ) :
define the function _sanitize_ipv4_mapping with an argument ip_str.,def _sanitize_ipv4_mapping ( ip_str ) :
"call the function _strip_once with an argument value, substitute the result for new_value.",new_value = _strip_once ( value )
"substitute '%s' with self._dir converted to a string. define the method key_to_file with self class instance, key and version defaulting to None as arguments.","def _key_to_file ( self , key , version = None ) :"
"if not,",else :
"and unpacked dictionary kwargs, return the result. define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def assertRegex ( self , * args , ** kwargs ) :"
substitute third element of renamed_method for deprecation_warning.,deprecation_warning = renamed_method [ 2 ]
"define the method clean with arguments self, data and initial set to None.","def clean ( self , data , initial = None ) :"
define the method __init__ with an argument self.,def __init__ ( self ) :
define the function widthratio with 2 arguments: parser and token.,"def widthratio ( parser , token ) :"
"call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,",if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.",final_attrs = self . build_attrs ( attrs )
"join path and entry into a file path, if it exists,","if os . path . isdir ( os . path . join ( path , entry ) ) :"
return t.,return t
from django.utils.module_loading import import_string into default name space.,from django . utils . module_loading import import_string
call the method self.validate_key with argument key.,self . validate_key ( key )
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.,attrs [ 'localized_fields' ] = localized_fields
"concatenate string '%0', width and string ""d. %s"", format the previous string with i incremented by 1 and line,","lines [ i ] = ( ""%0"" + width + ""d. %s"" ) % ( i + 1 , line )"
"substitute first, second and second elements of bits for yes, no, maybe, respectively.","yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]"
"call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,",return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
"try,",try :
"join 'conf' and 'locale' into a file path, if it is a directory,","if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :"
return self.,return self
"MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.",MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
substitute _iterlists for lists.,lists = _iterlists
call the method obj.delete.,obj . delete ( )
"template is an instance of Template class, created with an argument content.",template = Template ( content )
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
return value.,return value
call the method __new__ with an argument cls from the base class of the klass function.,"obj = super ( klass , cls ) . __new__ ( cls )"
"in the previous result for with string '\n', substitute the result for eol_message. get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.","t = getattr ( _active , ""value"" , None )"
call method self.stdout.write with statement as an argument.,self . stdout . write ( statement )
"call the method self.make_bytes with an argument content, append it to self._container.",self . _container . append ( self . make_bytes ( content ) )
"get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format. call the method value.strftime with an argument format, return the result.",return value . strftime ( format )
"call the self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"if self.use_argparse is true,",if self . use_argparse :
define the method I with an argument self.,def I ( self ) :
"and path with self.path, substitute the result for current_uri. call the function urljoin with arguments current_uri and location, substitute the result for location.","location = urljoin ( current_uri , location )"
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.,"g = generator . Generator ( fp , mangle_from_ = False )"
from django.apps import apps into default name space.,from django . apps import apps
"if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.","safe = isinstance ( value , SafeData )"
define the method _iteritems with an argument self.,def _iteritems ( self ) :
"if shown is an empty set,",if not shown :
"define the method __init__ with 4 arguments: self, name, old and new set to None.","def __init__ ( self , name , old , new = None ) :"
do nothing.,pass
import hashlib module.,import hashlib
define the method __getinitargs__ with an argument self.,def __getinitargs__ ( self ) :
"add model to a set, substitute the result for known_models. pending_references is an empty dictionary.",pending_references = { }
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,",format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
import module re.,import re
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.,DateTimeAwareJSONEncoder = DjangoJSONEncoder
"or with an empty string if its not, append the resulting string to full_statement. append string ');' to full_statement.",full_statement . append ( ');' )
"call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.",return pickle . loads ( zlib . decompress ( f . read ( ) ) )
call the method self.connection.login with arguments self.username and self.password.,"self . connection . login ( self . username , self . password )"
"call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.","return self . data . tzinfo . tzname ( self . data ) or """""
"if self.timezone is false,",if not self . timezone :
substitute version_info from module sys for surrent_version.,current_version = sys . version_info
return boolean False.,return False
import module base64.,import base64
"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.",table = connections [ db ] . ops . quote_name ( self . _table )
define the function _get_val.,def _get_val ( ) :
"if new is None,",if new is None :
define the function get_ns_resolver with arguments ns_pattern and resolver.,"def get_ns_resolver ( ns_pattern , resolver ) :"
"finally perform,",finally :
"return a string '<%s token: ""%s..."">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.","return ( '<%s token: ""%s..."">' % ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )"
return statements.,return statements
and fileobj set to zbuf. call the method zfile.write with an argument s.,zfile . write ( s )
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","ch , escaped = next ( pattern_iter )"
"call the function os.fdopen with arguments fd and mode, substitute it for _file.","_file = os . fdopen ( fd , mode )"
using_sysrandom is boolean True.,using_sysrandom = True
"is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary, is grater than self.absolute_max, raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:","raise ValidationError ( ungettext ( ""Please submit %d or fewer forms."" , ""Please submit %d or fewer forms."" , self . max_num ) % self . max_num , code = 'too_many_forms' , )"
"for every d in self.dicts,",for d in self . dicts :
define the method __copy__ with an argument self.,def __copy__ ( self ) :
substitute complain for insert.,insert = complain
return None.,return None
"replace '%s' in a string ""Created new squashed migration %s"" with writer.path, use it as an argument for the call to the method,","self . stdout . write ( self . style . MIGRATE_HEADING ( ""Created new squashed migration %s"" % writer . path ) )"
import module sys.,import sys
define the method add_arguments with 2 arguments: self and parser.,"def add_arguments ( self , parser ) :"
call the method _ExpatParser.reset with an argumen sefl.,_ExpatParser . reset ( self )
"if settings.DEBUG is true, return boolean False, otherwise return boolean True.",return not settings . DEBUG
"replace '%s' in the string ""%s.process_template_response didn't return an HttpResponse object. It returned None instead."",","raise ValueError ( ""%s.process_template_response didn't return an "" ""HttpResponse object. It returned None instead."" % ( middleware_method . __self__ . __class__ . __name__ ) )"
"call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,",with connections [ db ] . cursor ( ) as cursor :
"from django.conf import settings, global_settings into default name space.","from django . conf import settings , global_settings"
"return new_name, field_params and field_notes.","return new_name , field_params , field_notes"
substitute nodelist for self.nodelist.,self . nodelist = nodelist
skip this loop iteration.,continue
"if not,",else :
from django.utils import six into default name space.,from django . utils import six
"while bit doesnt end with sential,",while not bit . endswith ( sentinal ) :
"get the value under the 'content-type' key of the info dictionary, substitute it for content_type.",content_type = info . get ( 'content-type' )
from pprint import pformat into default name space.,from pprint import pformat
"try,",try :
from django.core.files import temp as tempfile into default name space.,from django . core . files import temp as tempfile
"raise an CommandError exception with an argument string ""You can only use --pks option with one model"".","raise CommandError ( ""You can only use --pks option with one model"" )"
"for every field, messages in return value of the message.items method,","for field , messages in message . items ( ) :"
define the method get_default_prefix with an argument cls.,def get_default_prefix ( cls ) :
"get the type of self object, call its method __bool__ with an argument self, return the result.",return type ( self ) . __bool__ ( self )
"if values under ""author_name"" and ""author_email"" keys of the item dictionary are both true,","if item [ ""author_name"" ] and item [ ""author_email"" ] :"
"call the function os.getpid, substitute it for pid.",pid = os . getpid ( )
define the method __len__ with an argument self.,def __len__ ( self ) :
"call the function get_resolver with an argument urlconf, substitute the result for resolver.",resolver = get_resolver ( urlconf )
"call the function re.compile with an argument raw string ""^\s*plural$"", substitute the result for plural_re.","plural_re = re . compile ( r""""""^\s*plural$"""""" )"
from django.utils.six.moves import input into default name space.,from django . utils . six . moves import input
"call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.","f . write ( pickle . dumps ( expiry , - 1 ) )"
"regex is an property object of this class, with _get_regex getter and _set_regex setter function.","regex = property ( _get_regex , _set_regex )"
define the method __init__ with 2 arguments: self and loaders.,"def __init__ ( self , loaders ) :"
"try,",try :
"if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.",self . help_text = field . help_text or ''
"otherwise if second element of args equals a string '404',",elif args [ 1 ] == '404' :
return result.,return result
define the function get_templatetags_modules.,def get_templatetags_modules ( ) :
"and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list. if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
program is string 'msgfmt',program = 'msgfmt'
"from django.db import connections, transaction, router and DatabaseError into default name space.","from django . db import connections , transaction , router , DatabaseError"
"_iterkeys is a string ""iterkeys"".","_itervalues = ""itervalues"""
"take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.",locales = locale or all_locales
"if seconds smaller than integer 0, sign is '-', otherwise sign is '+',",sign = '-' if seconds < 0 else '+'
"tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS', tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'. define the function reset_format_cache.",def reset_format_cache ( ) :
"if max_age is not None,",if max_age is not None :
define the method __iter__ with an argument self.,def __iter__ ( self ) :
from django.db.models.fields.related import RelatedObject into default namespace.,from django . db . models . fields . related import RelatedObject
"if site is contained in sites1,",for site in sites1 :
"call the method self.nodelist.render with an argument new_context, return the result.",return self . nodelist . render ( new_context )
define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.,"def __wrapper__ ( * args , ** kw ) :"
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.,raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
"call the method apps.get_app_configs, for every app_config in the result,",for app_config in apps . get_app_configs ( ) :
"if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,","self . coerce = kwargs . pop ( 'coerce' , lambda val : val )"
define the method add_initial_prefix with 2 arguments: self and field_name.,"def add_initial_prefix ( self , field_name ) :"
"if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',",if len ( bits ) < 3 or bits [ 1 ] != 'as' :
"define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.","def deserialize ( format , stream_or_string , ** options ) :"
define the method __init__ with 2 arguments: self and variables.,"def __init__ ( self , variables ) :"
"call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,","self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )"
"if key is contained in d,",if key in d :
derive the class BaseCache from the object base class.,class BaseCache ( object ) :
"find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.","attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )"
"subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,","subclass = type ( ""Migration"" , ( migrations . Migration , ) , { ""dependencies"" : [ ] , ""operations"" : new_operations , ""replaces"" : replaces , } )"
best_doublecolon_start is an integer -1.,best_doublecolon_start = - 1
"if constant is true,",if constant :
"otherwise it is boolean False. if kwarg_format is false,",if not kwarg_format :
call the function os.chmod with arguments dst and mode.,"os . chmod ( dst , mode )"
"call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.",self . html_initial_name = form . add_initial_prefix ( name )
"call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.","statements = sql_custom ( app_config , self . style , connection )"
"substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:","output . append ( '%s<li>%s%s</li>' % ( indent , escaper ( force_text ( title ) ) , sublist ) )"
"get the type of the self object, on the result call the __bool__ method with an argument self, return the result.",return type ( self ) . __bool__ ( self )
"if s is an instance of object bytes,","if isinstance ( s , bytes ) :"
define the method reader_enters with an argument self.,def reader_enters ( self ) :
"raise an DisallowedRedirect exception with an argument string ""Unsafe redirect to URL with protocol '%s'"",","raise DisallowedRedirect ( ""Unsafe redirect to URL with protocol '%s'"" % parsed . scheme )"
"define the method get with 5 arguments, self class instance, key, default set to None and version set to None.","def get ( self , key , default = None , version = None ) :"
from importlib import import_module.,from importlib import import_module
"if plan_node is not contained in shown and first element of plan_node equals to app_name,",if plan_node not in shown and plan_node [ 0 ] == app_name :
substitute left for self.first.,self . first = left
flush the output buffer of the self.stdout object.,self . stdout . flush ( )
"join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',",out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
current_chunk is None.,current_chunk = None
"with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result. define the method as_ul with an argument self.",def as_ul ( self ) :
"'startapp' and 'startproject'. try,",try :
tried is an empty list.,tried = [ ]
"if extend is boolean True,",if extend is True :
from django.core import serializers into default name space.,from django . core import serializers
"call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,","return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )"
self._choices and self.widget.choices are assigned value converted into a list.,self . _choices = self . widget . choices = list ( value )
"call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.","regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )"
"call the method inspect.getmro with an argument new_class, for every base in the result,",for base in inspect . getmro ( new_class ) :
return boolean True.,return True
derive the class ExtendsError from the Exception base class.,class ExtendsError ( Exception ) :
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,","filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )"
"if not,",else :
"if not,",else :
"call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.",return get_supported_language_variant ( settings . LANGUAGE_CODE )
"if can fail is true,",if can_fail :
call the function get_urlconf with an argument urlconf.,urlconf = get_urlconf ( )
"if not,",else :
return context.,return context
"for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,","self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]"
if content is not None raise an error.,assert content is None
"if data is None,",if data is None :
"if qs._result_cache is not None,",if qs . _result_cache is not None :
"if last element of line is newline or carriage return character,","if line [ - 1 : ] in ( b'\n' , b'\r' ) :"
derive the class metaclass form the meta base class.,class metaclass ( meta ) :
derive the class Command from the AppCommand base class.,class Command ( AppCommand ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"define the method __init__ with arguments self, stream and boundary.","def __init__ ( self , stream , boundary ) :"
define the method __len__ with an argument self.,def __len__ ( self ) :
"if self.data is false,",if not self . data :
append f.name to exclude.,exclude . append ( f . name )
and unpacked dictionary kwargs. define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.,"def allow_lazy ( func , * resultclasses ) :"
"if Exception exception is caught,",except Exception :
define the method bpython with an argument self.,def bpython ( self ) :
substitute value for the vale under the name key of the pdict dictionary.,pdict [ name ] = value
substitute value under the RESULT key of the root dictionary for oldvalue.,oldvalue = root [ RESULT ]
"if ValueError exception is caught,",except ValueError :
define the method send_messages with arguments self and email_message.,"def send_messages ( self , email_messages ) :"
derive the class URLField from the base class CharField class.,class URLField ( CharField ) :
"for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,","return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]"
substitute tagtype for self.tagtype.,self . tagtype = tagtype
call the function reloader_thread.,reloader_thread ( )
"define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.","def __init__ ( self , parent_widget , name , value , attrs , choices ) :"
substitute complain for extend.,extend = complain
"define the function ngettext with 3 arguments: singular, plural and number.","def ngettext ( singular , plural , number ) :"
"if self.app_label is true and app_config.label is not equal to self.app_label,",if self . app_label and app_config . label != self . app_label :
"if script_url is false,",if not script_url :
if not self.error_messages is None. derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.,class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
"msg is a string ""[%s] %s\n"", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.","msg = ""[%s] %s\n"" % ( self . log_date_time_string ( ) , format % args )"
define the function iterbytes with an argument buf.,def iterbytes ( buf ) :
substitute help_texts for value under the 'help_texts' key of attrs dictionary.,attrs [ 'help_texts' ] = help_texts
"if val is not None,",if val is not None :
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"if self._wrapped is empty,",if self . _wrapped is empty :
define the method __str__ with an argument self.,def __str__ ( self ) :
define the method forms with an argument self.,def forms ( self ) :
"if widget is false,",if not widget :
"prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.",attrs_plus [ 'id' ] += '_{0}' . format ( i )
"if schemes is not None,",if schemes is not None :
self.vals is an empty list.,self . vals = [ ]
"call the method callback.rindex with an argument character '.', substitute the result for dot.",dot = callback . rindex ( '.' )
resource_string is None.,resource_string = None
"if kwargs is None,",if kwargs is None :
"if sign is contained in self.digits,",if sign in self . digits :
"call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.",extra_attrs = self . widget_attrs ( widget )
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if not,",else :
"call the function import_module with an argument path, substitute it for package.",package = import_module ( path )
substitute initial_id for self.auto_id.,self . initial = initial
"call the method formats.number_format with 2 arguments: number and absolute value of p,","return mark_safe ( formats . number_format ( number , abs ( p ) ) )"
"get value under the 'database' key of the options dictionary, substitute it for db.",db = options . get ( 'database' )
"cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.","new_name , num_repl = re . subn ( r'\W' , '_' , new_name )"
"if data_list is true,",if data_list :
"for every field, errors in self.error_dict.items method return value,","for field , errors in self . error_dict . items ( ) :"
"msg is a string ""Execution of %s failed: %s"", with '%s' replaced by self.program and errors.","msg = ""Execution of %s failed: %s"" % ( self . program , errors )"
from django.utils.functional import Promise into default name space.,from django . utils . functional import Promise
define the function conditional_content_removal with request and response as the arguments.,"def conditional_content_removal ( request , response ) :"
"call the method self.__dict__.copy, substitute the result for state.",state = self . __dict__ . copy ( )
value is boolean True.,value = True
"get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,","if options . get ( ""list"" , False ) :"
EndToken is an instance of EndToken class.,EndToken = EndToken ( )
"if server is an instance of six.string_types,","if isinstance ( server , six . string_types ) :"
"otherwise if self.fixture_object_count equals self.loaded_object_count,",elif self . fixture_object_count == self . loaded_object_count :
"call the function warnings.warn with 2 arguments: string ""Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead."" and RemovedInDjango19Warning.","warnings . warn ( ""Custom SQL location '<app_label>/models/sql' is "" ""deprecated, use '<app_label>/sql' instead."" , RemovedInDjango19Warning )"
"from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.","from django . core . cache . backends . base import ( InvalidCacheBackendError , CacheKeyWarning , BaseCache )"
"if data is true, substitute it for data, otherwise data is an empty list.",data = data or [ ]
"call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,","re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )"
"if file path absolute_path exists,",if path . exists ( absolute_path ) :
define the method as_tuple with 2 arguments: self and value.,"def as_tuple ( self , value ) :"
"if self.stream is not None,",if self . stream is not None :
"call the method tarfile.open with an argument file, substitute the result for self._archive.",self . _archive = tarfile . open ( file )
return nothing.,return
"if not,",else :
skip this loop iteration.,continue
"convert value into a string, take character at the negative arg index, convert it into an integer, return it.",return int ( str ( value ) [ - arg ] )
import bz2.,import bz2
return attachment.,return attachment
"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.",table = connections [ db ] . ops . quote_name ( self . _table )
"if 'locale' is a directory,",if os . path . isdir ( 'locale' ) :
convert self into a string and return it.,return str ( self )
yield item.,yield item
"call the self.set method with key, new_value and version set to version as arguments.","self . set ( key , new_value , version = version )"
"calculate length of provided and increment it by one, substitute the result for plen.",plen = len ( provided ) + 1
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"call the function allow_lazy with an argument chars, substitute the result for chars.",chars = allow_lazy ( chars )
file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.,file = BytesIO ( data [ 'content' ] )
call the method filename.encode with an argument string 'ascii',filename . encode ( 'ascii' )
"from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.","from django . utils . six . moves . urllib . parse import ( quote , quote_plus , unquote , unquote_plus , urlparse , urlencode as original_urlencode )"
call the function,"kwarg = token_kwargs ( [ bit ] , parser )"
return duplicate.,return duplicate
"call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.","self . _delete ( self . _key_to_file ( key , version ) )"
"call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.",data [ f . name ] = f . value_from_object ( instance )
substitute self.rawdata for rawdata.,rawdata = self . rawdata
derive the class BadSerializer from the object base class.,class BadSerializer ( object ) :
"if value is not contained in result,",if value is not result :
call the method self.empty_block_tag with an argument token.,self . empty_block_tag ( token )
"call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,","handler . addQuickElement ( ""updated"" , rfc3339_date ( self . latest_post_date ( ) ) )"
"call the method Field.validate with 2 arguments: self and value, return the result.","return Field . validate ( self , value )"
"for every value in result of the method self.prepare_value called with an argument initial. data_set is set created out of return values of the function force_text called with an argument value,",data_set = set ( force_text ( value ) for value in data )
"if nor,",else :
"define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.","def save_existing ( self , form , instance , commit = True ) :"
import module smtplib.,import smtplib
define the function get_mod_func with an argument callback.,def get_mod_func ( callback ) :
"try,",try :
"define the method handle_template with 3 arguments: self, template and subdir.","def handle_template ( self , template , subdir ) :"
"raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',","raise ValidationError ( self . error_messages [ 'invalid_pk_value' ] , code = 'invalid_pk_value' , params = { 'pk' : pk } , )"
substitute charset for self.encoding.,self . encoding = charset
define the method next_token with an argument self.,def next_token ( self ) :
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"skip this loop iteration,",continue
"call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.","result = super ( DateTimeField , self ) . to_python ( value )"
substitute _iteritems for iteritems.,iteritems = _iteritems
define the function camel_case_to_spaces with an argument value.,def camel_case_to_spaces ( value ) :
"call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.","result = logging . Formatter ( fmt , dfmt )"
"call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.","key = bytes_to_text ( key , self . encoding )"
"if not, substitute used_name for guessed_filename. if not,",else :
"write string ""No changes detected"" to self.stdout stream.","self . stdout . write ( ""No changes detected"" )"
derive the class TagHelperNode form the base class Node.,class TagHelperNode ( Node ) :
call the method self.open(),self . open ( )
"for every func and unused in filter_expr.filters,","for func , unused in filter_expr . filters :"
derive the class LocaleRegexProvider with object as base class.,class LocaleRegexProvider ( object ) :
"replace all the '%s' occurrences with migration_name and app_label, respectively. target is a list containing tuple with two elements app_label and migration.name.","targets = [ ( app_label , migration . name ) ]"
"'<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>', row_ender set to a string '</li>', help_text_html set to a string, ' <span class=""helptext"">%s</span>', and errors_on_separate_row set to boolean False. define the method as_p with an argument self.",def as_p ( self ) :
"split lang_code by '-', substitute the first element of the result for generic_lang_code.",generic_lang_code = lang_code . split ( '-' ) [ 0 ]
return next element of the iterable it.,return it . next ( )
output is a list containing an entry: result of the function format_html called with 2 arguments:,"output = [ format_html ( '<select multiple=""multiple""{0}>' , flatatt ( final_attrs ) ) ]"
"try,",try :
"call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to print the SQL for. Defaults to the ' '""default"" database.' )"
"if name starts with an string '.',",if name . startswith ( '.' ) :
return a list containing results of the function format_html called with 2 arguments:,"return [ format_html ( '<script type=""text/javascript"" src=""{0}""></script>' , self . absolute_path ( path ) ) for path in self . _js ]"
"if not,",else :
"from django.utils.encoding import force_bytes, force_str and force_text into default name space.","from django . utils . encoding import force_bytes , force_str , force_text"
"where '%s' is replaced with command and result of the function get_text_list called with an argument list, with p converted into a string and surrounded with single quotes for every p in parse_until. call the method self.error with 2 arguments: token and string ""Invalid block tag: '%s'"", where '%s' is replaced with command,","raise self . error ( token , ""Invalid block tag: '%s'"" % command )"
"if TemplateDoesNotExist, renamed to e, exception is caught,",except TemplateDoesNotExist as e :
return sites.,return sites
do nothing.,pass
call to the resolver.resolve method with request.path_info as an argument.,resolver_match = resolver . resolve ( request . path_info )
"substitute result for the value of the memo dictionary, with identity of the self object as an key.",memo [ id ( self ) ] = result
substitute smart_bytes for smart_str.,smart_str = smart_bytes
settings.BASE_DIR.,settings . BASE_DIR
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.,"def popen_wrapper ( args , os_err_exc_type = CommandError ) :"
return last element of list_.,return list_ [ - 1 ]
"get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.",return _serializers [ format ] . Deserializer
define the private method __contains__ with self class instance and key as arguments.,"def __contains__ ( self , key ) :"
"if _cached_filenames is empty and settings.USE_I18N is True,",if not _cached_filenames and settings . USE_I18N :
"if token_string starts with VARIABLE_TAG_START,",if token_string . startswith ( VARIABLE_TAG_START ) :
"decorator function register.filter with 2 arguments string ""slice"" and is_safe set to boolean True.","@ register . filter ( ""slice"" , is_safe = True )"
derive class MovedModule from the _LazyDescr base class.,class MovedModule ( _LazyDescr ) :
"call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.","signal . signal ( signal . SIGTTOU , old_handler )"
input_type is a string 'url'.,input_type = 'url'
return settings.LANGUAGE_CODE.,return settings . LANGUAGE_CODE
remove self._regex_validator from self.validators.,self . validators . remove ( self . _regex_validator )
"call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,","with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :"
"return six.text_type(s).encode(encoding, errors).","return six . text_type ( s ) . encode ( encoding , errors )"
define the method __init__ with 2 arguments: self and name.,"def __init__ ( self , name ) :"
substitute HiddenInput for widget.,widget = HiddenInput
"if not,",else :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"if cookie is not an instance of http_cookies.BaseCookie,","if not isinstance ( cookie , http_cookies . BaseCookie ) :"
"call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',","handler . addQuickElement ( ""atom:link"" , None , { ""rel"" : ""self"" , ""href"" : self . feed [ 'feed_url' ] } )"
return an empty string.,return ''
"if self.field.show_hidden_initial is true,",if self . field . show_hidden_initial :
"if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,","self . coerce = kwargs . pop ( 'coerce' , lambda val : val )"
define the function do_block with 2 arguments parser and token.,"def do_block ( parser , token ) :"
"call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.","super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
substitute self.context.render_context for render_context.,render_context = self . context . render_context
"call the function self._key_to_file with key and version as arguments, substitute it for fname.","fname = self . _key_to_file ( key , version )"
"otherwise if formfield_callback is not callable object,",elif not callable ( formfield_callback ) :
"evaluate self._has_expired with argument key, if the result is True,",if self . _has_expired ( key ) :
from django.template.loader import BaseLoader into default name space.,from django . template . loader import BaseLoader
"try,",try :
define the method delete with arguments self and name.,"def delete ( self , name ) :"
call self.clear method.,self . clear ( )
substitute save_as_new for self.save_as_new.,self . save_as_new = save_as_new
"remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.","fp = kwargs . pop ( ""file"" , sys . stdout )"
from django.forms.fields import IntegerField and BooleanField into default name space.,"from django . forms . fields import IntegerField , BooleanField"
substitute self.form.auto_id for auto_id.,auto_id = self . form . auto_id
return integer -1.,return - 1
"call the function ugettext with an argument msg_with_ctxt, substitute the result for result.",result = ugettext ( msg_with_ctxt )
return j.,return j
derive the class Command from the BaseCommands base class.,class Command ( BaseCommand ) :
substitute chr for int2byte.,int2byte = chr
"for every template_dir in template_dirs,",for template_dir in template_dirs :
"if pythonrc is not a file,",if not os . path . isfile ( pythonrc ) :
set result attribute name to value value.,"setattr ( result , name , value )"
do nothing.,pass
"call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.","pgettext_lazy = lazy ( pgettext , six . text_type )"
"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.",table = connections [ db ] . ops . quote_name ( self . _table )
get 'value' attribute of the _active object,"self . old_timezone = getattr ( _active , 'value' , None )"
self._current is None.,self . _current = None
"define the method parse_file_upload with 3 arguments: self, META and post_data.","def parse_file_upload ( self , META , post_data ) :"
"for every refto and refs in return value of the method references.items,","for refto , refs in references . items ( ) :"
"static method,",@ staticmethod
define the method add_root_elements with 2 arguments self and handler.,"def add_root_elements ( self , handler ) :"
import threading.,import threading
import module sys.,import sys
"call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.",checkbox_name = self . clear_checkbox_name ( name )
message_context is None.,message_context = None
derive the class EmailBackend from the ConsoleEmailBackend base class.,class EmailBackend ( ConsoleEmailBackend ) :
define the function prepare_js_for_gettext with an argument js.,def prepare_js_for_gettext ( js ) :
"call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.",__contains__ = new_method_proxy ( operator . contains )
all_unique_checks is an empty set.,all_unique_checks = set ( )
"convert o to an string, return it.",return str ( o )
"call the function timesince with 2 arguments: value and arg, return the result.","return timesince ( value , arg )"
"call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.",self . xml . characters ( smart_text ( related_att ) )
return an empty list.,return [ ]
"if key is contained in dict_,",if key in dict_ :
"if _supported is None,",if _supported is None :
"if ImportError, renamed to e, exception is caught,",except ImportError as e :
"try,",try :
"call the method self.flo.read with an argument self.chunk_size, substitute the result for data.",data = self . flo . read ( self . chunk_size )
current_fields is an empty list.,current_fields = [ ]
"if Exception exception is caught,",except Exception :
"if self._errors is None,",if self . _errors is None :
delete the value under the key key of the self._expire_info dictionary.,del self . _expire_info [ key ]
"split tag_re by self.template_string separator, for every bit in result,",for bit in tag_re . split ( self . template_string ) :
"if i is true,",if i :
"if exists, if not use None as the second argument, return the result. call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.","executor = MigrationExecutor ( connection , self . migration_progress_callback )"
"if max_length is not None,",if max_length is not None :
from pprint import pformat.,from pprint import pformat
return output.,return output
"call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.","return super ( classonlymethod , self ) . __get__ ( instance , owner )"
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","def __init__ ( self , * args , ** kwargs ) :"
answer is None.,answer = None
"if not,",else :
"if incomment is true,",if incomment :
"required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs. if required is true and initial is not None,",if required and ( initial is not None ) :
self._leftover is an empty string.,self . _leftover = b''
__slots__ is a string 'hashvalue'.,__slots__ = 'hashvalue'
"decorator python_2_unicode_compatible,",@ python_2_unicode_compatible
"call the self._lock.writer method, with the result perform the following,",with self . _lock . writer ( ) :
import module os.,import os
"call the method termios.tcgetattr with argument fd, substitute the result for attr_list.",attr_list = termios . tcgetattr ( fd )
derive the class TimeFormat from the base class Formatter.,class TimeFormat ( Formatter ) :
"if not,",else :
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
"if row is None,",if row is None :
"if attrs is not None,",if attrs is not None :
substitute definition for value under the role key of palette dictionary.,palette [ role ] = definition
"convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.","self . attrs [ 'id' ] += ""_%d"" % self . index"
"questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:",questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
"skip this loop iteration,",continue
self.resolver_match is None.,self . resolver_match = None
"if second from the end element of args equals a string 'as',","elif args [ - 2 ] == ""as"" :"
derive the class _OFFSET from the Structure base class.,class _OFFSET ( Structure ) :
"call the function get_commands, substitute the value under the name key of the return value, for app_name.",app_name = get_commands ( ) [ name ]
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
derive the class Context from the BaseContext base class.,class Context ( BaseContext ) :
define the method values with an argument self.,def values ( self ) :
"convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.","block = type ( self ) ( block . name , block . nodelist )"
decrement factor by one.,factor -= 1
"define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.","def new_file ( self , * args , ** kwargs ) :"
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.,class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
use global variable _localtime.,global _localtime
substitute deactivate for self.deactivate.,self . deactivate = deactivate
"convert ret to a boolean, return it.",return bool ( ret )
call the method self.style.NOTICE with an argument:,"self . stdout . write ( self . style . NOTICE ( ""\nYou have unapplied migrations; your app may not work properly until they are applied."" ) )"
decorator python_2_unicode_compatible.,@ python_2_unicode_compatible
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.,key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
return an instance of NodeList class.,return NodeList ( )
define the initialization method __init__ with self class instance and table as arguments.,"def __init__ ( self , table ) :"
"call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.",self . locale_paths . append ( os . path . abspath ( 'locale' ) )
return major.,return major
substitute id for self.id.,self . id = id
c is an empty list.,c = [ ]
"append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.","self . attachments . append ( ( filename , content , mimetype ) )"
substitute server for self._servers.,self . _servers = server
derive the class Command from the AppCommand base class.,class Command ( AppCommand ) :
"dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'. call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',","parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False , help = 'Use natural primary keys if they are available.' )"
"try,",try :
do nothing.,pass
call the method handler.file.close.,handler . file . close ( )
"call the function force_text with an argument base, substitute the result for base.",base = force_text ( base )
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"data is an instance of BytesIO class, created with an argument: self._body.",data = BytesIO ( self . _body )
"call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,","url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )"
"call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.","neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )"
message_context is None.,message_context = None
"call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,","return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )"
define the method __iter__ with an argument self.,def __iter__ ( self ) :
substitute show_hidden_initial for self.show_hidden_initial.,self . show_hidden_initial = show_hidden_initial
"for every name in pattern.reverse_dict,",for name in pattern . reverse_dict :
define the function regroup with 2 arguments: parser and token.,"def regroup ( parser , token ) :"
append string '</select>' to output.,output . append ( '</select>' )
"open file named path in 'rb' mode, with file descriptor as f,","with open ( path , 'rb' ) as f :"
if OSError or TypeError errors occurred.,"except ( OSError , TypeError ) :"
"join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.","potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )"
return sys.modules dictionary value under the name key.,return sys . modules [ name ]
from django.utils import six into default name space.,from django . utils import six
"if file_name is false,",if not file_name :
"call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.",self . __offset = timedelta ( minutes = offset )
raise an exception.,raise
value under the item key of self.dict dictionary is None.,self . dict [ item ] = None
"if not,",else :
format_key is a string 'DATE_INPUT_FORMATS'.,format_key = 'DATE_INPUT_FORMATS'
"increment i by integer 1, substitute the result for i.",i = i + 1
"string 'Enter a list of values.' for 'list', return value of the function _ called with an argument, string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string '""%(pk)s"" is not a valid value for a primary key.' for 'invalid_pk_value'. define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,","def __init__ ( self , queryset , cache_choices = None , required = True , widget = None , label = None , initial = None , help_text = '' , * args , ** kwargs ) :"
substitute content_type for self.content_type.,self . content_type = content_type
"and help is a string 'Migrations will be squashed until and including this migration.'. call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',","parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False , help = 'Do not try to optimize the squashed operations.' )"
"if member is a directory,",if member . isdir ( ) :
internal_use_only is boolean False.,internal_use_only = False
dirs is a list containing basedir.,dirs = [ basedir ]
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
increment the offset by the length of self.__starttag_text.,offset = offset + len ( self . __starttag_text )
"try,",try :
"raise an CommandError exception with an argument string ""errors happened while running msguniq\n%s"", where '%s' is replaced with errors.","raise CommandError ( ""errors happened while running msguniq\n%s"" % errors )"
"if six.PY2 is true,",if six . PY2 :
default_validators is a list with an element validators.validate_email.,default_validators = [ validators . validate_email ]
"called with 2 arguments: value rounded to 1 decimal point and integer 1. move integer 1 left for 10 bits, substitute the result for KB.",KB = 1 << 10
substitute __setitem__ filed of the base class of the class SortedDict for super_set.,"super_set = super ( SortedDict , self ) . __setitem__"
"call the method self._render with an argument context, return the result,",return self . _render ( context )
"call the method six.unichr with an argument c, return the result.",return six . unichr ( c )
_file is None.,_file = None
"call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.",time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
substitute self.__class__.__doc__ for self.__doc__.,self . __doc__ = self . __class__ . __doc__
"substitute '%s' in string ""#. #-#-#-#-# %s.pot (PACKAGE VERSION) #-#-#-#-#\n"" with self.domain,","msgs = msgs . replace ( ""#. #-#-#-#-# %s.pot (PACKAGE VERSION) #-#-#-#-#\n"" % self . domain , """" )"
from django.utils.module_loading import module_has_submodule into default name space.,from django . utils . module_loading import module_has_submodule
"fetch next entry for the database that cursor points into, substitute first element of it for num.",num = cursor . fetchone ( ) [ 0 ]
"call the method s.getvalue, return the result.",return s . getvalue ( )
"call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.",tables = connection . introspection . django_table_names ( only_existing = True )
define the method __str__ with an argument self.,def __str__ ( self ) :
return an empty string.,return ''
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT # NOQA into default name space.,from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
define the method y with an argument self.,def y ( self ) :
return boolean True.,return True
"if timeout is not None,",if timeout is not None :
"call the method data.getlist with an argument name, return the result.",return data . getlist ( name )
extend basedirs list with settings.LOCALE_PATHS.,basedirs . extend ( settings . LOCALE_PATHS )
changed is boolean False.,changed = False
from django.db.migrations.loader import MigrationLoader into default name space.,from django . db . migrations . loader import MigrationLoader
"if Exception exception is caught,",except Exception :
substitute MONTHS for self.months.,self . months = MONTHS
"call the serializer function, call the loads method on the return value with an argument data, return the result.",return serializer ( ) . loads ( data )
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"property decorator,",@ property
"otherwise if self.verbosity is greater than integer 0,",elif self . verbosity > 0 :
call the method self.clear_cdata_mode.,self . clear_cdata_mode ( )
define the function first with an argument value.,def first ( value ) :
"if value under the 'daemonize' of options dictionary is None,","if options [ ""daemonize"" ] is None :"
"if error is not an instance of ValidationError,","if not isinstance ( error , ValidationError ) :"
do nothing.,pass
"if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.","id = ""(%s) "" % self . id if self . id else """""
"join statements into a string, separated by newlines, return it.",return '\n' . join ( statements )
"if default_list is None,",if default_list is None :
"try,",try :
"try,",try :
"call the method query_string.decode, substitute the result for query_string.",query_string = query_string . decode ( )
"if source is None,",if source is None :
"if value is false,",if not value :
self._is_rendered is boolean True.,self . _is_rendered = True
define the method write_items with 2 arguments: self and handler.,"def write_items ( self , handler ) :"
call the method self.model._default_manager.get_queryset with an argument qs.,qs = self . model . _default_manager . get_queryset ( )
"field.attname of the data dictionary. if not,",else :
"if ImportError exception is caught,",except ImportError :
call the method zfile.close.,zfile . close ( )
"call the method tpl.format with an arguments self.name, self.sysid and self.pubid.","return tpl . format ( self . name , self . sysid , self . pubid )"
"or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is. define the method _open with arguments self, name and mode defaulting to string 'rb'.","def _open ( self , name , mode = 'rb' ) :"
"if not,",else :
"'in favor of ""requires_system_checks"".' and RemovedInDjango19Warning. if has_old_option and has_new_option are both true,",if has_old_option and has_new_option :
set self.name attribute of the obj object to result.,"setattr ( obj , self . name , result )"
"if call to the self.is_valid method evaluates to false or self.can_order is false,",if not self . is_valid ( ) or not self . can_order :
from django.utils.module_loading import module_has_submodule into default name space.,from django . utils . module_loading import module_has_submodule
"try,",try :
"call the method validate with an argument value, from the base class of the FloatField class.","super ( FloatField , self ) . validate ( value )"
"call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.","_ExpatParser . __init__ ( self , * args , ** kwargs )"
"if changes is true,",if changes :
return expanded_template.,return expanded_template
"compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode. call the method block_context.add_blocks with an argument blocks.",block_context . add_blocks ( blocks )
"call the method data.getlist with an argument name, return the result.",return data . getlist ( name )
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:,"self . xml . addQuickElement ( ""object"" , attrs = { 'pk' : smart_text ( value . _get_pk_val ( ) ) } )"
"define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.","def inner_run ( self , * args , ** options ) :"
"if self.paginator.count equals a integer 0,",if self . paginator . count == 0 :
"substitute '%s' in string 'id_%s' with name, return it.",id_ = 'id_%s' % name
"divide negative dklen with hlen, substitute floored result for l.",l = - ( - dklen // hlen )
"if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.",self . connector = connector or self . default
"call the method translation.get_language, substitute th result for saved_locale.",saved_locale = translation . get_language ( )
call the function get_callable.cache_clear.,get_callable . cache_clear ( )
"define the method add_handlers with 3 arguments: self, logger and handlers.","def add_handlers ( self , logger , handlers ) :"
"for app_config in reversed list of apps.get_app_configs() elements,",for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
"if IndexError exception is caught,",except IndexError :
substitute negated for self.negated.,self . negated = negated
"or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields, #ANNOTATION only if field is an instance of models.BooleanField and field.has_default() evaluates to False. call the Warning function with 4 arguments: string ""BooleanField does not have a default value."",","return [ Warning ( ""BooleanField does not have a default value."" , hint = ( ""Django 1.6 changed the default value of BooleanField from False to None. "" ""See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "" ""for more information."" ) , obj = field , id = '1_6.W002' , ) for field in problem_fields ]"
delete value under the 'args' key of the cmd_options dictionary.,del cmd_options [ 'args' ]
"call the method self.attrs.copy, substitute the result for obj.attrs.",obj . attrs = self . attrs . copy ( )
"if not,",else :
multiply offset by integer -1.,offset = - offset
from datetime import timedelta and tzinfo into default name space.,"from datetime import timedelta , tzinfo"
"format string '<a href=""%s""%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,","words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )"
"called with value under the 'pubdate' key of the item dictionary. if value under the 'comments' key of the item dictionary is not None,",if item [ 'comments' ] is not None :
"if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,","if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :"
return self.,return self
"if not,",else :
derive the class Trans from the object base class.,class Trans ( object ) :
return string 'nd'.,return 'nd'
"assign the result to opts and new_class._meta. for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',","for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :"
"where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name, '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e. raise an exceptions",raise
"if length of self._cache is greater or equal to self._max_entries,",if len ( self . _cache ) >= self . _max_entries :
"open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,","with open ( options [ ""pidfile"" ] , ""w"" ) as fp :"
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
"if IOError, renamed to e, exception is caught,",except IOError as e :
"call the function normalize with an argument p_pattern, substitute the result for bits.",bits = normalize ( p_pattern )
"call the method translation._info.copy, substitute the result for self._info.",self . _info = translation . _info . copy ( )
"for every hextet in new_ip,",for hextet in new_ip :
"call the method value.decode with an argument charset, substitute the result for value.",value = value . decode ( charset )
"join the results into a string, return it. if hmac has an attribute ""compare_digest"",","if hasattr ( hmac , ""compare_digest"" ) :"
"if ImportError exception is caught,",except ImportError :
"append string ""Field renamed because it started with '_'."" to field_notes.","field_notes . append ( ""Field renamed because it started with '_'."" )"
substitute elements of self.template_string list from upto index to the end for last_lit.,last_bit = self . template_string [ upto : ]
substitute Iterator for create_bound_method.,create_bound_method = types . MethodType
default is a string 'DEFAULT'.,default = 'DEFAULT'
from django.conf import settings into default name space.,from django . conf import settings
"call the method sys.stderr.write with an argument string ""ERROR: %s\n"", where '%s' is replaced by e.","sys . stderr . write ( ""ERROR: %s\n"" % e )"
"call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,","self . set_cookie ( key , max_age = 0 , path = path , domain = domain , expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )"
"if TypeError or ValueError exceptions are caught,","except ( ValueError , TypeError ) :"
substitute user_function for wrapper.__wrapped__.,wrapper . __wrapped__ = user_function
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"call the OVERLAPPED function, substitute the result for overlapped.",overlapped = OVERLAPPED ( )
call the method self._load_post_and_files.,self . _load_post_and_files ( )
incomment is boolean False.,incomment = False
"sum year and off, substitute the result for year.",year = year + off
"from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,","from django . forms . widgets import ( TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION )"
"split tmp at '/' character, substitute the last element of the result for filename.",filename = tmp . split ( '/' ) [ - 1 ]
return f.,return f
"if not,",else :
substitute ValueError for error_class.,error_class = ValueError
"use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list, substitute the resulting list for dirs. return dirs.",return dirs
"while model_dependencies is true,",while model_dependencies :
return boolean False.,return False
append value under the 0 key of the opt_dict dictionary to code_list.,code_list . append ( opt_dict [ o ] )
"call the pyinotify.WatchManager method, assign the result to wm.",wm = pyinotify . WatchManager ( )
"call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.",stream_or_string = stream_or_string . decode ( 'utf-8' )
return self._regex.,return self . _regex
from django.utils import six into default name space.,from django . utils import six
"from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.","from django . core . management . base import ( BaseCommand , CommandError , CommandParser , handle_default_options )"
"call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,",values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
import module tempfile.,import tempfile
"call the method self._cache.get_multi with argument new_keys, substitute the result for ret.",ret = self . _cache . get_multi ( new_keys )
"if r ends with string '+00:00',",if r . endswith ( '+00:00' ) :
"for every key in keys,",for key in keys :
"if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,","function_name = ( name or getattr ( func , '_decorated_function' , func ) . __name__ )"
"call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.","old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )"
substitute callback.func for callback.,callback = callback . func
define the method __str__ with argument self.,def __str__ ( self ) :
self.connection is None.,self . connection = None
"method MONTHS.index, increment the result by integer 1, substitute it for month. call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.",day = int ( m . group ( 'day' ) )
"result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12, MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,","MONTHS_ALT = { 1 : pgettext_lazy ( 'alt. month' , 'January' ) , 2 : pgettext_lazy ( 'alt. month' , 'February' ) , 3 : pgettext_lazy ( 'alt. month' , 'March' ) , 4 : pgettext_lazy ( 'alt. month' , 'April' ) , 5 : pgettext_lazy ( 'alt. month' , 'May' ) , 6 : pgettext_lazy ( 'alt. month' , 'June' ) , 7 : pgettext_lazy ( 'alt. month' , 'July' ) , 8 : pgettext_lazy ( 'alt. month' , 'August' ) , 9 : pgettext_lazy ( 'alt. month' , 'September' ) , 10 : pgettext_lazy ( 'alt. month' , 'October' ) , 11 : pgettext_lazy ( 'alt. month' , 'November' ) , 12 : pgettext_lazy ( 'alt. month' , 'December' ) }"
substitute self.parent_instance.pk for orig.,orig = self . parent_instance . pk
"if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,",if self . L ( ) and self . data . month > 2 :
"call the method match.group with an argument integer 0, return the result.",return match . group ( 0 )
"define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.","def __init__ ( self , template , context = None , content_type = None , status = None ) :"
"for every form in self.initial_forms,",for form in self . initial_forms :
"and request_repr, respectively. reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,","reporter = ExceptionReporter ( request , is_email = True , * exc_info )"
value is an instance of a class Decimal created with value as an argument.,value = Decimal ( value )
"define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,","def check_model_signals ( app_configs = None , ** kwargs ) :"
output is an empty list.,output = [ ]
"for every node in self,",for node in self :
"call the function warnings.warn with 2 arguments: string ""Need {0} values to unpack in for loop; got {1}. This will raise an","warnings . warn ( ""Need {0} values to unpack in for loop; got {1}. "" ""This will raise an exception in Django 2.0."" . format ( num_loopvars , len_item ) , RemovedInDjango20Warning )"
default_list is an empty list.,default_list = [ ]
"remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.","sep = kwargs . pop ( ""sep"" , None )"
substitute t.lineno for comment_lineno_cache.,comment_lineno_cache = t . lineno
for every plan_node in return value of the graph.forwards_plan method called with node as argument.,for plan_node in graph . forwards_plan ( node ) :
"call the method parser.compile_filter with an argument value, append the result to args.",args . append ( parser . compile_filter ( value ) )
"call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,","lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )"
where '%s' is replaced with subject. substitute i for p.,p = i
upto is integer 0.,upto = 0
"call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.",name = self . split_leading_dir ( name ) [ 1 ]
call the method self.close.,self . close ( )
"call the function re.compile with 2 arguments: raw string ""([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)"",","accept_language_re = re . compile ( r''' ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*) # ""en"", ""en-au"", ""x-y-z"", ""es-419"", ""*"" (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))? # Optional ""q=1.00"", ""q=0.8"" (?:\s*,\s*|$) # Multiple accepts per header. ''' , re . VERBOSE )"
"if ValueError exception is caught,",except ValueError :
"split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.","path , module = name . rsplit ( '.' , 1 )"
"if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,","if _samefile ( old_file_name , new_file_name ) :"
decompress is boolean True.,decompress = True
clean_data is an empty list.,clean_data = [ ]
"if settings.TEMPLATE_STRING_IF_INVALID is true,",if settings . TEMPLATE_STRING_IF_INVALID :
define the method tokenize with an argument self.,def tokenize ( self ) :
is_compressed is boolean True.,is_compressed = True
import pyinotify module.,import pyinotify
"define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.","def handle ( self , * args , ** options ) :"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
substitute it for self.view_name. define the method __getitem__ with arguments self and index.,"def __getitem__ ( self , index ) :"
import module os.,import os
"if ValueError or TypeError exceptions are caught,","except ( ValueError , TypeError ) :"
return s.,return s
"call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.",return self . __cast ( ) % rhs
"call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,",with connections [ db ] . cursor ( ) as cursor :
"if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.",charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
"create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,","data = ( form . cleaned_data [ field ] , ) + date_data"
derive the class ChoiceFieldRenderer from the object base class.,class ChoiceFieldRenderer ( object ) :
"classmethod decorator,",@ classmethod
"tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,","tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , 0 , 0 )"
"define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.","def patch_response_headers ( response , cache_timeout = None ) :"
return dec.,return dec
"otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,",elif simple_url_2_re . match ( middle ) :
return an instance of VariableNode class with an argument filter_expression.,return VariableNode ( filter_expression )
"evaluate the method s.decode with string 'utf-8' and errors as the arguments,","return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )"
substitute self.current_token for t.,t = self . current_token
"convert app_template_dirs to a tuple, return it.",return tuple ( app_template_dirs )
"call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,","for i in range ( 0 , self . total_form_count ( ) ) :"
"define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.","def get_exception_response ( self , request , resolver , status_code ) :"
new_result is an empty list.,new_result = [ ]
"if termios is true,",if termios :
"if not,",else :
"substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.",connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
"for every i and handler in enumerated iterator self._upload_handlers,","for i , handler in enumerate ( self . _upload_handlers ) :"
"for every uclass, unique_check in all_unique_checks,","for uclass , unique_check in all_unique_checks :"
"if offset is not None,",if offset is not None :
"if not,",else :
decorator register with argument Tags.compatibility.,@ register ( Tags . compatibility )
"return a string ""<%s: %s>"" formated with self.__class__.__name__,","return ""<%s: %s>"" % ( self . __class__ . __name__ , super ( MultiValueDict , self ) . __repr__ ( ) )"
derive the class ResolverMatch with object as base class.,class ResolverMatch ( object ) :
substitute self.version for version.,version = self . version
"if chunk_size is false,",if not chunk_size :
substitute dt for self.__dt.,self . __dt = dt
"if not,",else :
from django.utils.safestring import mark_safe into default name space.,from django . utils . safestring import mark_safe
"if f doesnt has an 'save_form_data' attribute,","if not hasattr ( f , 'save_form_data' ) :"
or value equals return value of the call to Decimal with argument '-Inf' raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
"if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.",self . name = name or func . __name__
from django.core.management.utils import handle_extensions into default name space.,from django . core . management . utils import handle_extensions
"define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,","def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :"
append other_dict to self.dicts.,self . dicts . append ( other_dict )
"if not,",else :
substitute DEFAULT_PORT for self.port.,self . port = DEFAULT_PORT
"if name is not contained in data,",if name not in data :
"if data is true,",if data :
supports_microseconds is boolean False.,supports_microseconds = False
"call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.",return self . __cast ( ) == other
substitute first element of s for quote.,quote = s [ 0 ]
"_assertCountEqual is a strnig ""assertItemsEqual"".","_assertCountEqual = ""assertItemsEqual"""
"try,",try :
import module warnings.,import warnings
from django.utils.six.moves import cPickle as pickle into default name space.,from django . utils . six . moves import cPickle as pickle
return path.,return path
import module sys.,import sys
return self.,return self
for every cat in value under the 'categories' key of the self.feed dictionary.,for cat in self . feed [ 'categories' ] :
do nothing.,pass
"if not self.localized_fields is None. get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.","self . labels = getattr ( options , 'labels' , None )"
"if value is an instance of datetime.date,","if isinstance ( value , datetime . date ) :"
"call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.","call_command ( 'loaddata' , 'initial_data' , ** options )"
update flat dictionary with d.,flat . update ( d )
random is an instance of random.SystemRandom class.,random = random . SystemRandom ( )
from django.views import debug into default name space.,from django . views import debug
"call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.","max_entries = params . get ( 'max_entries' , options . get ( 'MAX_ENTRIES' , 300 ) )"
"return list with 2 elements: first_item and second_item, and old_style_list.","return [ first_item , second_item ] , old_style_list"
decorator function wraps with an argument fget.,@ wraps ( fget )
define the function template_localtime with 2 arguments: value and use_tz set to None.,"def template_localtime ( value , use_tz = None ) :"
from itertools import chain into default name space.,from itertools import chain
"add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the ""default"" database.'. call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',","parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'An app_label or app_label.ModelName to exclude ' '(use multiple --exclude to exclude multiple apps/models).' )"
from django.utils.xmlutils import SimplerXMLGenerator into default name space.,from django . utils . xmlutils import SimplerXMLGenerator
"if not,",else :
"call the method field.clean with an argument value, substitute the result for value.",value = field . clean ( value )
"try,",try :
from django.utils.timezone import utc and get_fixed_timezone into default name space.,"from django . utils . timezone import utc , get_fixed_timezone"
"from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.","from django . template . context import ( BaseContext , Context , RequestContext , ContextPopException )"
model is None.,model = None
"if not,",else :
"dest set to string 'load_initial_data', default set to True, help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments. call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',","parser . add_argument ( '--database' , action = 'store' , dest = 'database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. ' 'Defaults to the ""default"" database.' )"
"if not,",else :
substitute name for self.name.,self . name = name
"call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.",handler . setLevel ( _checkLevel ( level ) )
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.,from django . core . servers . basehttp import get_internal_wsgi_application
"call the function get_script_prefix, substitute the result for prefix.",prefix = get_script_prefix ( )
define the method find_potfiles with an arguments self and root.,"def find_files ( self , root ) :"
"if key is contained in dict_,",if key in dict_ :
write current_chunk to file fd.,"os . write ( fd , current_chunk )"
objects_in_fixture is integer 0.,objects_in_fixture = 0
__dispatch is None.,__dispatch = None
"substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False. call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.","super ( FileField , self ) . __init__ ( * args , ** kwargs )"
from django.utils.translation import ugettext_lazy as _ into default name space.,from django . utils . translation import ugettext_lazy as _
"call the function split_domain_port with an argument host, assign the result to domain and port, respectively.","domain , port = split_domain_port ( host )"
substitute field_name for old_field_name.,old_field_name = field_name
remove '__weakref__' key from the orig_vars dictionary.,"orig_vars . pop ( '__weakref__' , None )"
import module re.,import re
return callback and a empty string.,"return callback , ''"
close file_ file descriptor.,file_ . close ( )
"call the method test_runner.run_tests with an argument test_labels, substitute it for failures.",failures = test_runner . run_tests ( test_labels )
"if name converted to lower case equals to string 'subject',",if name . lower ( ) == 'subject' :
"bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.",DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
"if s is an instance of the subclass Exception,","if isinstance ( s , Exception ) :"
"for every resultclass in resultclasses,",for resultclass in resultclasses :
"call the method connection.cursor, with the result renamed to cursor, perform the following,",with connection . cursor ( ) as cursor :
"in_tag is boolean True if in_tag is False, otherwise is boolean False.",in_tag = not in_tag
"if tag is not contained in TemplateTagNode.mapping,",if tag not in TemplateTagNode . mapping :
substitute tup for elements of self.,self [ : ] = tup
return boolean True.,return True
do nothing.,pass
"raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s', replace '%s' with self.file_path.","raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )"
call the function exhaust with an argument self._input_data.,exhaust ( self . _input_data )
"if self.verbosity is greater or equal to integer 2,",if self . verbosity >= 2 :
import module base64.,import base64
"for every item in sequence,",for item in sequence :
substitute length of content for self.size.,self . size = len ( content )
"define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.","def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :"
return val.,return val
pop the element form the path as substitute the result for ns.,ns = path . pop ( )
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:,"_urllib_error_moved_attributes = [ MovedAttribute ( ""URLError"" , ""urllib2"" , ""urllib.error"" ) , MovedAttribute ( ""HTTPError"" , ""urllib2"" , ""urllib.error"" ) , MovedAttribute ( ""ContentTooShortError"" , ""urllib"" , ""urllib.error"" ) , ]"
"if self.allow_empty_file and file_size are both false,",if not self . allow_empty_file and not file_size :
"join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "" Synchronize unmigrated apps: "",","self . stdout . write ( self . style . MIGRATE_LABEL ( "" Synchronize unmigrated apps: "" ) + ( "", "" . join ( executor . loader . unmigrated_apps ) ) )"
import code.,import code
"raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',","raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )"
from django.core import checks into default name space.,from django . core import checks
"kwargs is an empty dictionary,",kwargs = { }
raise an exception.,raise
"call the function local, substitute the result for self._caches.",self . _caches = local ( )
"dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.'. call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',","parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' , default = [ ] , metavar = 'PATTERN' , help = 'Ignore files or directories matching this glob-style pattern. ' 'Use multiple times to ignore more.' )"
"from django.utils.translation import get_language, to_locale and check_for_language into default name space.","from django . utils . translation import get_language , to_locale , check_for_language"
"convert the result into a string and substitute it for value. if not,",else :
import module zlib.,import zlib
"call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,",app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
if nodelist is an instance of NodeList and node is not an instance of TextNode class.,"if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :"
"if not,",else :
return nothing.,return
define the method n with an argument self.,def n ( self ) :
"if call to the function response.has_header with string 'Vary' as an argument returns True,",if response . has_header ( 'Vary' ) :
"call the method self._resolve, substitute the result for result.",result = self . _resolve ( )
"call the method self.tag with 2 arguments name and func, return the result.","return self . tag ( name , func )"
"property decorator,",@ property
from django.conf import settings into default name space.,from django . conf import settings
substitute bp for lbp.,lbp = bp
substitute result for self dictionary under key key.,self [ key ] = result
"define the method unsign with arguments self, value and max_age set to None.","def unsign ( self , value , max_age = None ) :"
"test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.",test_runner = TestRunner ( ** options )
"match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.","match = tagfind . match ( rawdata , i + 1 )"
value is an empty list.,value = [ ]
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
BLOCK_TAG_END is a string '%}'.,BLOCK_TAG_END = '%}'
from pkg_resources import resource_string into default name space.,from pkg_resources import resource_string
"convert root.manager.loggerDict into a list, substitute it for existing.",existing = list ( root . manager . loggerDict )
derive the class MultiValueDictKeyError from the KeyError base class.,class MultiValueDictKeyError ( KeyError ) :
"join the list of statements into a string separated by new lines, return it.",return '\n' . join ( statements )
"try,",try :
"call the get_complete_version function with version as argument, store the result in version.",version = get_complete_version ( version )
call the method self.find_template_cache.clear.,self . find_template_cache . clear ( )
"call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the",url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
from django.utils.translation import templatize into default namespace.,from django . utils . translation import templatize
from django.conf import settings into default name space.,from django . conf import settings
if status is not None.,if status is not None :
"e is an instance of TemplateSyntaxError class, created with an argument msg.",e = TemplateSyntaxError ( msg )
substitute result for value under the self.asvar key of context dictionary.,context [ self . asvar ] = result
"if not,",else :
"substitute value under the 'prefix' key of dictionary d, substitute it for prefix.",prefix = d [ 'prefix' ]
"format string ' _(%s) ', with fmatch, write it to out.",out . write ( ' _(%s) ' % fmatch )
return _wrapper.,return _wrapper
define the function escape_filter with an argument value.,def escape_filter ( value ) :
modes is an empty list.,nodes = [ ]
"if value is an instance of six.string_types,","if isinstance ( value , six . string_types ) :"
self._populated is boolean False.,self . _populated = False
from django.utils.six.moves import xrange into default name space.,from django . utils . six . moves import xrange
"if not,",else :
return id_.,return id_
"if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,","if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or isinstance ( value , EscapeData ) ) :"
"for every name in loggers,",for name in loggers :
tried is an empty list.,tried = [ ]
derive the class Tags with base class object.,class Tags ( object ) :
create directories from the elements in filename.,os . makedirs ( dirname )
"get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.","loggers = config . get ( 'loggers' , EMPTY_DICT )"
disable_existing is boolean True. call the method logging._handler.clear.,logging . _handlers . clear ( )
"try,",try :
"concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,",for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
"substitute the length of the resulting list for number_equal. if number_equal is greater than integer 40,",if number_equal > 40 :
"try,",try :
"call the function t.render with an argument context_instance, return the result.",return t . render ( context_instance )
return self.DSTOFFSET.,return self . DSTOFFSET
"try,",try :
define the method getvalue with an argument self.,def getvalue ( self ) :
"called with an argument option_value, append the result to output. for every option in option_label,",for option in option_label :
"append '/' to tmp, substitute it for display_url.",display_url = tmp + '/'
"fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,","fields = ( DateField ( input_formats = input_date_formats , error_messages = { 'invalid' : errors [ 'invalid_date' ] } , localize = localize ) , TimeField ( input_formats = input_time_formats , error_messages = { 'invalid' : errors [ 'invalid_time' ] } , localize = localize ) , )"
define the method get_default_prefix with an argument cls.,def get_default_prefix ( cls ) :
return s.,return s
call the method self.full_clean.,self . full_clean ( )
"and truncate, return the result. return elements of words joined in a string, separated with whitespaces.",return ' ' . join ( words )
"if expires is false,",if not expires :
"perform bitwise OR with 2 operands: previous result and result, substitute the result for result. if result is equal to integer 0, return boolean True, otherwise return boolean False.",return result == 0
"call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.","value = super ( DictWrapper , self ) . __getitem__ ( key )"
"if exit_code is lesser than integer 0,",if exit_code < 0 :
ch is None.,ch = None
substitute e and tb for v.__cause__ and v.__traceback__.,"v . __cause__ , v . __traceback__ = e , tb"
"call the function json.loads with an argument stream_or_string, substitute the result for objects.",objects = json . loads ( stream_or_string )
"call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.","scheme , netloc , path , query , fragment = urlsplit ( url )"
"if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.",view_path = url_name or self . _func_path
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.,class SimpleUploadedFile ( InMemoryUploadedFile ) :
increment i by integer 1.,i += 1
derive the class HttpResponseNotFound from the HttpResponse base class.,class HttpResponseNotFound ( HttpResponse ) :
return value.,return value
define the method __deepcopy__ with arguments self and memo.,"def __deepcopy__ ( self , memo ) :"
"otherwise if o is an instance of datetime.time object,","elif isinstance ( o , datetime . time ) :"
"from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.","from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll , byref )"
"if not,",else :
"call the method form.save with an argument commit as commit, return the result.",return form . save ( commit = commit )
"if not,",else :
"return an empty string,",return ''
"define the method error with 3 arguments: self, token and msg.","def error ( self , token , msg ) :"
"if not,",else :
substitute _html_parser.interesting_normal for self.interesting.,self . interesting = _html_parser . interesting_normal
"if GeneratorExit exception is caught,",except GeneratorExit :
"get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.","return self . attrs . get ( 'id' , '' )"
self.find_template_cache is an empty dictionary.,self . find_template_cache = { }
import module inspect.,import inspect
where '%s' is replaced with node.nodeName and attr. define the function getInnerText with an argument node.,def getInnerText ( node ) :
"if fset is not None,",if fset is not None :
"get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.",self . show_traceback = options . get ( 'traceback' )
"write string "" all instances of the codebase have applied the migrations you squashed,"" to self.stdout.","self . stdout . write ( "" all instances of the codebase have applied the migrations you squashed,"" )"
"call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.","new_obj = func ( obj , * arg_vals )"
call the method self.close.,self . close ( )
"if not,",else :
"call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.","TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )"
"if self.method is not equal to string 'POST',",if self . method != 'POST' :
"if ImportError exception is caught,",except ImportError :
from django.contrib.auth import get_user_model into default name space.,from django . contrib . auth import get_user_model
"if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.",return list ( self ) != other
call the method handler.endElement with an argument string 'item'.,"handler . endElement ( ""item"" )"
return None.,return None
return an empty dictionary.,return { }
define method add_arguments with class instance self and parser as the input arguments.,"def add_arguments ( self , parser ) :"
"call the method token.split_contents, convert the result into a list and substitute it for bits.",bits = list ( token . split_contents ( ) )
"call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,",url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
msg_count is integer 0.,msg_count = 0
define the method _resolve with an argument self.,def _resolve ( self ) :
"format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result. define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,","def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :"
"append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,","args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]"
define the method close with an argument self.,def close ( self ) :
"use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result, join template_name and previous final result into a string, separated with '-', return it. if not,",else :
"for every key in return value of the method c.keys call,",for key in c . keys ( ) :
"subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.",loop_dict [ 'revcounter0' ] = len_values - i - 1
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
from django.utils import translation into default namespace.,from django . utils import translation
derive the class Loader from the BaseLoader base class.,class Loader ( BaseLoader ) :
substitute opname for opfunc.__name__.,opfunc . __name__ = opname
"and result of the function humanize called with an argument fixture_dir. if length of fixture_files_in_dir is greater than 1,",if len ( fixture_files_in_dir ) > 1 :
"evaluate the method self._cache.incr with key and negative delta as arguments, return the result.","return self . _cache . incr ( key , - delta )"
"call the method six.iteritems with an argument dict_, for every k and v in the result,","for k , v in six . iteritems ( dict_ ) :"
"return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',","return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )"
substitute msg for self.msg.,self . msg = msg
"decorator python_2_unicode_compatible,",@ python_2_unicode_compatible
define the method tell with an argument self.,def tell ( self ) :
call the method settings.configure.,settings . configure ( )
substitute message.error_list for message.,message = message . error_list
define the method parse_name with arguments self and fixture_name.,"def parse_name ( self , fixture_name ) :"
vary_headers is an empty list.,vary_headers = [ ]
index_output is an empty list.,index_output = [ ]
"append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,",number_equal = len ( [ current_number for current_number in self . _unget_history if current_number == num_bytes ] )
derive the class Paginator from the object base class.,class Paginator ( object ) :
call the method self.xml.endElement with an argument string 'field'.,"self . xml . endElement ( ""field"" )"
return result.,return result
raise an DisallowedHost exception with an argument msg.,raise DisallowedHost ( msg )
define the function is_safe_url with 2 arguments url and host set to None.,"def is_safe_url ( url , host = None ) :"
"if key_function is callable object,",if callable ( key_func ) :
"otherwise if length of fks_to_parent is zero,",elif len ( fks_to_parent ) == 0 :
"help is a string ""Prints the DROP TABLE SQL statements for the given app name(s)."".","help = ""Prints the DROP TABLE SQL statements for the given app name(s)."""
"of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression. define the function is_writable with path as argument,",def is_writable ( path ) :
"if length of bits is not equal to integer 2,",if len ( bits ) != 2 :
"call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,",tag = re_tag . match ( m . group ( 0 ) )
"call the method self._read_limited, store the return value into chunk.",chunk = self . _read_limited ( )
"call the method self.extract with an argument absolute_path, return the result.",return self . extract ( absolute_path )
do nothing.,pass
define the method S with an argument self.,def S ( self ) :
"replace '%s' with self.file_path and err, respectively. if self.file_path file is not writable,","if not os . access ( self . file_path , os . W_OK ) :"
"if not,",else :
"if f.rel and f.rel.to are not contained in to_delete,",if f . rel and f . rel . to not in to_delete :
"and unpacked dictionary kwargs. define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :"
substitute context for current.,current = context
"call the self._list_cache_files method, substitute the result for filelist.",filelist = self . _list_cache_files ( )
return final_output.,return final_output
"try,",try :
define the method get_nodes_by_type with 2 arguments: self and nodetype.,"def get_nodes_by_type ( self , nodetype ) :"
"if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.",attrs = flatatt ( attrs ) if attrs else ''
"if id_ is true,",if id_ :
"from django.utils.translation import ugettext_lazy, ugettext as _ and pgettext into default name space.","from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext"
"'<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>', help_text_html set to a string, <span class=""helptext"">%s</span>' and errors_on_separate_row set to boolean True. define the method non_field_errors with an argument self.",def non_field_errors ( self ) :
"if self has an 'error_dict' attribute,","if hasattr ( self , 'error_dict' ) :"
"get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.","root = config . get ( 'root' , None )"
"""No file was submitted. Check the encoding type on the form."" for 'invalid', return value of the function _ called with an argument, string ""No file was submitted."" for 'missing', return value of the function _ called with an argument ""The submitted file is empty."", for 'empty', return value of the function ungettext_lazy called with 3 arguments: string 'Ensure this filename has at most %(max)d character (it has %(length)d).', string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length', and return value of the function _ called with an argument string, 'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'. define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , * args , ** kwargs ) :"
value under the index key of the hextets dictionary is a string '0'.,hextets [ index ] = '0'
"raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',","raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )"
return boolean True.,return True
self.waiting_readers is an integer 0.,self . waiting_readers = 0
"join self.dirpath, thefile into a file path, substitute it for work_file.","work_file = os . path . join ( self . dirpath , thefile )"
"define the method value_from_datadict with 2 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) :"
"call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.","attrs = super ( FloatField , self ) . widget_attrs ( widget )"
"and unpacked dictionary kwargs, return the result. define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def assertRaisesRegex ( self , * args , ** kwargs ) :"
"sum trail and closing, substitute the result for lead.",trail = closing + trail
substitute message for self.message.,self . message = message
"convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.",cword = int ( os . environ [ 'COMP_CWORD' ] )
"call the method self.incr_version with key, negative delta and version as arguments.","return self . incr_version ( key , - delta , version )"
"get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,","csrf_token = context . get ( 'csrf_token' , None )"
"rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.","rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]"
raise an exception.,raise
define the method end_serialization with an argument self.,def end_serialization ( self ) :
"sum punctuation and trail, substitute the result for trail.",trail = punctuation + trail
from xml.dom import pulldom into default name space.,from xml . dom import pulldom
substitute complain for __setitem__.,__setitem__ = complain
substitute key for op.id.,op . id = key
"raise a exception of ComandError class with string ""More than one migration matches '%s' in app '%s'. Please be more specific."",","raise CommandError ( ""More than one migration matches '%s' in app '%s'. Please be more specific."" % ( migration_name , app_label ) )"
"if init_path is not a file,",if not os . path . isfile ( init_path ) :
name is a property object with _get_name as a getter method and _set_name as a setter method.,"name = property ( _get_name , _set_name )"
define the method tzname with 2 arguments self and dt.,"def tzname ( self , dt ) :"
"multiply 10 to the power of 200, with itself, substitute the result for pos_inf.",pos_inf = 1e200 * 1e200
substitute first decimal_pos elements of dec_part for dec_part.,dec_part = dec_part [ : decimal_pos ]
"replace every occurrence of old for new in msgs, substitute the result for msgs.","msgs = msgs . replace ( old , new )"
"call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.","fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )"
"call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.","self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]"
define the method N with an argument self.,def N ( self ) :
do nothing.,pass
from django.utils.functional import cached_property into default name space.,from django . utils . functional import cached_property
define the method __next__ with an argument self.,def __next__ ( self ) :
define the method close with argument self.,def close ( self ) :
"call the method formats.localize_input with an argument value, return the result.",return formats . localize_input ( value )
"call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.","ugettext_lazy = lazy ( ugettext , six . text_type )"
return self._wrapped.__dict__.,return self . _wrapped . __dict__
"if size is None or size is greater than self.remaining,",if size is None or size > self . remaining :
"define the private method __str__, with self instance of this class as the only argument.",def __str__ ( self ) :
"call the method warnings.warn with 2 arguments: string ""FastCGI support has been deprecated and will be removed in Django 1.9."",","warnings . warn ( ""FastCGI support has been deprecated and will be removed in Django 1.9."" , RemovedInDjango19Warning )"
raise an EmptyPage exception with string 'That page number is less than 1' as an argument.,raise EmptyPage ( 'That page number is less than 1' )
do nothing.,pass
"called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?', append the result th the self.path converted into a string and return it, if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string. def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,","def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :"
"call the method __init__ from the base class of the class Truncator,","super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )"
"and for every _, nodelist in self.conditions_nodelists. define the method render with 2 arguments: self and context.","def render ( self , context ) :"
substitute app_namefor command.,command = app_name
"call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,","return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )"
"if key is not contained in self,",if key not in self :
"define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,","def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :"
substitute timezone for _active.value.,_active . value = timezone
return an empty list.,return [ ]
return result.,return result
"dir set to None as the arguments. call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.","fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )"
derive the class NumberInput from the TextInput base class.,class NumberInput ( TextInput ) :
from django.conf import settings into default name space.,from django . conf import settings
raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.,raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
"return path,",return path
"call the function mark_safe with an argument data, return the result.",return mark_safe ( data )
"try,",try :
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.","res = func ( * self . __args , ** self . __kw )"
define the method __hash__ with an argument self.,def __hash__ ( self ) :
"if ImportError exception is caught,",except ImportError :
from django.conf import settings into default namespace.,from django . conf import settings
RemovedInDjango19Warning and integer 2. substitute dicts for self.dicts.,self . dicts = dicts
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS"
"replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.",self . stdout . write ( 'ignoring directory %s\n' % dirname )
"append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.","fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )"
"try,",try :
"define the method compile_function_error with 3 arguments: self, token and e.","def compile_function_error ( self , token , e ) :"
"if relative_dir is true,",if relative_dir :
call the settings.INSTALLED_APPS.,settings . INSTALLED_APPS
"call the function BytesIO, substitute the result for self.file.",self . file = BytesIO ( )
"if ImportError exception is caught,",except ImportError :
return filter_func.,return filter_func
"concatenate string 'templates/' and template_name, substitute the result for pkg_name.",pkg_name = 'templates/' + template_name
"7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'. MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,","MONTHS_AP = { 1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) , 2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) , 3 : pgettext_lazy ( 'abbrev. month' , 'March' ) , 4 : pgettext_lazy ( 'abbrev. month' , 'April' ) , 5 : pgettext_lazy ( 'abbrev. month' , 'May' ) , 6 : pgettext_lazy ( 'abbrev. month' , 'June' ) , 7 : pgettext_lazy ( 'abbrev. month' , 'July' ) , 8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) , 9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) , 10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) , 11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) , 12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' ) }"
do nothing.,pass
valid is boolean True.,valid = True
define the function timeuntil_filter with 2 arguments value and arg set to None.,"def timeuntil_filter ( value , arg = None ) :"
"try,",try :
"define method has_key with self class instance, key and version set to None as arguments.","def has_key ( self , key , version = None ) :"
"call the method self.configure_filter with an argument value under name key of formatters dictionary,",formatters [ name ] = self . configure_formatter ( formatters [ name ] )
"call the method self.widget.decompress with an argument initial, substitute the result for initial.",initial = self . widget . decompress ( initial )
"call the method self.common_logger_config with 3 arguments: root, config and incremental.","self . common_logger_config ( root , config , incremental )"
substitute name for self.name.,self . name = name
"sum sign and hhmm, substitute the result for name.",name = sign + hhmm
reuturn cache.,return cache
"instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:","base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )"
"if Exception exception is caught,",except Exception :
import module os.,import os
substitute package.__name__ for package_name.,package_name = package . __name__
"replace every occurrence of '\n' in p for '<br />',","paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]"
"return a string ""%s%02d%02d"" formated with sign, floored result of the division of seconds by integer 3000,","return ""%s%02d%02d"" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )"
"if character '@' is contained in addr,",if '@' in addr :
substitute kwargs for self.kwargs.,self . kwargs = kwargs
return all the integers from the integer 1 to the self.num_pages.,"return range ( 1 , self . num_pages + 1 )"
"call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.",translation = self . _new_gnu_trans ( localedir )
"if not,",else :
"substitute the result for new_obj. if not,",else :
"wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string "" FAKED"" as a argument.","self . stdout . write ( self . style . MIGRATE_SUCCESS ( "" FAKED"" ) )"
call the options.update method with an argument kwargs.,options . update ( kwargs )
"if not,",else :
from django.conf import settings into default name space.,from django . conf import settings
self._handler_class is None.,self . _handler_class = None
"EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.","EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )"
"try,",try :
"if match is true,",if match :
"if not,",else :
extend self.children list with data.children.,self . children . extend ( data . children )
"substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name. define the function compile_func with 2 arguments: parser and token.","def compile_func ( parser , token ) :"
return boolean True.,return True
import io.,import io
do nothing.,pass
"get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.","definition = getattr ( cls , 'Media' , None )"
"if serializers.SerializerDoesNotExist exception is caught,",except serializers . SerializerDoesNotExist :
"call the method self.configurator.convert with an argument value, substitute the result for result.",result = self . configurator . convert ( value )
append line to lines.,lines . append ( line )
define the method l with an argument self.,def l ( self ) :
derive the class BaseArchive from the object base class.,class BaseArchive ( object ) :
substitute cache_choices for self.cache_choices.,self . cache_choices = cache_choices
"call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,",context_match = context_re . match ( bmatch . group ( 1 ) )
"string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message. code is a string 'max_length'",code = 'max_length'
"call the method token.split_contents, substitute the result for bits.",bits = token . contents . split ( )
compare_to is None.,compare_to = None
call the self.xml.endDocument method.,self . xml . endDocument ( )
"size, charset, content_type_extra. substitute field_name for self.field_name.",self . field_name = field_name
"for every o in opts. for every val in value,",for val in value :
derive the class Textarea from the Widget base class.,class Textarea ( Widget ) :
define the method _get_num_pages with an argument self.,def _get_num_pages ( self ) :
"if not,",else :
substitute col_name for value under the 'db_column' key of the field_params dictionary.,field_params [ 'db_column' ] = col_name
"try,",try :
"get the value under the root key of the convert dictionary, for every opname and opfunc in the result,","for opname , opfunc in convert [ root ] :"
use global variables _format_cache and _format_modules_cache.,"global _format_cache , _format_modules_cache"
call the function import_module with 2 arguments: string .management and app_config.name.,"import_module ( '.management' , app_config . name )"
"and result of the function force_str called with an argument safe, use the result as an argument for the call to the function force_text, return the result. call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.","urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )"
"if not,",else :
"if self.is_bound is true and i is smaller than self.initial_form_count,",if self . is_bound and i < self . initial_form_count ( ) :
derive the class IncludeNode from the Node base class.,class IncludeNode ( Node ) :
"call the method self.valid_value with an argument val, if it evaluates to false,",if not self . valid_value ( val ) :
substitute token.source for e.django_template_source.,e . django_template_source = token . source
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
"call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.","nodelist_false = parser . parse ( ( 'endifchanged' , ) )"
_trans is an instance of Trans class.,_trans = Trans ( )
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,"@ register . filter ( is_safe = True , needs_autoescape = True )"
"call the method literal_match.group with an integer 1, substitute the result for ip_address.",ip_address = literal_match . group ( 1 )
"if ValueError exception is caught,",except ValueError :
"call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.","parentmod , submod = get_mod_func ( mod_name )"
"if TypeError or ValueError exceptions are caught,","except ( ValueError , TypeError ) :"
define the method utcoffset with 2 arguments self and dt.,"def utcoffset ( self , dt ) :"
"define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.","def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :"
"split ip_str by ':', substitute the result for hextets.","hextets = ip_str . split ( "":"" )"
substitute origin for self.origin.,self . origin = origin
derive the class TemplateCommand from the BaseCommand base class.,class TemplateCommand ( BaseCommand ) :
"multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.",neg_inf = - 1e200 * 1e200
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
substitute first element of base64d for base64d.,base64d = base64d [ 1 : ]
"if e.errno equals to errno.EEXIST,",if e . errno == errno . EEXIST :
"if self.is_bound is true,",if self . is_bound :
define the function removetags with 2 arguments value and arg.,"def removetags ( value , tags ) :"
COMMENT_TAG_END is a string '#}'.,COMMENT_TAG_END = '#}'
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.,"super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )"
call the method os.setsid.,os . setsid ( )
"substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary. call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,","substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )"
substitute name for self.name.,self . name = name
call the method self.merge with an argument translation.,self . merge ( translation )
"call the method s.decode with an argument string 'utf-8', substitute the result for s.",s = s . decode ( 'utf-8' )
call the method __init__ with an argument name form the base class of the class _LazyModule.,"super ( _LazyModule , self ) . __init__ ( name )"
return dec.,return dec
"append string ""Field renamed because it ended with '_'."" to field_notes.","field_notes . append ( ""Field renamed because it ended with '_'."" )"
"if not,",else :
define the method __ne__ with 2 arguments: self and other.,"def __ne__ ( self , other ) :"
return self._post and self._files.,"return self . _post , self . _files"
"call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.",db = router . db_for_read ( self . cache_model_class )
"append the results into a list, substitute it for value. node is an instance of CycleNode class, created wiht an argument values.",node = CycleNode ( values )
"if IOError exception is caught,",except IOError :
"if not,",else :
"call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.","contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )"
"call the function format_html with 4 arguments: string '<option value=""{0}""{1}>{2}</option>', option_value, selected_html,","return format_html ( '<option value=""{0}""{1}>{2}</option>' , option_value , selected_html , force_text ( option_label ) )"
"status code set to integer 400, return the result. call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.","response = self . get_exception_response ( request , resolver , 400 )"
"'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize', 'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy', 'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'. LANGUAGE_SESSION_KEY is an string '_language'.",LANGUAGE_SESSION_KEY = '_language'
"if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.",return self . number < self . paginator . num_pages
"call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.","new_operations = optimizer . optimize ( operations , migration . app_label )"
set field cdata_tag for this class instance to None.,self . cdata_tag = None
substitute cache_clear for wrapper.cache_clear.,wrapper . cache_clear = cache_clear
define the function get_callable with arguments lookup_view and can_fail set to boolean False.,"def get_callable ( lookup_view , can_fail = False ) :"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
make a directory top_dir.,os . makedirs ( top_dir )
derive the class JsonResponse from the HttpResponse base class.,class JsonResponse ( HttpResponse ) :
substitute logging.root for root.,root = logging . root
from django.core.serializers.json import DjangoJSONEncode into default name space.,from django . core . serializers . json import DjangoJSONEncoder
"decorator stringfilter,",@ stringfilter
"if not,",else :
"for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k, substitute the resulting dictionary for kw. call the method datetime.date with an argument unpacked dictionary kw, return the result.",return datetime . date ( ** kw )
"property decorator,",@ property
"raise an CommandError with an argument string ""Problem installing fixture '%s': %s is not a known serialization format."",","raise CommandError ( ""Problem installing fixture '%s': %s is not a known "" ""serialization format."" % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )"
define the method T with an argument self.,def T ( self ) :
return result.,return result
"if i incremented by 1 is lesser than length of chunks,",if i + 1 < len ( chunks ) :
"for every migration in merge_migrations,",for migration in merge_migrations :
"result of the call to the function _ with an argument string 'feb' for 2, result of the call to the function _ with an argument string 'mar' for 3, result of the call to the function _ with an argument string 'apr' for 4, result of the call to the function _ with an argument string 'may' for 5, result of the call to the function _ with an argument string 'jun' for 6, result of the call to the function _ with an argument string 'jul' for 7, result of the call to the function _ with an argument string 'aug' for 8, result of the call to the function _ with an argument string 'sep' for 9, result of the call to the function _ with an argument string 'oct' for 10, result of the call to the function _ with an argument string 'nov' for 11, result of the call to the function _ with an argument string 'dec' for 12. MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',","MONTHS_3_REV = { 'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 , 'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12 }"
do nothing.,pass
"replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,","return mark_safe ( value . replace ( '\n' , '<br />' ) )"
return msg.,return msg
define the method __enter__ with an argument self.,def __enter__ ( self ) :
"define the method find_template with 3 arguments: self, name, dirs set to None.","def find_template ( self , name , dirs = None ) :"
from django.utils._os import npath and upath into default name space.,"from django . utils . _os import npath , upath"
define the function ugettext with an argument message.,def ugettext ( message ) :
"if not,",else :
"if not,",else :
"if KeyError exception is caught,",except KeyError :
"if value under the header key of the self.META dictionary is equal to value,","if self . META . get ( header , None ) == value :"
import module datetime.,import datetime
and self.model._meta.pk.name. substitute the value under the pk_key key of the self.data dictionary for pk.,pk = self . data [ pk_key ]
define the method tzname with 2 arguments self and dt.,"def tzname ( self , dt ) :"
"if self._callback is not None,",if self . _callback is not None :
"self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,","self . compression_formats = { None : ( open , 'rb' ) , 'gz' : ( gzip . GzipFile , 'rb' ) , 'zip' : ( SingleZipReader , 'r' ) , }"
return boolean False.,return False
substitute elements of self.validators list for result.validators.,result . validators = self . validators [ : ]
"substitute the result for qs. pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,","pks = set ( force_text ( getattr ( o , key ) ) for o in qs )"
"try,",try :
"if default is true and RAISE_ERROR is false,",if default is not RAISE_ERROR :
from django.utils.six.moves import xrange into default name space.,from django . utils . six . moves import xrange
"assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]"
"if LookupError exception is caught,",except LookupError :
"call the function warnings.warn with 2 arguments: string ""NoArgsCommand class is deprecated and will be removed in Django 2.0. ""","warnings . warn ( ""NoArgsCommand class is deprecated and will be removed in Django 2.0. "" ""Use BaseCommand instead, which takes no arguments by default."" , RemovedInDjango20Warning )"
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"if except UnicodeDecodeError exception is caught,",except UnicodeDecodeError :
define the function smart_urlquote with an argument url.,def smart_urlquote ( url ) :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.","args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]"
substitute urlconf_name for self.urlconf_name.,self . urlconf_name = urlconf_name
"otherwise if name is not None and filter_func is not None,",elif name is not None and filter_func is not None :
derive the class CheckboxChoiceInput from the ChoiceInput base class.,class CheckboxChoiceInput ( ChoiceInput ) :
"zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,","zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )"
"initial_set is set created out of return values of the function force_text called with an argument value,",initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
"call the function table_name_filter with an argument table_name, if it evaluates to true,",if not table_name_filter ( table_name ) :
return week_number.,return week_number
substitute index for end.,end = index
"call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,",obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
"if self.obj is None,",if self . obj is None :
from django.utils import six into default name space.,from django . utils import six
substitute base_url for self.base_url.,self . base_url = base_url
"as the arguments, substitute the result for response. if Exception, renamed to e, exception is caught,",except Exception as e :
"substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively. call the method cursor.execute with string ""SELECT COUNT(*) FROM %s"" as argument, substitute the '%s' with table.","cursor . execute ( ""SELECT COUNT(*) FROM %s"" % table )"
"if ch equals string '+',",if ch == '+' :
"call the method warnings.warn with string '""validate"" has been deprecated in favor of ""check"".' and RemovedInDjango19Warning as arguments.","warnings . warn ( '""validate"" has been deprecated in favor of ""check"".' , RemovedInDjango19Warning )"
var_obj is None.,var_obj = None
"if self.output_transaction is true,",if self . output_transaction :
"if not,",else :
"call the function do_translate with 2 arguments: message and string 'ugettext', return the result.","return do_translate ( message , 'ugettext' )"
"s is an instance of the Select class, created with choices set to choices.",s = Select ( choices = choices )
call the method httpd.set_app with an argument wsgi_handler.,httpd . set_app ( wsgi_handler )
"read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,","return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )"
"define the function rmtree_errorhandler with 3 arguments func, path and exc_info.","def rmtree_errorhandler ( func , path , exc_info ) :"
"for every template_dir in template_dirs,",for template_dir in template_dirs :
"call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,",if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :
"try,",try :
substitute settings.DEFAULT_CHARSET for self._charset.,self . _charset = settings . DEFAULT_CHARSET
call the function os.kill with os.getpid() and negative exit_code as arguments.,"os . kill ( os . getpid ( ) , - exit_code )"
"raise CommandError exception with string ""This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified."", as argument.","raise CommandError ( ""This script should be run from the Django Git "" ""checkout or your project or app tree, or with "" ""the settings module specified."" )"
"call the method clean with an argument data from the base class of the class URLField, return the result.","return super ( URLField , self ) . clean ( value )"
"define the method token_kwargs: bits, parser and support_legacy set to boolean False.","def token_kwargs ( bits , parser , support_legacy = False ) :"
"if UnicodeEncodeError exception is caught,",except UnicodeEncodeError :
"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false. append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,",errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ',message = _ ( '%(datetime)s couldn\'t be interpreted ' 'in time zone %(current_timezone)s; it ' 'may be ambiguous or it may not exist.' )
elt is an list with an element elt.,elt = [ elt ]
substitute paginator for self.paginator.,self . paginator = paginator
"call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.",val2 = parser . compile_filter ( bits [ 2 ] )
from yaml import CSafeLoader as SafeLoader into default name space.,from yaml import CSafeLoader as SafeLoader
from importlib import import_module into default name space.,from importlib import import_module
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.,kwargs [ 'help_text' ] = help_texts [ f . name ]
return an empty string.,return ''
"if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes. if changes is false and self.verbosity is greater than, or equal to iteger 1,",if not changes and self . verbosity >= 1 :
"joined into a string, separated by whitespaces, substitute the result for loopvars. for every var in loopvars,",for var in loopvars :
call the method self.add_root_elements with an argument handler.,self . add_root_elements ( handler )
"_meth_func is a string ""__func__"".","_meth_func = ""__func__"""
and unpacked dictionary kwargs. delete the value under the 'content-type' key of the self dictionary.,del self [ 'content-type' ]
"if not,",else :
"call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".'.","parser . add_option ( '--pythonpath' , help = 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".' ) ,"
translation._info is an empty dictionary.,translation . _info = { }
"every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '""' with '&quot;', and every occurrence of ""'"" with '&#39;', call the function mark_safe with the previous result as an argument, return the result. call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.","escape = allow_lazy ( escape , six . text_type )"
return self.data.day.,return self . data . day
if pickled is not None.,if pickled is not None :
"take all but the length of path_info last elements of script_url, substitute it for script_name.",script_name = script_url [ : - len ( path_info ) ]
"call the color_style function, substitute the result for style.",style = color_style ( )
"raise an ValidationError exception with an argument errors,",raise ValidationError ( errors )
"subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,",dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
output_transaction is boolean False.,output_transaction = False
return self._size.,return self . _size
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.,class UnrecognizedArchiveFormat ( ArchiveException ) :
"call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.","name , val = forbid_multi_line_headers ( name , val , 'ascii' )"
"call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.",now = now . replace ( microsecond = 0 )
"call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',","paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]"
define the function timesince_filter with 2 arguments value and arg set to None.,"def timesince_filter ( value , arg = None ) :"
"default set to boolean False and help set to a string ""Enable fixing of migration conflicts."". call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',","parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False , help = ""Create an empty migration."" )"
"if ttl is not None,",if ttl is not None :
"call the method self.fk.rel.to, substitute the result for self.instance.",self . instance = self . fk . rel . to ( )
"DEFAULT_DB_ALIAS for self.db. remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,","self . ignore = options . pop ( 'ignorenonexistent' , False )"
define the method id_for_label with 2 arguments: self and id_.,"def id_for_label ( self , id_ ) :"
substitute self.config for config.,config = self . config
"tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'. if has_bz2 is true,",if has_bz2 :
"if model is contained in excluded_models,",if model in excluded_models :
"if exception of class Exception, as e, is caught,",except Exception as e :
"define the function handle_m2m with an argument value,",def handle_m2m ( value ) :
substitute last element of output for last_row.,last_row = output [ - 1 ]
"compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.","compare = lambda self , a , b : a < b"
"call the method template_file.read, substitute it for content.",content = template_file . read ( )
derive the class RequestContext from the Context base class.,class RequestContext ( Context ) :
call the method handler.endElement with an argument string 'rss'.,"handler . endElement ( ""rss"" )"
"if self.number is greater than integer 1, return boolean True, otherwise return boolean False.",return self . number > 1
return out.,return out
"if squash is false,",if not squash :
"if not,",else :
"define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.",isatty = property ( lambda self : self . file . isatty )
"convert git_changeset to string, append it to the string '.dev', replace it for sub.",sub = '.dev%s' % git_changeset
"if s equals a string '""',","if s == '""' :"
"dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3, call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'","parser . add_argument ( '--settings' , help = 'The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )"
"raise an TemplateSyntaxError exception with an argument string ""'autoescape' argument should be 'on' or 'off'"".","raise TemplateSyntaxError ( ""'autoescape' argument should be 'on' or 'off'"" )"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
"call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.","parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )"
skip this loop iteration.,continue
is_templatized is boolean True.,is_templatized = True
"if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.",cls . _delegate_bytes = bytes in resultclasses
"if self equals to other return boolean False, otherwise return boolean True.",return not ( self == other )
sql_files is an empty list.,sql_files = [ ]
derive the class Page from the collections.Sequence base class.,class Page ( collections . Sequence ) :
"call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.",message = _ ( 'Enter a valid email address.' )
from django.utils.html import avoid_wrapping into default name space.,from django . utils . html import avoid_wrapping
"call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.",self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
"call the method strftime with an argument fmt, from the base class of the type of dt class.","return super ( type ( dt ) , dt ) . strftime ( fmt )"
define the method __add__ with arguments self and other.,"def __add__ ( self , other ) :"
"call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,",return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
"call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.",return six . text_type ( self ) % rhs
call the method self.add_error with 2 arguments None and e.,"self . add_error ( None , e )"
define the method __init__ with an argument self.,def __init__ ( self ) :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
call the method self.handle_fk_field with arguments obj and field.,"self . handle_fk_field ( obj , field )"
"for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'. if not,",else :
"call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .","g = one_percent_re . sub ( '%%' , g )"
substitute gettext for ugettext.,ugettext = gettext
"return string ""<%s: %s>"", formated with self.__class__.__name__ and self.","return ""<%s: %s>"" % ( self . __class__ . __name__ , self )"
"weekday, increment the result by integer 1 and substitute it for jan1_weekday. call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.",weekday = self . data . weekday ( ) + 1
increment the lineno by the count of the newlines in self.__starttag_text.,"lineno = lineno + self . __starttag_text . count ( ""\n"" )"
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.,add_to_builtins ( 'django.template.defaultfilters' )
return response.,return response
"if not,",else :
"if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,",if not self . is_valid ( ) or not self . can_delete :
substitute space for sep.,sep = space
statement is an empty list.,statement = [ ]
value is an string '1'.,value = '1'
"if second element of k is None,",if k [ 1 ] is None :
"get the value under the part key of the PALETTES dictionary, update with it palette dictionary.",palette . update ( PALETTES [ part ] )
"call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.","template = get_template_from_string ( template , origin , template_name )"
"if level is not contained in logging._levelNames,",if level not in logging . _levelNames :
"and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs. if self.field.required is true and self.form has an attribute 'required_css_class',","if self . field . required and hasattr ( self . form , 'required_css_class' ) :"
return boolean False.,return False
"get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.",self . test_runner = arg [ len ( option ) : ]
break the loop execution.,break
"raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.","raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )"
"if not,",else :
otherwise assign string 'ascii' to encoding. call the method lookup with the encoding as the argument.,codecs . lookup ( encoding )
"call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.",return calendar . timegm ( result . utctimetuple ( ) )
"if plan is not true,",if not plan :
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.,"_BROWSERS_DEPRECATED_LOCALES = { 'zh-cn' : 'zh-hans' , 'zh-tw' : 'zh-hant' , }"
"call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,",value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
"otherwise if form.has_changed method evaluates to true,",elif form . has_changed ( ) :
"get attribute real_name from the trans object, return it.","return getattr ( trans , real_name )"
"if initial is not an instance of the list type,","if not isinstance ( initial , list ) :"
"if not, substitute self.auto_id for id_. call the method widget.id_for_label with an argument id_, return the result.",return widget . id_for_label ( id_ )
import threading module.,import threading
"call the method match.group with 2 arguments: strings ""var"" and ""constant"", substitute the result for var and constant, respectively.","var , constant = match . group ( ""var"" , ""constant"" )"
define the function all_locale_paths.,def all_locale_paths ( ) :
"define function dictvale, with an argument t.",def dictvalue ( t ) :
"df is an instance of DateFormat class, created with an argument value.",df = DateFormat ( value )
from django.apps import apps into default name space.,from django . apps import apps
"for every error in self.error_list,",for error in self . error_list :
"if self.errors is true and self.form has an attribute 'error_css_class',","if self . errors and hasattr ( self . form , 'error_css_class' ) :"
"call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.","signature = base64_hmac ( self . salt + 'signer' , value , self . key )"
return boolean True.,return True
"if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.",self . argv = argv or sys . argv [ : ]
substitute self.model._meta.pk for pk_field.,pk_field = self . model . _meta . pk
"if not, content_type is an empty string and content_type_extra is an empty dictionary. strip the content_type of the whitespaces, substitute it for content_type.",content_type = content_type . strip ( )
substitute self._empty_value for value.,value = self . _empty_value
"call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.","result = super ( ChoiceField , self ) . __deepcopy__ ( memo )"
"if ValueError exception is caught,",except ValueError :
"if used_name is not equal to guessed_filename,",if used_name != guessed_filename :
"define the method __init__ with arguments self, context, base, sysid and pubid.","def __init__ ( self , context , base , sysid , pubid ) :"
substitute media.__dict__ for media_attrs.,media_attrs = media . __dict__
"open filepath file in read mode, with file descriptor as fp, perform,","with open ( filepath , 'r' ) as fp :"
"if not,",else :
"if second last element of django.VERSION is not equal to a string 'final',",if django . VERSION [ - 2 ] != 'final' :
define the method _create_message with arguments self and msg.,"def _create_message ( self , msg ) :"
"if urlconf is None,",if urlconf is None :
"call the method data, substitute the result for data.",data = data ( )
from django.dispatch import receiver into default name space.,from django . dispatch import receiver
"if AmbiguityError exception is caught,",except AmbiguityError :
cls.__dispatch is an empty dictionary.,cls . __dispatch = { }
"try,",try :
"return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.","return LoaderOrigin ( display_name , loader , name , dirs )"
"if an exception of the type UnicodeDecodeError, renamed to e, is caught,",except UnicodeDecodeError as e :
"if basedirs is empty,",if not basedirs :
define the method is_hidden with an argument self.,def is_hidden ( self ) :
"otherwise, if s has an attribute '__unicode__',","elif hasattr ( s , '__unicode__' ) :"
return singular.,return singular
'Enter a number.' for 'invalid'. define the method to_python with arguments self and value.,"def to_python ( self , value ) :"
"if name is boolean False raise an assert error with message string ""The name argument is not allowed to be empty."".","assert name , ""The name argument is not allowed to be empty."""
"call the method self._text_words with 2 arguments length and truncate, return the result.","return self . _text_words ( length , truncate )"
"try,",try :
from django.db import models and router into default name space.,"from django . db import models , router"
"decorator stringfilter,",@ stringfilter
"call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.",fixture_dirs = [ os . path . dirname ( fixture_name ) ]
"if not,",else :
return mod.register.,return mod . register
return found.,return found
define the function urlunquote with an argument quoted_url.,def urlunquote_plus ( quoted_url ) :
import module types.,import types
"and unpacked dictionary kwargs. define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.","def new_file ( self , file_name , * args , ** kwargs ) :"
"find the ending position of the regular expression match of the object match, substitute the result for j.",j = match . end ( )
define the function file_complete with arguments self and file_size.,"def file_complete ( self , file_size ) :"
return boolean False.,return False
"str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass. return klass.",return klass
"call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.",output . append ( error_row % force_text ( bf_errors ) )
"created with 2 arguments: required as boolean False and widget set to HiddenInput. call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,","super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )"
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.,"def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :"
"call the function conditional_escape with an argument arg, call the method join on the result with an argument value,",data = conditional_escape ( arg ) . join ( value )
"try,",try :
"if nodelist.contains_nontext is true,",if nodelist . contains_nontext :
derive the class TranslatorCommentWarning from the SyntaxWarning base class.,class TranslatorCommentWarning ( SyntaxWarning ) :
"if bcc is not an six.string_types instance raise an error with message string '""bcc"" argument must be a list or tuple'.","assert not isinstance ( bcc , six . string_types ) , '""bcc"" argument must be a list or tuple'"
"define the method __setitem__ with arguments self, name and val.","def __setitem__ ( self , name , val ) :"
"substitute field_type for field_type and new_params, respectively.","field_type , new_params = field_type"
"call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.","return re_newlines . sub ( '\n' , text )"
"if not,",else :
break from the loop execution.,break
"or settings.FILE_UPLOAD_PERMISSIONS if it is. self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,",self . directory_permissions_mode = ( directory_permissions_mode if directory_permissions_mode is not None else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS )
"try,",try :
"create list of first remaining elements of chunk, substitute it for emitting.",emitting = chunk [ : remaining ]
"if mime_encode is true,",if mime_encode :
from django.utils import six into default name space.,from django . utils import six
"if not,",else :
"call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.","super ( PasswordInput , self ) . __init__ ( attrs )"
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.,Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
"substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,","logger . warning ( 'Forbidden (Permission denied): %s' , request . path , extra = { 'status_code' : 403 , 'request' : request } )"
return new_class.,return new_class
define the method _get_count with an argument self.,def _get_count ( self ) :
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from django . utils . deprecation import RemovedInDjango19Warning
"called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy, called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy, called with an argument string 'No'. call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.","super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )"
call the mail.send method with fail_silently=fail_silently as argument.,mail . send ( fail_silently = fail_silently )
"code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'. define the method _has_changed with arguments self, initial and data.","def _has_changed ( self , initial , data ) :"
"if last element of parts is contained in self.serialization_formats,",if parts [ - 1 ] in self . serialization_formats :
"call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.",result . setLevel ( _checkLevel ( level ) )
"p is image parser object, set by calling the PillowImageFile.Parser method.",p = PillowImageFile . Parser ( )
"call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.","super ( MultiValueDict , self ) . __setitem__ ( key , list_ )"
"call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.","self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )"
"if d is an instance of real_datetime class,","if isinstance ( d , real_datetime ) :"
substitute nodelist_empty for self.nodelist_empty.,self . nodelist_empty = nodelist_empty
"call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.","output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )"
"return an string ""Error in formatting: %s"", replace '%s' with result of the function force_text,","return ""Error in formatting: %s"" % force_text ( e , errors = ""replace"" )"
substitute complain for __delitem__.,__delitem__ = complain
quant is an empty list.,quant = [ ]
define the method eval with 2 arguments: self and context.,"def eval ( self , context ) :"
call the self._createdir method.,self . _createdir ( )
"call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.",return self . forms [ self . initial_form_count ( ) : ]
substitute first element of self.argv for subcommand.,subcommand = self . argv [ 1 ]
substitute value under the 'use_threading' key of the options dictionary for threading.,threading = options . get ( 'use_threading' )
"call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,","self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )"
return an empty string.,"return """""
return s.,return s
from django.utils.six.moves import reduce into default name space.,from django . utils . six . moves import reduce
"call the method sys.stderr.write with an argument string ""fork #2 failed: (%d) %s\n"", formated with e.errno and e.strerror.","sys . stderr . write ( ""fork #2 failed: (%d) %s\n"" % ( e . errno , e . strerror ) )"
substitute (i+1)-th element of list_ for next_item.,next_item = list_ [ i + 1 ]
"if not,",else :
derive the class Select from the Widget base class.,class Select ( Widget ) :
"if transfer_encoding is not None,",if transfer_encoding is not None :
define the method endChannelElement with 2 arguments: self and handler.,"def endChannelElement ( self , handler ) :"
"call the method get_template with an argument template, substitute the result for template.",template = get_template ( template )
"output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.",output = [ pformat ( val ) for val in context ]
skip this loop iteration.,continue
"if self._read_started is true,",if self . _read_started :
"if not,",else :
"get the value under the 'domain' key of the options dictionary, substitute it for self.domain.",self . domain = options . get ( 'domain' )
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"call the method cursor.execute with string ""SELECT COUNT(*) FROM %s"" as argument, substitute the '%s' with table.","cursor . execute ( ""SELECT COUNT(*) FROM %s"" % table )"
"if name is None,",if name is None :
"if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,","return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )"
"for every part in plural,",for part in plural :
"call the method p.find with bytes string '=' as an argument, substitute the result for i.",i = p . find ( b'=' )
call the method close on self.,self . close ( )
self._done is boolean False.,self . _done = False
append bit to trans_bit.,trans_bit . append ( bit )
"if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.",sign = '-' if offset < 0 else '+'
"call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,","call_command ( 'runserver' , addrport = options [ 'addrport' ] , shutdown_message = shutdown_message , use_reloader = False , use_ipv6 = options [ 'use_ipv6' ] , use_threading = use_threading )"
"try,",try :
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.,"raise ValueError ( 'Unable to convert ' '%r at %r' % ( value , rest ) )"
substitute self.rendered_content for self.content.,self . content = self . rendered_content
write string ' #\n' to out file.,out . write ( ' #\n' )
substitute complain for reverse.,reverse = complain
call the method os.unlink with an argument pot_path.,os . unlink ( pot_path )
from django.utils.datastructures import MultiValueDict into default name space.,from django . utils . datastructures import MultiValueDict
skip this loop iteration.,continue
"define function _i18n_cache_key_suffix, with request and cache_key as arguments.","def _i18n_cache_key_suffix ( request , cache_key ) :"
define the function partition with 2 arguments: predicate and values.,"def partition ( predicate , values ) :"
app_configs is not None.,app_configs = None
from _systemrestart import SystemRestart into default name space.,from _systemrestart import SystemRestart
"call the function six.iteritems with an argument kwargs, for every key and value in the result,","for key , value in six . iteritems ( kwargs ) :"
"call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.",fmt = get_format ( 'DATE_FORMAT' )
"if x equals to integer 0,",if x == 0 :
return func.,return func
call the method self.autocomplete.,self . autocomplete ( )
"call the method self._get_scheme, return the result.",return self . _get_scheme ( )
"widget is an instance of HiddenInput class. if not,",else :
"convert the result into a lowercase, append it to ret_ip. join elements of ret_ip into a string separated with ':', return it.",return ':' . join ( ret_ip )
if name is contained in lib.filters.,if name in lib . filters :
"if Exception, renamed to e, exception is caught,",except Exception as e :
"if self.fixture_count equals integer 0 and self.hide_empty is true,",if self . fixture_count == 0 and self . hide_empty :
"call the method qs.using with an argument form.instance._state.db, substitute the result for qs.",qs = qs . using ( form . instance . _state . db )
"result is an empty list, upto is integer 0.","result , upto = [ ] , 0"
"if AttributeError exception is caught,",except AttributeError :
substitute substitute TextInput for widget.,widget = TextInput
substitute language for self.__language.,self . __language = language
skip this loop iteration.,continue
skip this loop iteration.,continue
substitute flo for self.flo.,self . flo = flo
"slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.",self . handle_data ( rawdata [ i : j ] )
"call the method _trans.ngettext with 3 arguments singular, plural and number.","return _trans . ngettext ( singular , plural , number )"
return data.,return data
substitute content_length for self.content_length.,self . content_length = content_length
"if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string ""en-us"",","if self . __language == settings . LANGUAGE_CODE or self . __language == ""en-us"" :"
"if f.name is contained in cleaned_data,",if f . name in cleaned_data :
substitute args for key.,key = args
"raise an CommandError with an argument string ""Unable to find a locale path to store translations for file %s"",","raise CommandError ( ""Unable to find a locale path to store translations for file %s"" % file_path )"
"if not,",else :
"call the method self._save with arguments name and content, substitute it for name.","name = self . _save ( name , content )"
substitute variable_name for self.variable_name.,self . variable_name = variable_name
substitute obj for self.obj.,self . obj = obj
"with '%s' substituted for app_label, as arguments. if migration_name equals to string 'zero',","if migration_name == ""zero"" :"
"if not,",else :
"if not,",else :
substitute nodelist for self.nodelist.,self . nodelist = nodelist
"if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.","assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )"
call the method deactivate.,deactivate ( )
define the function strip_entities with an argument value.,def strip_entities ( value ) :
call the file.__enter__ method on self.,self . file . __enter__ ( )
return self.,return self
"request user input from the standard input, assign it o confirm, with the query string: ""You have requested a flush of the database.""","confirm = input ( """"""You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this? Type 'yes' to continue, or 'no' to cancel: """""" % connection . settings_dict [ 'NAME' ] )"
"try,",try :
define the method __repr__ with an argument self.,def __repr__ ( self ) :
substitute self for value.configurator.,value . configurator = self
define the method value with an argument self.,def value ( self ) :
"call the function parse_http_date with an argument date, return the result.",return parse_http_date ( date )
"define the method id_for_label with arguments self, data, files and name.","def value_from_datadict ( self , data , files , name ) :"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"if value is not None,",if value is not None :
call the function write with an argument end.,write ( end )
raise an exception StopFutureHandlers.,raise StopFutureHandlers ( )
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.,"def wrapper ( * args , ** kwds ) :"
"for every item in sorted_items,",for item in sorted_items :
"call the method self.__copy__, return the result.",return self . __copy__ ( )
"if not,",else :
"get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.",yield '%s\n' % line [ : space - 1 ]
"define the initialization method __init__ with arguments: self class instance, dir and params.","def __init__ ( self , dir , params ) :"
"get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.",replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
define the function floatformat with 2 arguments text and arg set to integer -1.,"def floatformat ( text , arg = - 1 ) :"
define the function split_domain_port with an argument host.,def split_domain_port ( host ) :
"from django.utils.encoding import smart_text, force_text and python_2_unicode_compatible into default name space.","from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible"
"if NotImplementedError exception is caught,",except NotImplementedError :
return _default.,return _default
import module base64.,import base64
"call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.","key = bytes_to_text ( key , self . encoding )"
and RemovedInDjango19Warning. call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.,"super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )"
"if arg is smaller than integer 1,",if arg < 1 :
if t.token_type == TOKEN_TEXT:,elif t . token_type == TOKEN_TEXT :
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.,"error_dict . setdefault ( field , [ ] ) . extend ( error_list )"
"call the function force_str with an argument sep, substitute the result for self.sep.",self . sep = force_str ( sep )
"if not,",else :
"get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.","return form . cleaned_data . get ( DELETION_FIELD_NAME , False )"
"if finder is None,",if finder is None :
"call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.","url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )"
do nothing.,pass
"if 'id' is contained in self.attrs,",if 'id' in self . attrs :
"evaluate the function import_string with key_func as argument, return the result.",return import_string ( key_func )
call the function locks.lock with arguments fd and locks.LOCK_EX.,"locks . lock ( fd , locks . LOCK_EX )"
"property decorator,",@ property
substitute error.error_dict for error.,error = error . error_dict
"from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.","from django . utils . timezone import get_default_timezone , is_aware , is_naive"
"convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.","value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )"
derive the class MultiPartParser from the object base class.,class MultiPartParser ( object ) :
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"define the method transform with 3 arguments: self, node and results.","def transform ( self , node , results ) :"
"return an instance of SafeText, created with an argument s.",return SafeText ( s )
"for every root, dirs and files in subdirectory tree starting from the base dir template_dir,","for root , dirs , files in os . walk ( template_dir ) :"
derive class WindowsError from Exception base class.,class WindowsError ( Exception ) :
"for every field in self.fields,",for field in self . fields :
"call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.","cache_key = _generate_cache_header_key ( key_prefix , request )"
return translation.,return translation
"_meth_self is a string ""im_self"".","_meth_self = ""im_self"""
"call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.",self . prog_name = os . path . basename ( self . argv [ 0 ] )
"get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.","meta = getattr ( form , 'Meta' , None )"
"call the function get_language, substitute the result for self.old_language.",self . old_language = get_language ( )
raise a ValidationError exception with arguments self.message and code set to self.code.,"raise ValidationError ( self . message , code = self . code )"
"raise an exception of class ValueError, with string ""Key '%s' not found"" as argument, where '%s' is substituted for key.","raise ValueError ( ""Key '%s' not found"" % key )"
define private method __repr__ with argument self.,def __repr__ ( self ) :
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"try,",try :
"p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,","p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE , close_fds = os . name != 'nt' , universal_newlines = True )"
if subcommand equals to a string 'help'.,if subcommand == 'help' :
"write the string "" Installing custom SQL...\n"" to the standard output.","self . stdout . write ( "" Installing custom SQL...\n"" )"
"get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.","deps = getattr ( model . natural_key , 'dependencies' , [ ] )"
derive the class Signer from the object base class.,class Signer ( object ) :
from django.core.management.sql import sql_destroy_indexes into default name space.,from django . core . management . sql import sql_destroy_indexes
"call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,","sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )"
if value is an instance of bool.,"if isinstance ( value , bool ) :"
"call the method self.port.isdigit, if it evaluates to false,",if not self . port . isdigit ( ) :
"call the CacheHandler function, substitute the result for caches.",caches = CacheHandler ( )
"call the method formats.time_format with 2 arguments: value and arg, return the result.","return formats . date_format ( value , arg )"
"return value of the method field.rel.to._meta.pk.to_python called with an argument v. call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.",m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
"call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.","return super ( SortedDict , self ) . setdefault ( key , default )"
"if token.contents equals string 'empty',",if token . contents == 'empty' :
"for every node in self.nodelist_loop,",for node in self . nodelist_loop :
value under the 'required' key of the kwargs dictionary is boolean False.,"kwargs [ ""required"" ] = False"
substitute self._encoding for encoding.,encoding = self . _encoding
"define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.","def handle_app_config ( self , app_config , ** options ) :"
import termios module.,import termios
"if self.count equals a integer 0 and self.allow_empty_first_page is false,",if self . count == 0 and not self . allow_empty_first_page :
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
"call the os.utime unction, with path and None as arguments.","os . utime ( path , None )"
decorator function register.filter with an argument is_safe set to boolean False.,@ register . filter ( is_safe = False )
"if not,",else :
"raise an ValueError with an argument string ""Invalid header: %r"", where '%s' is replaced with line.","raise ValueError ( ""Invalid header: %r"" % line )"
"raise a exception of CommandError class, with string ""App '%s' does not have migrations"" with '%s' replaced with app_label as the argument.","raise CommandError ( ""App '%s' does not have migrations"" % app_label )"
do nothing.,pass
"otherwise if cmatches is true,",elif cmatches :
"if TemplateSyntaxError, renamed to e, exception is caught,",except TemplateSyntaxError as e :
"call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.",base62 = BaseConverter ( BASE62_ALPHABET )
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"raise a exception of CommandError class, with string ""Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?"",","raise CommandError ( ""Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?"" % ( migration_name , app_label ) )"
"append the results into a list, substitute it for value. node is an instance CycleNode class, created with values,name and silent set to silent.","node = CycleNode ( values , name , silent = silent )"
"call the function six.iteritems with an argument kwargs, for every k and v in the result,","for k , v in six . iteritems ( kwargs ) :"
"define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
"try,",try :
substitute file_name for t.,t = file_name
"perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,",result |= ord ( x ) ^ ord ( y )
"call the function get_user_model, substitute the result for UserModel.",UserModel = get_user_model ( )
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.,raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' )
"put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.",empty_values = list ( validators . EMPTY_VALUES )
call the method self._callback_strs.update with an argument pattern._callback_strs.,self . _callback_strs . update ( pattern . _callback_strs )
LOCK_NB is a hexadecimal 1.,LOCK_NB = 0x1
"if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',","if options [ 'method' ] in ( 'prefork' , 'fork' ) :"
"app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,","app_list = OrderedDict ( ( app_config , None ) for app_config in apps . get_app_configs ( ) if app_config . models_module is not None and app_config not in excluded_apps )"
"define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,","def __init__ ( self , host = None , port = None , username = None , password = None , use_tls = None , fail_silently = False , use_ssl = None , timeout = None , ** kwargs ) :"
"subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.","subject = '%s: %s' % ( record . levelname , record . getMessage ( ) )"
__D is a raw string '(?P<day>\d{2})'.,__D = r'(?P<day>\d{2})'
"if m is true,",if m :
derive the class SkipFile from the UploadFileException base class.,class SkipFile ( UploadFileException ) :
call the method self._cache_flush_all.,self . _cache . flush_all ( )
from django.core.cache.backends.db import BaseDatabaseCache into default name space.,from django . core . cache . backends . db import BaseDatabaseCache
"if not,",else :
import module importlib.,import importlib
from django.conf import settings into default name space.,from django . conf import settings
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.,"@ register . filter ( expects_localtime = True , is_safe = False )"
define the method t with an argument self.,def t ( self ) :
return value.,return value
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.,"def trim_url ( x , limit = trim_url_limit ) :"
pytz is None.,pytz = None
"define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.","def get_format ( format_type , lang = None , use_l10n = None ) :"
"if content has an attribute 'temporary_file_path',","if hasattr ( content , 'temporary_file_path' ) :"
"call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.",inner_text . extend ( getInnerText ( child ) )
"call the method filter_re.finditer with an argument token, substitute the result for matches.",matches = filter_re . finditer ( token )
"call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,","if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :"
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.,"return RegexURLResolver ( r'^/' , urlconf )"
"create a list with count decremented by 1 number of last element of result elements, extend list result with it.",result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
"define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.","def main ( main_func , args = None , kwargs = None ) :"
"if string 'noreset' is not contained in opts,",if 'noreset' not in opts :
"call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,","result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )"
call the method self.handle_field with arguments obj and filed.,"self . handle_field ( obj , field )"
"if AttributeError exception is caught,",except AttributeError :
"define the method _has_changed with 3 arguments: self, initial and data.","def _has_changed ( self , initial , data ) :"
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.,"def list ( self , * args , ** kwargs ) :"
call the self.run method with unpacked dictionary options as an argument.,self . run ( ** options )
"data, encoding and errors as a string 'replace'. otherwise if item_type equals FILE,",elif item_type == FILE :
import module os.,import os
define the method run with 3 arguments: self and unpacked dictionary options.,"def run ( self , ** options ) :"
"call the method self.format with an argument string '0', substitute the result for name.",name = self . format ( 'O' )
"if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.",return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
from io import BytesIO into default name space.,from io import BytesIO
append rel_model to deps.,deps . append ( rel_model )
define the method accessed_time with arguments self and name.,"def accessed_time ( self , name ) :"
call the method request_finished.connect with argument update_watch.,request_finished . connect ( update_watch )
"call the function re.compile with an argument raw string ""(?:(\w+)=)?(.+)"", substitute the result for kwarg_re.","kwarg_re = re . compile ( r""(?:(\w+)=)?(.+)"" )"
"call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.","condition = TemplateIfParser ( parser , bits ) . parse ( )"
"get the type of the exc object, substitute it for exc_type.",exc_type = type ( exc )
do nothing.,pass
break the execution of the smallest enclosing loop.,break
define the method __eq__ with self and other as arguments.,"def __eq__ ( self , other ) :"
"raise an CommandError exception with an argument string ""errors happened while running xgettext on %s\n%s"",","raise CommandError ( ""errors happened while running xgettext on %s\n%s"" % ( self . file , errors ) )"
"if not,",else :
define the method filter with 2 arguments: self and record.,"def filter ( self , record ) :"
"decorator function register.filter with 2 arguments string ""timeuntil"" and is_safe set to boolean False.","@ register . filter ( ""timeuntil"" , is_safe = False )"
"decorator stringfilter,",@ stringfilter
define the function fdel with 2 arguments: instance and name set to fdel.__name__.,"def fdel ( instance , name = fdel . __name__ ) :"
"if first element of message_context equals to character '""',","if message_context [ 0 ] == '""' :"
append d to self.fed.,self . fed . append ( d )
"call the function force_text with an argument text, substitute the result for text.",text = force_text ( text )
"if count of occurrence of '::' in ip_str equals integer 1,",if ip_str . count ( '::' ) == 1 :
"if AttributeError exception is caught,",except AttributeError :
"otherwise if first element of message_context equals to character ""'"",","elif message_context [ 0 ] == ""'"" :"
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:,"fields = ( models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) , models . TextField ( name = 'value' ) , models . DateTimeField ( name = 'expires' , db_index = True ) , )"
"if ValueError exception is caught,",except ValueError :
from django.forms.forms import everything into default name space.,from django . forms . forms import *
define the method add_arguments with arguments self and parser.,"def add_arguments ( self , parser ) :"
"call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',","file_name = force_text ( file_name , encoding , errors = 'replace' )"
"call the function strftime with 2 arguments: self and fmt, return the result.","return strftime ( self , fmt )"
substitute instance._meta for opts.,opts = instance . _meta
"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.'. define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.","def handle_app_config ( self , app_config , ** options ) :"
"if count of occurrence of '.' in ip_str is equal to integer 3,",if hextet . count ( '.' ) == 3 :
"return an empty string,",return ''
"for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type, with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'. if top_errors is true,",if top_errors :
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.,"from django . db . migrations . loader import MigrationLoader , AmbiguityError"
"if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,","if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :"
"call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.","relations = connection . introspection . get_relations ( cursor , table_name )"
"if response is None,",if response is None :
"while escaped is true or ch is not equal to a string ']',",while escaped or ch != ']' :
USE_INOTIFY is boolean False.,USE_INOTIFY = False
"call the function get_language, substitute the result for language_code.",language_code = get_language ( )
"where '%(field)s' is replaced with first element of unique_check, return the result. if not,",else :
"with open file path in append mode,","with open ( path , 'a' ) :"
"if not,",else :
"replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.","status = '%s %s' % ( response . status_code , response . reason_phrase )"
substitute stream_or_string for self.stream.,self . stream = stream_or_string
questioner is an instance of a InteractiveMigrationQuestioner class.,questioner = InteractiveMigrationQuestioner ( )
"return boolean True, otherwise return boolean False. property decorator.",@ property
"return an instance of a NowNode class, created with an argument format_string.",return NowNode ( format_string )
"call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,","final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )"
from django.core.management.base import BaseCommand into default name space.,from django . core . management . base import BaseCommand
forms_valid is True.,forms_valid = True
"get the value under the index key of the hextets dictionary, remove the leading '0' characters,",hextets [ index ] = hextets [ index ] . lstrip ( '0' )
"created with an argument widget set to HiddenInput. value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )"
"call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,","with io . open ( work_file , ""w"" , encoding = 'utf-8' ) as fp :"
substitute _iteritems for items.,items = _iteritems
call the method self.writer_enters.,self . writer_enters ( )
"if lookup_view is contained in self._callback_strs,",if lookup_view in self . _callback_strs :
"for every middleware_method in self._view_middleware,",for middleware_method in self . _view_middleware :
"call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.","name , ( value , params ) = _parse_header ( line )"
call the method self.model._default_manager.get_queryset with an argument qs.,qs = self . model . _default_manager . get_queryset ( )
return input_val.,return input_val
"get ""_decorated_function"" attribute from func, return func if the attribute doesnt exists,","self . tags [ getattr ( func , ""_decorated_function"" , func ) . __name__ ] = func"
"if settings.USE_TZ is true,",if settings . USE_TZ :
"if not,",else :
"call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,","self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )"
"and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function. if settings.DEBUG is True,",if settings . DEBUG :
requires_system_checks is boolean False.,requires_system_checks = False
define the function luhn with an argument candidate.,def luhn ( candidate ) :
"call the os.path.samefile with arguments src and dst, return the result.","return os . path . samefile ( src , dst )"
"remove the first element from self.backout, substitute the result for self.pointer.",self . pointer = self . backout . pop ( )
return default.,return default
"""arguments '%s' not found. %d pattern(s) tried: %s"", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns, and respectively. derive the class LocaleRegexURLResolver with RegexURLResolver as base class.",class LocaleRegexURLResolver ( RegexURLResolver ) :
"call the method token.split_contents, substitute the result for bits.",bits = token . split_contents ( )
"call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.","return formatdate ( epoch_seconds , usegmt = True )"
define the function truncatewords with 2 arguments value and arg.,"def truncatewords ( value , arg ) :"
derive the class FirstOfNode from Node base class.,class FirstOfNode ( Node ) :
return lookup_view.,return lookup_view
"call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.","default = bytes_to_text ( default , self . encoding )"
"convert self.dict into boolean, return the result.",return bool ( self . dict )
define the method with self class instance and parser as arguments.,"def add_arguments ( self , parser ) :"
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.,raise NotImplementedError ( 'Awaiting Implementation' )
"define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.","def parse_bits ( parser , bits , params , varargs , varkw , defaults , takes_context , name ) :"
"define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.","def __init__ ( self , schemes = None , ** kwargs ) :"
"call the method logging.StreamHandler, substitute the result for handler.",handler = logging . StreamHandler ( )
"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false. append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,",warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.,"raise ValueError ( 'Unable to set formatter ' '%r: %s' % ( formatter , e ) )"
"if input_formats is not None,",if input_formats is not None :
if ImportError exception is caught.,except ImportError :
"call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.",migrations_directory = os . path . dirname ( writer . path )
"if length of args is not equal to the sum of the lengths of params and prefix_args,",if len ( args ) != len ( params ) + len ( prefix_args ) :
"if not,",else :
"if self._wrapped is empty,",if self . _wrapped is empty :
"if pattern has an attribute '_callback_str',","if hasattr ( pattern , '_callback_str' ) :"
derive class Command from the BaseCommand base class.,class Command ( BaseCommand ) :
return host.,return host
"zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,","for i_item , i_args in zip ( inner_result , inner_args ) :"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"get the value under the lang_code key of the LANG_INFO dictionary, return it.",return LANG_INFO [ lang_code ]
from django.conf import settings into default name space.,from django . conf import settings
"__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',","__all__ = ( 'Field' , 'CharField' , 'IntegerField' , 'DateField' , 'TimeField' , 'DateTimeField' , 'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' , 'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' , 'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' , 'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' , 'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField' )"
"try,",try :
"use the result as an argument for the call to the method filterer.addFilter. if StandardError, renamed to e, exception is caught,",except StandardError as e :
from django.db.migrations.executor import MigrationExecutor into default name space.,from django . db . migrations . executor import MigrationExecutor
"call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.","super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )"
"if format is not contained in _serializers,",if format not in _serializers :
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.,"raise ValueError ( 'Unable to configure handler ' '%r: %s' % ( name , e ) )"
DEFAULT_MIN_NUM is an integer 0.,DEFAULT_MIN_NUM = 0
decrement nesting by one.,nesting -= 1
"raise an TemplateSyntaxError exception with an argument string ""Invalid arguments provided to assignment_tag"".","raise TemplateSyntaxError ( ""Invalid arguments provided to assignment_tag"" )"
"define function color_style, without input arguments.",def color_style ( ) :
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.,"xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]"
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:,if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
"if loader is not None,",if loader is not None :
"get name attribute from the instance object, call it and return the result.","return getattr ( instance , name ) ( )"
return FASTCGI_HELP.,return FASTCGI_HELP
define the function make_msgid with argument idstring set to None.,def make_msgid ( idstring = None ) :
"if not,",else :
"if addr is a instance of six.string_types,","if isinstance ( addr , six . string_types ) :"
"join elements of self.vals into a bytes string, substitute the result for ret.",ret = b'' . join ( self . vals )
lang is None.,lang = None
substitute value under the database key of the connections dictionary for connection.,connection = connections [ database ]
"join result of the parts function into a bytes string, substitute it for out.",out = b'' . join ( parts ( ) )
call the method utility.execute.,utility . execute ( )
"if size of c_ulong does not equals to size of c_void_p,",if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
substitute self.pointer for i.,i = self . pointer
"if 'pk' is contained in d,",if 'pk' in d :
"if not,",else :
"if not,",else :
"help is a tuple containing string ""Creates a Django project directory structure for the given ""","help = ( ""Creates a Django project directory structure for the given "" ""project name in the current directory or optionally in the "" ""given directory."" )"
import module sys.,import sys
"join statements in a string separated by newline, return the result.",return '\n' . join ( statements )
"if six.PY2 is true,",if six . PY2 :
define the method __copy__ with an argument self.,def __copy__ ( self ) :
"try,",try :
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"if self.initial_forms is false,",if not self . initial_forms :
"_func_globals is a string ""__globals__"".","_func_globals = ""__globals__"""
"if self.asvar is true,",if self . asvar :
"if value equals k or text_value equals return value of the function force_text called with argument k,",if value == k or text_value == force_text ( k ) :
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.,raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
import module cgi.,import cgi
"if _locs_ is None,",if _locs_ is None :
define the method __enter__ with argument self.,def __enter__ ( self ) :
yield meta_line as the result.,yield meta_line
"where '%s' is replaced with name. if defaults is not None,",if defaults is not None :
substitute self for self.config.configurator.,self . config . configurator = self
"if TypeError or ValueError exceptions are caught,","except ( ValueError , TypeError ) :"
"call the method now.decode with an argument string 'utf-8', substitute the result for now.",now = now . decode ( 'utf-8' )
termios is None.,termios = None
return None.,return None
"if InputStreamExhausted exception is caught,",except InputStreamExhausted :
"define the method got with 3 arguments: self, key and otherwise set to None.","def get ( self , key , otherwise = None ) :"
import module os.,import os
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.,raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
return templatetags_modules.,return templatetags_modules
"return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,","return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )"
define the method value with an argument self.,def value ( self ) :
"substitute the result for s. if not,",else :
from django.apps import apps into default name space.,from django . apps import apps
define the method __hash__ with an argument self.,def __hash__ ( self ) :
"define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , context , * args , ** kwargs ) :"
"call the sio.read method, substitute the result for self.buffer.",self . buffer = sio . read ( )
"if OSError exception is caught,",except OSError :
"where '%s' is replaced with top_dir. call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,","extensions = tuple ( handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )"
"call the function force_text with an argument bit, append the result to bits.",bits . append ( force_text ( bit ) )
"if first element of s is not contained in ""\""'"" or last element of s is not equal to first element of s,","if s [ 0 ] not in ""\""'"" or s [ - 1 ] != s [ 0 ] :"
"replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,","cc [ k . replace ( '_' , '-' ) ] = v"
"if only_django,",if only_django :
"call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.","super ( BaseInlineFormSet , self ) . add_fields ( form , index )"
"""RobotFileParser"", ""robotparser"", ""urllib.robotparser"". for every attr in _urllib_robotparser_moved_attributes,",for attr in _urllib_robotparser_moved_attributes :
"call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.","value , converted = convert_old_style_list ( value )"
"if instance.pk is None,",if instance . pk is None :
substitute new_value for value.,value = new_value
substitute v for value under the k key of self dictionary.,self [ k ] = v
"define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.","def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :"
"call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.","raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )"
"convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.","pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )"
"field url of the value under the 'enclosure' key of the item dictionary for 'url', field length of the value under the 'enclosure' key of the item dictionary for 'length', and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'. for every cat in value under the 'categories' key of the item dictionary,",for cat in item [ 'categories' ] :
"if not,",else :
"from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.","from django . utils . encoding import force_str , force_text , iri_to_uri"
substitute environ for self.environ.,self . environ = environ
"instantiate Archive class with an argument path, with it renamed to archive, perform,",with Archive ( path ) as archive :
"define the method compile_function_error with 3 arguments: self, token and e.","def compile_function_error ( self , token , e ) :"
return ZERO.,return ZERO
"if ImproperlyConfigured exception is caught,",except ImproperlyConfigured :
self.cookies is an instance of a class SimpleCookie.,self . cookies = SimpleCookie ( )
"replace this value with v. call the function dictvalue with el as argument for every el in values of dictionary cc,","cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )"
"otherwise is template is six.string_types instance,","elif isinstance ( template , six . string_types ) :"
return an empty list.,return [ ]
"call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,","s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )"
"where '%d' is replaced with i and '%s' is replaced with subject. increment i by integer 1,",i += 1
define the function ugettext with an argument message.,def ugettext ( message ) :
"call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.","html = endtag_re . sub ( '' , html )"
define the method all with argument self.,def all ( self ) :
"define the method clear with self class instance as the argument,",def clear ( self ) :
"for every child in node.childNodes,",for child in node . childNodes :
if encoding is false.,if not encoding :
"if answer is false,",if not answer :
return value.,return value
"evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,","with transaction . atomic ( using = database , savepoint = connection . features . can_rollback_ddl ) :"
"raise an InvalidTemplateLibrary exception with an argument string (""Unsupported arguments to Library.filter: (%r, %r)"",","raise InvalidTemplateLibrary ( ""Unsupported arguments to "" ""Library.filter: (%r, %r)"" , ( name , filter_func ) )"
"call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.","return self . filter_function ( func , ** flags )"
"try,",try :
return initial_forms.,return initial_forms
"append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.","options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]"
"try,",try :
"help is a string ""Starts a lightweight Web server for development."".","help = ""Starts a lightweight Web server for development."""
"HttpResponse.content.setter property,",@ HttpResponse . content . setter
"raise an TypeError exception with an argument string ""invalid keyword arguments to print()"".","raise TypeError ( ""invalid keyword arguments to print()"" )"
substitute pattern.regex.pattern for parent_pat.,parent_pat = pattern . regex . pattern
"call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.","cache_key = _generate_cache_header_key ( key_prefix , request )"
substitute result for value under the mem_args key of the cache dictionary.,cache [ mem_args ] = result
format_locations is an empty list.,format_locations = [ ]
call the method logger.addHandler with an argument handler.,logger . addHandler ( handler )
define the function sanitize_address with arguments addr and encoding.,"def sanitize_address ( addr , encoding ) :"
"call the method handler.addQuickElement with 3 arguments: string 'dc:creator',","handler . addQuickElement ( ""dc:creator"" , item [ ""author_name"" ] , { ""xmlns:dc"" : ""http://purl.org/dc/elements/1.1/"" } )"
"if subcommand_cls.use_argparse is true,",if subcommand_cls . use_argparse :
"call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.",return self . forms [ : self . initial_form_count ( ) ]
"and pattern.default_args. if pattern.name is not None,",if pattern . name is not None :
substitute self.handle_app for handle_app.,handle_app = self . handle_app
"call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,","self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )"
"define the method __new__ with 4 arguments: cls, name, this_bases and d.","def __new__ ( cls , name , this_bases , d ) :"
"append the resulting string to dec_part, substitute it for dec_part. if dec_part is true,",if dec_part :
"call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.","return super ( QueryDict , self ) . pop ( key , * args )"
"if ValueError exception is caught,",except ValueError :
"raise an TemplateSyntaxError exception with an argument string ""widthratio takes at least three arguments"".","raise TemplateSyntaxError ( ""widthratio takes at least three arguments"" )"
"while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,",while new_name . find ( '__' ) >= 0 :
"get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.","return getattr ( _active , ""value"" , get_default_timezone ( ) )"
"property decorator,",@ property
"otherwise if vale is an instance of value,","elif isinstance ( value , six . string_types ) :"
"if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,",if not response . has_header ( 'Cache-Control' ) :
"if self.body is true,",if self . body :
"call the function is_valid_ipv6_address with an argument value, if it evaluates to false,",if not is_valid_ipv6_address ( value ) :
"call the method self.get_available_name with argument name, substitute it for name.",name = self . get_available_name ( name )
"for every base in reversed order of bases,",for base in bases [ : : - 1 ] :
run_syncdb is boolean True.,run_syncdb = True
"if IOError, renamed to e, exception is caught,",except IOError as e :
"call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.","final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )"
if format_module_path is None.,if format_module_path is None :
"return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.","return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )"
"define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.","def __init__ ( self , template_string , origin = None , name = None ) :"
"if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,",if self . timezone and self . timezone . dst ( self . data ) :
"for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.",initial_set = set ( force_text ( value ) for value in initial )
inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.,inner_html = '<li>{choice_value}{sub_widgets}</li>'
call the method handler.startDocument.,handler . startDocument ( )
convert self to a list and return it.,return list ( self )
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.,"p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )"
derive the class NullBooleanField from the base class BooleanField class.,class NullBooleanField ( BooleanField ) :
"if not,",else :
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.,raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
substitute cookie for c.,c = cookie
derive the class BadSignature from the Exception base class.,class BadSignature ( Exception ) :
"define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,","def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' , dir = None ) :"
"for every loader in self.loaders,",for loader in self . loaders :
"execute regardless of the exception being raised,",finally :
"define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.","def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :"
"and unpacked dictionary kwargs. for every v in self.value call the function force_text with an argument v, add the result to a set,",self . value = set ( force_text ( v ) for v in self . value )
substitute parsed for self.parsed.,self . parsed = parsed
property decorator.,@ property
"raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.","raise CommandError ( ""Unknown model: %s.%s"" % ( app_label , model_label ) )"
statements is an empty list.,statements = [ ]
skip this loop iteration.,continue
"if not,",else :
"remove the first element from colors, substitute it for fg.",fg = colors . pop ( )
"where '%s' is replaced with self.id. define the method led with 3 arguments: self, left and parser.","def led ( self , left , parser ) :"
derive the class Command from the base class BaseCommand.,class Command ( BaseCommand ) :
"if message_context is true,",if message_context :
"if refto is contained in seen_models,",if refto in seen_models :
singular is an empty list.,singular = [ ]
"call the method tag_re.finditer with an argument self.template_string, for every match in result,",for match in tag_re . finditer ( self . template_string ) :
"register.tag decorator,",@ register . tag
define the method to_python with arguments self and data.,"def to_python ( self , value ) :"
neg is integer 1.,neg = 1
"convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.",current_expires = typecast_timestamp ( str ( current_expires ) )
"append opts.virtual_fields to opts.many_to_many, for every f in the result,",for f in opts . many_to_many + opts . virtual_fields :
where '%s' is replaced with first element of bits. return an instance of ExtendsNode with 2 arguments nodelist and parent_name.,"return ExtendsNode ( nodelist , parent_name )"
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.,"values = { 'true' : True , 'false' : False }"
"if TypeError exception is caught,",except TypeError :
"call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,",if settings . is_overridden ( 'MANAGERS' ) :
return s.,return s
define the method __deepcopy__ with 2 arguments: self and memo.,"def __deepcopy__ ( self , memo ) :"
substitute mtime for the value under the filename key of _mtimes dictionary.,_mtimes [ filename ] = mtime
"create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,","response [ 'ETag' ] = '""%s""' % hashlib . md5 ( response . content ) . hexdigest ( )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
from collections import OrderedDict into default name space.,from collections import OrderedDict
define the function from_current_timezone with an argument value.,def from_current_timezone ( value ) :
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
return integer 1 and ch2.,"return 1 , ch2"
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.,"from django . utils . encoding import force_text , python_2_unicode_compatible"
"if name is callable object,",if callable ( name ) :
substitute form for self.form.,self . form = form
"otherwise if any other exception is caught,",except :
substitute message for self.message.,self . message = message
return value under the alias key of self._caches.caches dictionary.,return self . _caches . caches [ alias ]
close zfile stream.,zfile . close ( )
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","ch , escaped = next ( pattern_iter )"
"call the function force_bytes with an argument key_salt, substitute the result for key_salt.",key_salt = force_bytes ( key_salt )
"if y, m and d are all equal to string '0',","if y == m == d == ""0"" :"
"call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.","super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )"
raise a NotImplementedError with an argument string,raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
"constant_string is a raw string ""(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)"",","constant_string = r"""""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """""" % { 'strdq' : r'""[^""\\]*(?:\\.[^""\\]*)*""' , 'strsq' : r""'[^'\\]*(?:\\.[^'\\]*)*'"" , 'i18n_open' : re . escape ( ""_("" ) , 'i18n_close' : re . escape ( "")"" ) , }"
call the method self._archive.list.,self . _archive . list ( )
extend list inner_args with args.,inner_args . extend ( args )
import module threading.,import threading
"compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.","compare = lambda self , a , b : a is not b"
"set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,","use_workaround = ( ( current_version < ( 2 , 7 , 3 ) ) or ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) ) )"
return j.,return j
"get the integer representation of the i-th element of buf, return it.",return ord ( buf [ i ] )
"call the method related.natural_key, substitute the result for related.",related = related . natural_key ( )
define the method __str__ with an argument self.,def __str__ ( self ) :
"if app_config.models_module is None,",if app_config . models_module is None :
"compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.","compare = lambda self , a , b : a > b"
"if not,",else :
define the method previous_page_number with an argument self.,def previous_page_number ( self ) :
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
derive the class UTC from the tzinfo base class.,class UTC ( tzinfo ) :
"raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.",raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
"return an empty string,",return ''
define the function time with 2 arguments value and arg set to None.,"def time ( value , arg = None ) :"
"define the method __setitem__ with 3 arguments: self, kay and value.","def __setitem__ ( self , key , value ) :"
from datetime import datetime into default name space.,from datetime import datetime
import module errno.,import errno
"if conflicts is true and self.merge is false,",if conflicts and not self . merge :
requires_system_checks is boolean False.,requires_system_checks = False
"get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format. call the method value.strftime with an argument format, return the result.",return value . strftime ( format )
substitute cmd for self.cmd.,self . cmd = cmd
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.,"from django . utils . text import normalize_newlines , slugify as _slugify"
"call the function local, substitute the result for _active.",_active = local ( )
substitute error_messages under the message.code key of error_messages dictionary for message.message.,message . message = error_messages [ message . code ]
substitute _iterkeys for iterkeys.,iterkeys = _iterkeys
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.,cls . __dispatch [ klass ] = { }
saved_instances is an empty list.,saved_instances = [ ]
define the method super with an argument self.,def super ( self ) :
from django.utils.encoding import force_unicode.,from django . utils . encoding import force_unicode
"call the method _trans.npgettext with 4 arguments context, singular, plural and number.","return _trans . npgettext ( context , singular , plural , number )"
"if value is false or for every v in value every v is contained in self.empty_values,",if not value or not [ v for v in value if v not in self . empty_values ] :
substitute first element of loader for loader and loader without the first element for args.,"loader , args = loader [ 0 ] , loader [ 1 : ]"
substitute field for self.field.,self . field = field
"join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,","new_path = path . join ( top_dir , relative_dir , filename . replace ( base_name , name ) )"
do nothing.,pass
"for every i in range of integers from 0 to length of result, not included,",for i in range ( len ( result ) ) :
use the result as an argument for the call to the function self._out.write. derive the BaseCommand class from the object base class.,class BaseCommand ( object ) :
"get the directory name of filename, substitute the result for dirname.",dirname = os . path . dirname ( filename )
"""format (using each model's default manager unless --all is specified)."". define the method add_arguments with arguments self and parser.","def add_arguments ( self , parser ) :"
"call the function find_template_loader with an argument loader, append the result to cached_loaders.",cached_loaders . append ( find_template_loader ( loader ) )
substitute lookup_view for lookup_view_s.,lookup_view_s = lookup_view
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:,"self . _post . appendlist ( field_name , force_text ( data , encoding , errors = 'replace' ) )"
root is an empty list.,root = [ ]
call the method urlresolvers.set_urlconf with urlconf as the argument.,urlresolvers . set_urlconf ( urlconf )
"try,",try :
"decorator stringfilter,",@ stringfilter
"for every header in headerlist,",for header in headerlist :
substitute registry.run_checks for run_checks.,run_checks = registry . run_checks
"get the value under the mem_args key of the cache dictionary, return it.",return cache [ mem_args ]
"create a tuple out of types of v, for every v in args, extend key tuple with the result.",key += tuple ( type ( v ) for v in args )
define the method _clean_fields with an argument self.,def _clean_fields ( self ) :
"if ipv4_unpacked is true,",if ipv4_unpacked :
"for every form in self.saved_forms,",for form in self . saved_forms :
"unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result. return _curried.",return _curried
"assign it to value under the string "".moves.urllib_response"" appended to __name__ key of the sys.modules dictionary, and to value under the string "".moves.urllib.response"" appended to __name__ key of the sys.modules dictionary. derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.",class Module_six_moves_urllib_robotparser ( _LazyModule ) :
"substitute the result for RFC850_DATE. call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,","ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )"
self._called_from_command_line is boolean True.,self . _called_from_command_line = True
increment i by integer 1.,i += 1
"define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.","def __call__ ( self , template_name , template_dirs = None ) :"
"call the method self.get_unique_error_message with an argument unique_check, append the result to errors.",errors . append ( self . get_unique_error_message ( unique_check ) )
import module '.management' from the package app_config.name.,"import_module ( '.management' , app_config . name )"
return _wrapped_view.,return _wrapped_view
use_l10n set to None and use_tz set to None. substitute autoescape for self.autoescape.,self . autoescape = autoescape
substitute self.default_timeout for timeout.,timeout = self . default_timeout
from django.utils.six.moves.urllib.parse import urljoin into default name space.,from django . utils . six . moves . urllib . parse import urljoin
"if self.deactivate is true,",if self . deactivate :
substitute force_text for force_str.,force_str = force_text
"if not,",else :
substitute self for value.configurator.,value . configurator = self
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.,"template_dir = self . handle_template ( options [ 'template' ] , base_subdir )"
"call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.","template = get_template_from_string ( source , origin , template_name )"
"raise an exception self.error_class with an argument string """"Unused '%s' at end of if expression"",","raise self . error_class ( ""Unused '%s' at end of if expression."" % self . current_token . display ( ) )"
"if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,",if not response . has_header ( 'Last-Modified' ) :
"take last four elements of base and append ext to it, substitute result for ext.",ext = base [ - 4 : ] + ext
"call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.","return import_string ( path ) ( * args , ** kwargs )"
derive the class QueryDict from the base class MultiValueDict.,class QueryDict ( MultiValueDict ) :
"call the function escape with an argument text, return the result.",return escape ( text )
from django.utils.functional import lazy into default name space.,from django . utils . functional import lazy
define the method pop with an argument self.,def pop ( self ) :
import module sys.,import sys
"for every smigration in migrations_to_squash,",for smigration in migrations_to_squash :
"call the function warnings.warn with 3 arguments: string ""`%s.%s` is deprecated, use `%s` instead."",","warnings . warn ( ""`%s.%s` is deprecated, use `%s` instead."" % ( self . class_name , self . old_method_name , self . new_method_name ) , self . deprecation_warning , 2 )"
from collections import UserList into default namespace.,from collections import UserList
define the function m2m_convert with an argument value.,def m2m_convert ( value ) :
"get the values under the 'app_label' and 'migration_name' keys of the options dictionary,","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]"
input_type is None.,input_type = None
"call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.","parser . add_argument ( 'migration_name' , help = 'Migration name to print the SQL for.' )"
from django.conf import settings into default name space.,from django . conf import settings
"if field.rel.to._meta.pk.rel is true,",if field . rel . to . _meta . pk . rel :
"format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',",return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
"define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.","def _proxy_method ( self , * args , ** kwargs ) :"
"raise CommandError exception with ""Cannot find a migration matching '%s' from app '%s'."",","raise CommandError ( ""Cannot find a migration matching '%s' from app '%s'."" % ( migration_name , app_label ) )"
"if mode is not contained in app_list_value,",if model not in app_list_value :
"if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,","if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :"
"call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,","if self . compare ( cleaned , self . limit_value ) :"
define the method __repr__ with an argument self.,def __repr__ ( self ) :
define the method __call__ with arguments self and value.,"def __call__ ( self , value ) :"
"from django.db.models import AutoField, OneToOneField and ForeignKey.","from django . db . models import AutoField , OneToOneField , ForeignKey"
"call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.",out . write ( ' _(%s) ' % cmatch . group ( 1 ) )
"for every e in all_issues, raise an CommandError with argument msg,",raise CommandError ( msg )
"if not,",else :
return an empty list.,return [ ]
"__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.","__all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )"
define the method create_variable_node with 2 arguments: self and contents.,"def create_variable_node ( self , contents ) :"
"call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,",if not is_valid_ipv6_address ( ip_str ) :
derive the class MultiValueDict from the dict base class.,class MultiValueDict ( dict ) :
"dictionary keys converted into sets, skip this loop iteration,",continue
"remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.","name = config . get ( 'name' , '' )"
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.,raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
"take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.","args . append ( ( True , Variable ( var_arg ) ) )"
decorator register with Tags.models as an argument.,@ register ( Tags . models )
level is an integer 0.,level = 0
"call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.","source , display_name = loader ( name , dirs )"
call close method on a file stream.,f . close ( )
return attrs.,return attrs
from django.core.serializers import base into default name space.,from django . core . serializers import base
"msg is a string """"The included urlconf '{name}' does not appear to have any patterns in it.","msg = ( ""The included urlconf '{name}' does not appear to have any "" ""patterns in it. If you see valid patterns in the file then "" ""the issue is probably caused by a circular import."" )"
app_configs is None.,app_configs = None
self.position is an integer 0.,self . position = 0
"call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,","tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' % ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) , re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) , re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )"
"with an argument string 'object', return the result. define the method _get_model_from_node with arguments self, node and attr.","def _get_model_from_node ( self , node , attr ) :"
if KeyError exception is caught.,except KeyError :
raise an TemplateDoesNotExist exception with an argument template_name.,raise TemplateDoesNotExist ( template_name )
derive the class TextNode form the base class Node.,class TextNode ( Node ) :
"call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,","db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )"
"get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.","m = getattr ( lookup_view , '__module__' , None )"
import pickle.,import pickle
define the function get_language.,def get_language ( ) :
"for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,","field_dict = OrderedDict ( [ ( f , field_dict . get ( f ) ) for f in fields if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ] )"
self._closable_objects is an empty list.,self . _closable_objects = [ ]
"call the function force_str with an argument signature, return the result.",return force_str ( signature )
request_middleware is an empty list.,request_middleware = [ ]
"call the function processor with an argument request, update updates dictionary with the result.",updates . update ( processor ( request ) )
"call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,","for option_value , option_label in chain ( self . choices , choices ) :"
"finally,",finally :
"if not,",else :
define the method __getitem__ with 2 arguments: self and name.,"def __getitem__ ( self , name ) :"
import module warnings.,import warnings
"get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.",lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
self.verbatim is boolean False.,self . verbatim = False
yield representative and boolean True.,"yield representative , True"
"call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.","duplicate = copy ( super ( BaseContext , self ) )"
"strfunc is an instance of a class Name, created with 2 arguments: string ""__str__"" and prefix as unifunc.prefix.","strfunc = Name ( ""__str__"" , prefix = unifunc . prefix )"
substitute value under the cache_alias key of the caches dictionary for cache.,cache = caches [ cache_alias ]
"concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.",s = s [ : site ] + syear + s [ site + 4 : ]
"fetch one record from the database cursor points at, substitute the first element of return value for num.",num = cursor . fetchone ( ) [ 0 ]
"if self.save_as_new is true,",if self . save_as_new :
from django.core.signals import request_finished into default name space.,from django . core . signals import request_finished
substitute return value of the method obj._get_pk_val for obj_pk.,obj_pk = obj . _get_pk_val ( )
"append x to self.namespaces list for every x in namespaces, only if x is true.",self . namespaces = [ x for x in namespaces if x ]
"define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.","def get_template_sources ( self , template_name , template_dirs = None ) :"
"get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,","incremental = config . pop ( 'incremental' , False )"
"if NameError exception is caught,",except KeyError :
"if args in true,",if args :
"try,",try :
"call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.",val1 = parser . compile_filter ( bits [ 1 ] )
"if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.",is_dst = False if dt is None else self . _isdst ( dt )
response_fixes is a list with http.fix_location_header and http.conditional_content_removal as elements.,"response_fixes = [ http . fix_location_header , http . conditional_content_removal , ]"
"define the method value_from_datadict with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) :"
"if field is an instance of InlineForeignKeyField class,","if isinstance ( field , InlineForeignKeyField ) :"
"call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.","result = datetime . datetime ( value . year , value . month , value . day )"
"if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,","if ( getattr ( Meta , 'fields' , None ) is None and getattr ( Meta , 'exclude' , None ) is None ) :"
"raise an TemplateSyntaxError with an argument string ""Invalid filter: '%s'"", substitute '%s' with filter_name.","raise TemplateSyntaxError ( ""Invalid filter: '%s'"" % filter_name )"
"for every dirpath, dirnames and filenames in the result, for every dirname in list dirnames,",for dirname in dirnames [ : ] :
from collections import OrderedDict into default name space.,from collections import OrderedDict
"try,",try :
"call the method self.as_tuple with an argument value under 'address' key of config dictionary,",config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
substitute number for value under the 'number' key of the kwargs dictionary.,kwargs [ 'number' ] = number
"on the result call the method encode with the arguments encoding and errors, return the result. if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,",if strings_only and is_protected_type ( s ) :
"remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,","disable_existing = config . pop ( 'disable_existing_loggers' , True )"
"compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.","cc_delim_re = re . compile ( r'\s*,\s*' )"
"call the method self.common_logger_config with 3 arguments: logger, config and incremental.","self . common_logger_config ( logger , config , incremental )"
substitute request.urlconf for urlconf.,urlconf = request . urlconf
from django.utils import timezone into default name space.,from django . utils import timezone
"if path_info is empty,",if not path_info :
"call the method self._isdst with an argument dt, if it evaluates to true,",if self . _isdst ( dt ) :
"substitute this list for additional_headers. join all of the elements of vary_headers and additional_headers in a string delimited by a comma,","response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )"
substitute _itervalues for values.,values = _itervalues
return singular_suffix.,return singular_suffix
"raise an ValueError with an argument string ""'package' not set to a string"".","raise ValueError ( ""'package' not set to a string"" )"
call the function deactivate_all.,deactivate_all ( )
buffer_types is a tuple with 2 elements bytearray and memoryview.,"buffer_types = ( bytearray , memoryview )"
"try,",try :
"raise an CommandError exception with an argument string ""Command doesn't accept any arguments"".","raise CommandError ( ""Command doesn't accept any arguments"" )"
"call the get_valid_filename with argument name, return the result.",return get_valid_filename ( name )
derive the class OrderedSet from the object base class.,class OrderedSet ( object ) :
call the method self.endElement with an argument name.,self . endElement ( name )
"call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.","handler = self . get_handler ( * args , ** options )"
raise a ValidationError exception with arguments self.message and code set to self.code.,"raise ValidationError ( self . message , code = self . code )"
"call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,",result ^= _bin_to_long ( u )
"call the method value_from_datadict from the base class of the class ClearableFileInput,","upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )"
"UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.","UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]"
"call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.","from_email = sanitize_address ( email_message . from_email , email_message . encoding )"
"raise an TemplateSyntaxError exception with an argument string ""'%s' tag takes only one argument"",","raise TemplateSyntaxError ( ""'%s' tag takes only one argument"" % bits [ 0 ] )"
"raise an Exception exception with an argument string ""This %s instance is not writable"",","raise Exception ( ""This %s instance is not writable"" % self . __class__ . __name__ )"
"convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.",field_params [ 'max_length' ] = int ( row [ 3 ] )
"""or the 'exclude' attribute is prohibited; form %s needs updating."", where '%s' is replaced with name. if opts.fields equals ALL_FIELDS,",if opts . fields == ALL_FIELDS :
return value.,return value
substitute factory for value under '()' key of config dictionary.,config [ '()' ] = factory
"if t is contained in self.__dispatch,",if t in self . __dispatch :
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.,"def __init__ ( self , * args , ** kwargs ) :"
"read file fp, substitute the read data for output.",output = fp . read ( )
define the method add_arguments with 2 arguments self and parser.,"def add_arguments ( self , parser ) :"
"substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.","PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3"
return ret.,return ret
position the file pointer at the beginning of self file.,self . seek ( 0 )
substitute buffer for memoryview.,memoryview = buffer
"define the method _create_mime_attachment with arguments self, content and mimetype.","def _create_mime_attachment ( self , content , mimetype ) :"
"try,",try :
"call the function self._resolve_lookup with an argument context, substitute the result for value.",value = self . _resolve_lookup ( context )
"try,",try :
"for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.",data [ f . name ] = [ item . pk for item in qs ]
call the method self.can_write.release.,self . can_write . release ( )
derive the class cached_property from the object base class.,class cached_property ( object ) :
"call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default"" database.' as arguments.","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS , help = 'Nominates a database to create SQL for. Defaults to the ' '""default"" database.' )"
call the function import_module with an argument app_name.,import_module ( app_name )
"call the method parser.add_argument with 2 arguments: string 'app_label',","parser . add_argument ( 'app_label' , help = 'App label of the application to squash migrations for.' )"
"if key is contained in cache,",if key in cache :
derive class ImageFile from the base class File.,class ImageFile ( File ) :
substitute True for output_transaction.,output_transaction = True
"replace '%s' in string ""Downloading %s\n"", with display_url, write it to self.stdout stream.","self . stdout . write ( ""Downloading %s\n"" % display_url )"
"call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.",return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
"call the method self.configure_filter with an argument value under name key of filters dictionary,",filters [ name ] = self . configure_filter ( filters [ name ] )
"allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.","allowed_schemes = [ 'http' , 'https' , 'ftp' ]"
"call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.","super ( CharField , self ) . __init__ ( * args , ** kwargs )"
"DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',","DEFAULT_LOGGING = { 'version' : 1 , 'disable_existing_loggers' : False , 'filters' : { 'require_debug_false' : { '()' : 'django.utils.log.RequireDebugFalse' , } , 'require_debug_true' : { '()' : 'django.utils.log.RequireDebugTrue' , } , } , 'handlers' : { 'console' : { 'level' : 'INFO' , 'filters' : [ 'require_debug_true' ] , 'class' : 'logging.StreamHandler' , } , 'null' : { 'class' : 'logging.NullHandler' , } , 'mail_admins' : { 'level' : 'ERROR' , 'filters' : [ 'require_debug_false' ] , 'class' : 'django.utils.log.AdminEmailHandler' } } , 'loggers' : { 'django' : { 'handlers' : [ 'console' ] , } , 'django.request' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : False , } , 'django.security' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : False , } , 'py.warnings' : { 'handlers' : [ 'console' ] , } , } }"
self.attrs is an empty dictionary.,self . attrs = { }
derive the class BooleanField from the base class Field class.,class BooleanField ( Field ) :
"call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.",input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
"if element of targets in first row and second column is None,",if targets [ 0 ] [ 1 ] is None :
and unpacked dictionary kwargs. substitute max_length and min_length for self.max_length for self.min_length.,"self . max_length , self . min_length = max_length , min_length"
"replace all occurrences of ""'"" with ""\\'"" in the previous result, return the result. decorator function register.filter with an argument is_safe set to boolean True.",@ register . filter ( is_safe = True )
call the method self.validate_unique.,self . validate_unique ( )
"if not,",else :
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.,"default_error_messages = { 'invalid' : _ ( 'Enter a valid URL.' ) , }"
"call the function timedelta with an argument seconds as negative time.altzone, return the result.",return timedelta ( seconds = - time . altzone )
return self._request.,return self . _request
"and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary. for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,","for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :"
"if every filter_name in strings 'escape' or 'safe',","if filter_name in ( 'escape' , 'safe' ) :"
raise a SerializerDoesNotExist exception with an argument format.,raise SerializerDoesNotExist ( format )
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.,"from django . utils . encoding import python_2_unicode_compatible , force_str"
"try,",try :
"define the method handle_field with arguments self, obj and field.","def handle_field ( self , obj , field ) :"
define the method F with an argument self.,def F ( self ) :
"result of the function iri_to_uri called with an argument link for 'link', result of the function to_unicode called with an argument description for 'description', result of the function to_unicode called with an argument author_email for 'author_email', result of the function to_unicode called with an argument author_name for 'author_name', result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate', updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments', result of the function to_unicode called with an argument unique_id) for 'unique_id)', unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure', if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key, result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'. update dictionary item with an argument kwargs.",item . update ( kwargs )
do nothing.,pass
derive the class ExtendsNode from the Node base class.,class ExtendsNode ( Node ) :
"if request.method equals to string 'HEAD',",if request . method == 'HEAD' :
return msgs.,return msgs
attrs is a empty list.,attrs = [ ]
"if self.domain is not equal to string 'django' or string 'djangojs',","if self . domain not in ( 'django' , 'djangojs' ) :"
"call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.",before_import_registry = copy . copy ( register_to . _registry )
return _make_decorator.,return _make_decorator
"and include_auto_created set to boolean True, call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.","output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )"
delete first element of bits.,del bits [ : 1 ]
"replace '%s' in string ""Cache table '%s' created."" with tablename, write it to self.stdout.","self . stdout . write ( ""Cache table '%s' created."" % tablename )"
set self.cdata_tag to None.,self . cdata_tag = None
"get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.","name = getattr ( file , 'name' , None )"
parentloop is an empty dictionary.,parentloop = { }
"call the method from_current_timezone with an argument result, return the result.",return from_current_timezone ( result )
"if PY3 is true,",if PY3 :
"for every i and line in enumerated iterable lines,","for i , line in enumerate ( lines ) :"
"if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),",if not ( self . inverse_match is not bool ( self . regex . search ( force_text ( value ) ) ) ) :
call the method self.writer_leaves.,self . writer_leaves ( )
"if ValueError, TypeError or OverflowError exceptions are caught,","except ( ValueError , TypeError , OverflowError ) :"
return the first element of self.client_address.,return self . client_address [ 0 ]
join inner_text elements into a string.,"return """" . join ( inner_text )"
"define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.","def handle ( self , * args , ** options ) :"
"class method decorator,",@ classmethod
call the method self.parent_name.resolve with an argument context.,parent = self . parent_name . resolve ( context )
from django.utils.functional import cached_property into default name space.,from django . utils . functional import cached_property
from django.db.models import ForeignKey.,from django . db . models import ForeignKey
define the method prepare_value with 2 arguments: self and value.,"def prepare_value ( self , value ) :"
"if not,",else :
define the method _post_clean with an argument self.,def _post_clean ( self ) :
"call the self.path function with argument path, substitute it for path.",path = self . path ( path )
"call the method local, substitute the result for _active.",_active = local ( )
"if entry is a directory,",if os . path . isdir ( entry ) :
s is an instance of MLStripper class.,s = MLStripper ( )
"where '%s' is replaced with bit and '%r' is replaced with current. if current is callable object,",if callable ( current ) :
"define the method cache_key with 3 arguments: self, template_name and template_dirs.","def cache_key ( self , template_name , template_dirs ) :"
"call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.","mod_name , func_name = get_mod_func ( lookup_view )"
call the parent class of Command class add_arguments method and parser as the arguments.,"super ( Command , self ) . add_arguments ( parser )"
define the method m with an argument self.,def m ( self ) :
"if chunk_size is false,",if not chunk_size :
"return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.","return ResolverMatch ( self . callback , args , kwargs , self . name )"
"try,",try :
"if self.verbosity is greater than integer 0,",if self . verbosity > 0 :
"with return value of the function transaction.atomic with using set to db as arguments, perform the following,",with transaction . atomic ( using = db ) :
"define the method add_fields with 2 arguments: self, form and index.","def add_fields ( self , form , index ) :"
define the method __str__ with an argument self.,def __str__ ( self ) :
"call the method value.serializable_value with an argument self.to_field_name, return the result.",return value . serializable_value ( self . to_field_name )
"if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'. if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,",if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
first element of url_fields is string 'http'.,url_fields [ 0 ] = 'http'
"return an instance of SafeText, created with an argument t.",return SafeText ( t )
"decrement number by one, multiply it with self.per_page, substitute the result for bottom.",bottom = ( number - 1 ) * self . per_page
"define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.","def curry ( _curried_func , * args , ** kwargs ) :"
"define the method __init__ with 4 arguments: self, url, length and mime_type.","def __init__ ( self , url , length , mime_type ) :"
"define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.","def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :"
"yield obj as generator return value,",yield obj
ch2 is None.,ch2 = None
return text.,return text
remove original_path directory.,os . rmdir ( original_path )
"try,",try :
"for every filenam in locale_filenames,",for filename in locale_filenames :
"os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise. call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',","parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )"
"if KeyError exception is caught,",except KeyError :
delete the value under key key of self._expire_info.,del self . _expire_info [ key ]
from django.utils.encoding import smart_text and force_text into default name space.,"from django . utils . encoding import smart_text , force_text"
substitute frame.f_globals for _globs_.,_globs_ = frame . f_globals
"try,",try :
"unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary. if not,",else :
yield one element of data iterable.,yield data
"otherwise if char is contained in string 'dj',",elif char in 'dj' :
define the function comment with 2 arguments: parser and token.,"def comment ( parser , token ) :"
define the function find_commands with an argument management_dir.,def find_commands ( management_dir ) :
"if call to the _has_expired method with argument key evaluates to boolean False,",if not self . _has_expired ( key ) :
substitute self.entity_decl for parser.EntityDeclHandler.,parser . EntityDeclHandler = self . entity_decl
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.,"handler . addQuickElement ( ""email"" , item [ 'author_email' ] )"
"buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.","buffer_types = ( bytes , bytearray , memoryview )"
"get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.","errors = getattr ( fp , ""errors"" , None )"
"REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,","REASON_PHRASES = { 100 : 'CONTINUE' , 101 : 'SWITCHING PROTOCOLS' , 102 : 'PROCESSING' , 200 : 'OK' , 201 : 'CREATED' , 202 : 'ACCEPTED' , 203 : 'NON-AUTHORITATIVE INFORMATION' , 204 : 'NO CONTENT' , 205 : 'RESET CONTENT' , 206 : 'PARTIAL CONTENT' , 207 : 'MULTI-STATUS' , 208 : 'ALREADY REPORTED' , 226 : 'IM USED' , 300 : 'MULTIPLE CHOICES' , 301 : 'MOVED PERMANENTLY' , 302 : 'FOUND' , 303 : 'SEE OTHER' , 304 : 'NOT MODIFIED' , 305 : 'USE PROXY' , 306 : 'RESERVED' , 307 : 'TEMPORARY REDIRECT' , 308 : 'PERMANENT REDIRECT' , 400 : 'BAD REQUEST' , 401 : 'UNAUTHORIZED' , 402 : 'PAYMENT REQUIRED' , 403 : 'FORBIDDEN' , 404 : 'NOT FOUND' , 405 : 'METHOD NOT ALLOWED' , 406 : 'NOT ACCEPTABLE' , 407 : 'PROXY AUTHENTICATION REQUIRED' , 408 : 'REQUEST TIMEOUT' , 409 : 'CONFLICT' , 410 : 'GONE' , 411 : 'LENGTH REQUIRED' , 412 : 'PRECONDITION FAILED' , 413 : 'REQUEST ENTITY TOO LARGE' , 414 : 'REQUEST-URI TOO LONG' , 415 : 'UNSUPPORTED MEDIA TYPE' , 416 : 'REQUESTED RANGE NOT SATISFIABLE' , 417 : 'EXPECTATION FAILED' , 418 : ""I'M A TEAPOT"" , 422 : 'UNPROCESSABLE ENTITY' , 423 : 'LOCKED' , 424 : 'FAILED DEPENDENCY' , 426 : 'UPGRADE REQUIRED' , 428 : 'PRECONDITION REQUIRED' , 429 : 'TOO MANY REQUESTS' , 431 : 'REQUEST HEADER FIELDS TOO LARGE' , 500 : 'INTERNAL SERVER ERROR' , 501 : 'NOT IMPLEMENTED' , 502 : 'BAD GATEWAY' , 503 : 'SERVICE UNAVAILABLE' , 504 : 'GATEWAY TIMEOUT' , 505 : 'HTTP VERSION NOT SUPPORTED' , 506 : 'VARIANT ALSO NEGOTIATES' , 507 : 'INSUFFICIENT STORAGE' , 508 : 'LOOP DETECTED' , 510 : 'NOT EXTENDED' , 511 : 'NETWORK AUTHENTICATION REQUIRED' , }"
"call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.",year = int ( m . group ( 'year' ) )
"sort elements of handlers, for every name in result,",for name in sorted ( handlers ) :
return f.,return f
"if match is true,",if match :
"if fifth and sixth elements of row are None,",if row [ 4 ] is None or row [ 5 ] is None :
"if args in None of boolean False, substitute it for an empty list.",args = args or [ ]
substitute boundary for self._boundary.,self . _boundary = boundary
"if ext is false and content_type is true,",if not ext and content_type :
"call the method appendlist from the base class of the QueryDict class, with arguments key and value.","super ( QueryDict , self ) . appendlist ( key , value )"
output is an empty list.,output = [ ]
from django.core.management.base import BaseCommand and CommandError into default name space.,"from django . core . management . base import BaseCommand , CommandError"
if AttributeError exception is caught.,except AttributeError :
"for app_config in return value of the method apps.get_app_configs,",for app_config in apps . get_app_configs ( ) :
"call the method language_code_re.search with an argument accept_lang, if it evaluates to false,",if not language_code_re . search ( accept_lang ) :
"if TypeError, renamed to te, exception is caught,",except TypeError as te :
call the method stream.unget with elements of list chunk from the index next to the end.,stream . unget ( chunk [ next : ] )
from django.core import mail into default name space.,from django . core import mail
"call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.","sign , digittuple , exponent = value . as_tuple ( )"
"call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.","int2byte = operator . methodcaller ( ""to_bytes"" , 1 , ""big"" )"
"call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.","self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )"
"if stream_or_string is not an instance of bytes or six.string_types,","if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :"
"if recursive is true,",if recursive :
"if not,",else :
call the method handler.addQuickElement with 2 arguments: string 'category' and cat.,"handler . addQuickElement ( ""category"" , cat )"
"for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,","for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :"
import module errno.,import errno
return nothing.,return
"clean is a lambda function with self and x as arguments, return value is length of x.","clean = lambda self , x : len ( x )"
"define the function custom_sql_for_model with 3 arguments: app_config, style and connection.","def custom_sql_for_model ( model , style , connection ) :"
"if first element of the second row of args equals a string '2',",if args [ 1 ] [ 0 ] == '2' :
"mapped with a function k, for every k and v in return value of the method candidate_subs.items. format candidate_pat with candidate_subs, return the result.",return candidate_pat % candidate_subs
from django.utils.formats import localize into default name space.,from django . utils . formats import localize
derive the class JSONSerializer from the object base class.,class JSONSerializer ( object ) :
"if compress is true,",if compress :
"raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )"
"if inplural is true,",if inplural :
remove k element from self.keyOrder dictionary.,self . keyOrder . remove ( k )
define the method __eq__ with arguments self and other.,"def __eq__ ( self , other ) :"
"if self.verbosity is greater or equal to integer 3,",if self . verbosity >= 3 :
nm and addr are addr.,"nm , addr = addr"
"call the function format_html with an argument empty string, return the result.","return format_html ( """" )"
"try,",try :
"for every formset in formsets,",for formset in formsets :
from django.core.serializers.python import Serializer as PythonSerializer into default name space.,from django . core . serializers . python import Serializer as PythonSerializer
"if self equals to other return boolean False, otherwise return True.",return not ( self == other )
derive the class HttpResponseNotAllowed from the HttpResponse base class.,class HttpResponseNotAllowed ( HttpResponse ) :
"if transfer_encoding equals string 'base64',",if transfer_encoding == 'base64' :
update self dictionary with updates.,self . update ( updates )
"find first index of occurrence of character '-' in language, substitute it for p.",p = language . find ( '-' )
"call the function token.split_contents, substitute the result without the first element for bits.",bits = token . split_contents ( ) [ 1 : ]
app_configs is a list containing app_config.,app_configs = [ app_config ]
"call the method var.resolve with 2 arguments: context and True, substitute the result for value.","value = var . resolve ( context , True )"
"try,",try :
"if in_tag and is not contained in self.verbatim,",if in_tag and not self . verbatim :
"and html set to boolean True, return the result. decorator function register.filter with an argument is_safe set to boolean True.",@ register . filter ( is_safe = True )
define the method is_multipart with an argument self.,def is_multipart ( self ) :
max_num is integer 1.,max_num = 1
from django.utils.translation import trans_real into default namespace.,from django . utils . translation import trans_real
lookups is an instance of the MultiValueDict class.,lookups = MultiValueDict ( )
return lang_code.,return lang_code
return the value under the self.data.month key of the MONTHS dictionary.,return MONTHS [ self . data . month ]
substitute self.addr without the first and last element for self.addr.,self . addr = self . addr [ 1 : - 1 ]
"and convert it to lowercase, substitute the result for value. call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,","return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )"
"call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.","ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )"
"try,",try :
"call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,","new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )"
num is an integer 0.,num = 0
do nothing.,pass
"do nothing,",pass
"where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '. call the method self.stdout.write, with an argument string ""Rendering %s template files with filenames: %s\n"",","self . stdout . write ( ""Rendering %s template files with "" ""filenames: %s\n"" % ( app_or_project , ', ' . join ( extra_files ) ) )"
"call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.",clear_checkbox_label = ugettext_lazy ( 'Clear' )
"if ',' is contained in second element of args,","if ',' in args [ 1 ] :"
"call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.","source , display_name = self . load_template_source ( template_name , template_dirs )"
"try,",try :
"if secure is true,",if secure :
"if field is not None,",if field is not None :
from django.core.serializers import base into default name space.,from django . core . serializers import base
"if OSError or IOError exceptions were raised,","except ( OSError , IOError ) :"
"call the function get_git_changeset, store the result in git_changeset.",git_changeset = get_git_changeset ( )
"if not,",else :
return input_val.,return input_val
"call the method base.DeserializedObject with arguments obj and m2m_data, return the result.","return base . DeserializedObject ( obj , m2m_data )"
"library set to pylibmc and value_not_found_exception set to pylibmc.NotFound. decorator cached_property,",@ cached_property
"open '/dev/null' file in read mode, substitute the result for si.","si = open ( '/dev/null' , 'r' )"
"if self._wrapped is empty,",if self . _wrapped is empty :
"define the method __init__ with 3 arguments: self, token_type and contents.","def __init__ ( self , token_type , contents ) :"
import module sys.,import sys
"get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.",e . message = self . error_messages [ e . code ]
from django.core.files import File into default name space.,from django . core . files import File
"call the method self.add_prefix with an argument fieldname, substitute it for prefix.",prefix = self . add_prefix ( fieldname )
"get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,","return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )"
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
"define the method enter_command with 3 arguments: self, command and token.","def enter_command ( self , command , token ) :"
"call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.","content = templatize ( src_data , orig_file [ 2 : ] )"
derive the class DebugParser from the Parser base class.,class DebugParser ( Parser ) :
"raise an ViewDoesNotExist exception with an argument string ""Could not import '%s'. View does not exist in module %s."",","raise ViewDoesNotExist ( ""Could not import '%s'. View does not exist in module %s."" % ( lookup_view , mod_name ) )"
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"try,",try :
"call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',","parser . add_option ( '--traceback' , action = 'store_true' , help = 'Raise on exception' )"
"if self.output_transaction is true,",if self . output_transaction :
"if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',",if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
"if not,",else :
"call the function force_text with an argument value, substitute the result for text_value.",text_value = force_text ( value )
"ingeter 0 and integer 0. call the method _time.mktime with an argument tt, substitute the result for stamp.",stamp = _time . mktime ( tt )
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.,raise ValueError ( 'Not a valid Python identifier: %r' % s )
"stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True. if OSError, renamed to e, exception is caught,",except OSError as e :
call the method msg.attach with an argument attachment.,msg . attach ( attachment )
substitute settings.TEMPLATE_STRING_IF_INVALID for current.,current = settings . TEMPLATE_STRING_IF_INVALID
"if args is true,",if args :
_cookie_allows_colon_in_names is boolean False.,_cookie_allows_colon_in_names = False
"raise an TypeError exception with an argument string ""end must be None or a string"".","raise TypeError ( ""end must be None or a string"" )"
"for key and value in result of the function six.iterlists called with an argument,","for key , value in six . iterlists ( self ) :"
"if TypeError or ValueError exceptions are caught,","except ( ValueError , TypeError ) :"
"define the initialization method __init__ with self, table and params as arguments.","def __init__ ( self , table , params ) :"
"call the method path.normpath with an argument expanded_template, substitute it for expanded_template.",expanded_template = path . normpath ( expanded_template )
"return first element of t converted to lowercase and boolean True, as a tuple.","return ( t [ 0 ] . lower ( ) , True )"
"plural set to plural and number set to number, return the result. define the function activate with an argument language.",def activate ( language ) :
"if commands_only is true,",if commands_only :
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.,"from django . core . exceptions import DisallowedHost , ImproperlyConfigured"
"call the method fp.getvalue, return the result.",return fp . getvalue ( )
"call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,",form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
"slice the filename from the previous result as start index to the end, strip it of white spaces from both ends, if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False. define the method _close_files with an argument self.",def _close_files ( self ) :
call the method self._populate.,self . _populate ( )
write a new line to the self.stream file stream.,"self . stream . write ( ""\n"" )"
raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.,raise ValueError ( 'Unknown level: %r' % level )
"if fields is not None,",if fields is not None :
"convert value and arg into a integers, return their sum.",return int ( value ) + int ( arg )
"call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.",errors . extend ( _check_test_runner ( ** kwargs ) )
derive the InMemoryUploadedFile class from the UploadedFile base class.,class InMemoryUploadedFile ( UploadedFile ) :
"try,",try :
"result of the function force_text called with an argument title, and with sublist, append the string to output. increment i by 1.",i += 1
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.,"raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )"
"if filename ends with string "".pyc"" or it ends with "".pyo"",","if filename . endswith ( "".pyc"" ) or filename . endswith ( "".pyo"" ) :"
DEFAULT_MAX_NUM is an integer 1000.,DEFAULT_MAX_NUM = 1000
define the method _prepare_data with 2 arguments: self and data.,"def _prepare_data ( self , data ) :"
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.,"setattr ( Module_six_moves_urllib_parse , attr . name , attr )"
"if self.limit_choices_to object is callable,",if callable ( self . limit_choices_to ) :
substitute the result for self._object_dict. return the value under the pk key of self._object_dict dictionary.,return self . _object_dict . get ( pk )
"define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :"
derive the class URLValidator form the RegexValidator base class.,class URLValidator ( RegexValidator ) :
return boolean False.,return False
define the method __ne__ with self and other as arguments.,"def __ne__ ( self , other ) :"
return parser,return parser
"get the directory name of filename, substitute it for dirname.",dirname = os . path . dirname ( filename )
substitute fail_silently for self.fail_silently.,self . fail_silently = fail_silently
define the function calculate_app_template_dirs.,def calculate_app_template_dirs ( ) :
define the method __html__ with an argument self.,def __html__ ( self ) :
"and elements of token_string from second to second last element wiht the whitespaces striped from the both sides. otherwise if token_string starts with BLOCK_TAG_START,",elif token_string . startswith ( BLOCK_TAG_START ) :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"try,",try :
"call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.",self . can_write = threading . Semaphore ( 0 )
yield one element from the buffer_ iterable.,yield buffer_
"if ValidationError exception is caught,",except ValidationError :
from django.http import QueryDict into default namespace.,from django . http import QueryDict
from django.test.utils import get_runner into default name space.,from django . test . utils import get_runner
self.bad_cookies is an empty set.,self . bad_cookies = set ( )
"if self._dir path doesnt exists,",if not os . path . exists ( self . _dir ) :
"if not,",else :
want_unicode is boolean False.,want_unicode = False
self._read_started is True.,self . _read_started = True
substitute msg for body_msg.,body_msg = msg
append model to model_list.,model_list . append ( model )
"for every migration in migrations_to_squash,",for migration in migrations_to_squash :
"if self.verbosity is greater or equal to integer 1,",if self . verbosity >= 1 :
"call the function smart_text with an argument obj, return the result.",return smart_text ( obj )
"remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,","self . extra_context = kwargs . pop ( 'extra_context' , { } )"
"join statements into a string, separated by newlines, return it.",return '\n' . join ( statements )
"if field.rel.through._meta.auto_created is true,",if field . rel . through . _meta . auto_created :
self.first is boolean True.,self . first = True
"if lang is None,",if lang is None :
"call the function to_locale with an argument lang, substitute the result for locale.",locale = to_locale ( lang )
"if not,",else :
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )"
"evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.",return force_text ( settings . FORCE_SCRIPT_NAME )
daemon_kwargs is an empty dictionary.,daemon_kwargs = { }
"substitute '%s' with title in the string "" [X] %s"", write it to the standard output.","self . stdout . write ( "" [X] %s"" % title )"
define the method __str__ with an argument self.,def __str__ ( self ) :
"dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: ""ipython"" and ""bpython""'. define the method _ipython_pre_011 with an argument self.",def _ipython_pre_011 ( self ) :
"from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,","from django . core . mail . message import ( EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError , forbid_multi_line_headers )"
call the method get_supported_language_variant.cache_clear.,get_supported_language_variant . cache_clear ( )
"call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,","data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( ""pk"" , None ) )"
"define the method pop with 3 arguments: self, key and unpacked list args.","def pop ( self , key , * args ) :"
decorator register with Tags.models and Tags.signals as arguments.,"@ register ( Tags . models , Tags . signals )"
"if OSError exception is caught,",except OSError :
"replace '%s' in string '</%s>' with tag, append the result to out.",out += '</%s>' % tag
define the method id_for_label with an argument self.,def id_for_label ( self ) :
"if language_code is not contained in self._namespace_dict,",if language_code not in self . _namespace_dict :
"if not,",else :
"define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,","def inlineformset_factory ( parent_model , model , form = ModelForm , formset = BaseInlineFormSet , fk_name = None , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) :"
return new_class.,return new_class
define the method writer_enters with an argument self.,def writer_enters ( self ) :
define the function new_method_proxy with an argument func.,def new_method_proxy ( func ) :
substitute value under the unique_for key of form.cleaned_data dictionary for date.,date = form . cleaned_data [ unique_for ]
substitute _iterkeys for keys.,keys = _iterkeys
"get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.","filters = config . get ( 'filters' , EMPTY_DICT )"
"call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.","exp = self . _expire_info . get ( key , - 1 )"
yield d.,yield d
"if field.show_hidden_initial is false,",if not field . show_hidden_initial :
call the method self.full_clean.,self . full_clean ( )
"call the function pickle.load with argument f, substitute the result for exp.",exp = pickle . load ( f )
"join package.__name__ and module_name into a string separated with '.', substitute it for name.","name = ""."" . join ( [ package . __name__ , module_name ] )"
"call the function reraise from the module six, with list of arguments exec_info.",six . reraise ( * exc_info )
define method add_arguments with self class instance and parser as the arguments.,"def add_arguments ( self , parser ) :"
substitute buf_size for self.buf_size.,self . buf_size = buf_size
"get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.","kwargs [ ""initial"" ] = getattr ( self . parent_instance , self . to_field )"
"call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,","return hashlib . pbkdf2_hmac ( digest ( ) . name , password , salt , iterations , dklen )"
close is boolean True.,close = True
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.,"def get_cache ( backend , ** kwargs ) :"
"if s is an instance of six.text_type or Promise,","if isinstance ( s , ( six . text_type , Promise ) ) :"
"TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,","TOKEN_MAPPING = { TOKEN_TEXT : 'Text' , TOKEN_VAR : 'Var' , TOKEN_BLOCK : 'Block' , TOKEN_COMMENT : 'Comment' , }"
"call the function format_html with 2 arguments: string ' for=""{0}""' and self.id_for_label, substitute the result for label_for.","label_for = format_html ( ' for=""{0}""' , self . id_for_label )"
"join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,","fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) ) for dir_ in fixture_dirs ]"
all the method self.create_table with arguments: db and cache._table.,"self . create_table ( db , cache . _table )"
"if j equals to integer -1,",if j == - 1 :
"map elements from args through the function conditional_escape, substitute the result for args_safe.","args_safe = map ( conditional_escape , args )"
"substitute self.widget if the widget is false, otherwise substitute widget for widget.",widget = widget or self . widget
"for every key_value in related,",for key_value in related :
import pylibmc.,import pylibmc
"call the function check_for_migrations with an arguments app_config, connection.","check_for_migrations ( app_config , connection )"
"call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.",label = bf . label_tag ( label ) or ''
substitute v for value under the k-th element of m key of _ dictionary.,_ [ m [ k ] ] = v
"substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.","singular_suffix , plural_suffix = bits [ : 2 ]"
"otherwise if size is less than length of self.buffer,",elif size < len ( self . buffer ) :
"if IOError, substituted to e, exception is caught,",except IOError as e :
"call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.","super ( SortedDict , self ) . __setitem__ ( key , value )"
mem_args is a list containing of first num_args elements of args list.,mem_args = args [ : num_args ]
"if status is True,",if status :
from django.utils.encoding import force_text into default name space.,from django . utils . encoding import force_text
from django.utils.xmlutils import SimplerXMLGenerator into default name space.,from django . utils . xmlutils import SimplerXMLGenerator
serializers is an empty dictionary.,serializers = { }
"call the self.stderr.write method with string "" Failed to install custom SQL for %s.%s model: %s\n"" as argument,","self . stderr . write ( "" Failed to install custom SQL for %s.%s model: %s\n"" % ( app_name , model . _meta . object_name , e ) )"
"if field_type equals a string 'DecimalField',",if field_type == 'DecimalField' :
"if not,",else :
"try,",try :
"if settings.USE_L10N is true,",if settings . USE_L10N :
return self.tag_function.,return self . tag_function
"call the function import_library with an argument taglib_module, substitute the result for lib.",lib = import_library ( taglib_module )
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.,UnlockFileEx = windll . kernel32 . UnlockFileEx
"if name is contained in lib.tags,",if name in lib . tags :
import module warnings.,import warnings
define the function time_format with 2 arguments: value and format_string.,"def time_format ( value , format_string ) :"
define the function wordcount with an argument value.,def wordcount ( value ) :
"replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.",urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
"if new_method is false and old_method is true,",if not new_method and old_method :
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
"call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.",self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
"if not,",else :
"call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.",return datetime . utcnow ( ) . replace ( tzinfo = utc )
"call the method six.iteritems with an argument kwarg, convert the result into a list,","param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]"
"if self.LibraryValueNotFoundException exception is caught,",except self . LibraryValueNotFoundException :
"bring integer 36 to the power of factor, if i is smaller than the result,",if i < 36 ** factor :
do nothing.,pass
consume_next is boolean False.,consume_next = False
"define the method __init__ with 4 arguments: self, takes_context, args and kwargs.","def __init__ ( self , takes_context , args , kwargs ) :"
"split part by '=' character, substitute the result for role and instructions, respectively.","role , instructions = part . split ( '=' )"
internal_use_only is a boolean False.,internal_use_only = False
from django.utils.datastructures import MultiValueDict into default name space.,from django . utils . datastructures import MultiValueDict
"validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END, COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context. from django.template.smartif import IfParser and Literal into default name space.","from django . template . smartif import IfParser , Literal"
"if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST. if Exception exception is caught,",except Exception :
define the function truncatewords_html with 2 arguments value and arg.,"def truncatewords_html ( value , arg ) :"
"unpacked list args and unpacked dictionary kw, return the result. raise an TypeError exception with an argument sting ""Lazy object returned unexpected type."".","raise TypeError ( ""Lazy object returned unexpected type."" )"
output_transaction is boolean True.,output_transaction = True
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.,"class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :"
"if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.","kwargs . setdefault ( 'content_type' , 'application/json' )"
"get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,",get = ( pformat ( GET_override ) if GET_override is not None else pformat ( request . GET ) )
"define the method add_item_elements with 2 arguments, handler self and item.","def add_item_elements ( self , handler , item ) :"
"if value under the 'author_link' key of the item dictionary is not None,",if item [ 'author_link' ] is not None :
close file descriptor s.,s . close ( )
"raise an TemplateSyntaxError exception with an argument string ""expected another tag, found end of string: %s"",","raise TemplateSyntaxError ( ""expected another tag, found "" ""end of string: %s"" % subject )"
return an empty string.,return ''
"for arg in argv list without the first two elements,",for arg in argv [ 2 : ] :
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
decorator function register.filter with an argument is_safe set to boolean True.,@ register . filter ( is_safe = True )
call the function runfastcgi with an argument args.,runfastcgi ( args )
"call the method s.get_data, return the result.",return s . get_data ( )
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"for every dict_ in self.dicts,",for dict_ in self . dicts :
__all__ is a list containing a string 'file_move_safe'.,__all__ = [ 'file_move_safe' ]
raise an exception value.,raise value
counters is a list containing length of handlers number of zeros.,counters = [ 0 ] * len ( handlers )
"otherwise, get the 'alters_data' attribute of current object, if it exists and is true,","elif getattr ( current , 'alters_data' , False ) :"
"if field PY2 of the module six is boolean True,",if six . PY2 :
return obj_pk.,return obj_pk
"if not,",else :
"call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.",field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
"if level is true,",if level :
"for every entry in package_path,",for entry in package_path :
"replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result. define the method is_serious with argument self.",def is_serious ( self ) :
"call the method sys.exc_info, substitute the result without the first element for e and tb.","e , tb = sys . exc_info ( ) [ 1 : ]"
"if _file is not None,",if _file is not None :
define the function _split_statements with an argument content.,def _split_statements ( content ) :
called with an argument item. call the method self.add_item_elements with 2 arguments: handler and item.,"self . add_item_elements ( handler , item )"
"put to into a list, assign it to self.to.",self . to = list ( to )
"read chunk_size bytes from the old_file file, substitute the result for current_chunk.",current_chunk = old_file . read ( chunk_size )
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the function self.to_python with an argument data, substitute the result for data.",data = self . to_python ( data )
"otherwise id change equals to I18N_MODIFIED,",elif change == I18N_MODIFIED :
return the printable representation of the self object converted to a dictionary.,return repr ( dict ( self ) )
"if httponly is true,",if httponly :
"if six.PY3 is true,",if six . PY3 :
"get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.",charset = content_type_extra . get ( 'charset' )
"otherwise if ch equals a string '(',",elif ch == '(' :
"get 'editable' attribute from object f, if it doesnt exists or its true,","if not getattr ( f , 'editable' , False ) :"
module_values is a set created from the elements of sys.modules.values method return value.,module_values = set ( sys . modules . values ( ) )
return self.data.hour.,return self . data . hour
"if language is not contained in _translations,",if language not in _translations :
define the function quote_etag with an argument etag.,def quote_etag ( etag ) :
return None.,return None
define the method read with arguments self and size set to None.,"def read ( self , size = None ) :"
"if tag is contained in self.CDATA_CONTENT_ELEMENTS,",if tag in self . CDATA_CONTENT_ELEMENTS :
"define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.","def date_format ( value , format = None , use_l10n = None ) :"
"and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False. validate_email is an instance of EmailValidator class.",validate_email = EmailValidator ( )
write errors to self.stdout.,self . stdout . write ( errors )
define the method _init_translation_catalog with an argument self.,def _init_translation_catalog ( self ) :
"call the method Model._meta.get_all_field_names, substitute the result for model_fields.",model_fields = Model . _meta . get_all_field_names ( )
define the method encode with self class instance and i as arguments.,"def encode ( self , i ) :"
define the function prefix with 2 arguments bp and func.,"def prefix ( bp , func ) :"
"call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.","ret = fcntl . flock ( _fd ( f ) , flags )"
"try,",try :
call the method self.template_cache.clear.,self . template_cache . clear ( )
"call the function warnings.warn with 3 arguments: string ""cache_choices has been deprecated and will be removed in Django 1.9."",","warnings . warn ( ""cache_choices has been deprecated and will be "" ""removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"
"if obj is instance of models.signals.ModelSignal class,","if isinstance ( obj , models . signals . ModelSignal ) :"
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.,"from django . utils . translation import ugettext_lazy , pgettext_lazy"
define the function pprint with an argument value.,def pprint ( value ) :
raise an TemplateDoesNotExist exception with an argument error_msg.,raise TemplateDoesNotExist ( error_msg )
return self.,return self
"if as_form is true,",if as_form :
import module datetime.,import datetime
"for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.",return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
"call the method timezone.tzname with an argument None, return the result.",return timezone . tzname ( None )
"get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.",self . interactive = options . get ( 'interactive' )
consume_next is boolean True.,consume_next = True
"if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.",cls . _delegate_text = six . text_type in resultclasses
define the function truncatechars with 2 arguments value and arg.,"def truncatechars ( value , arg ) :"
from email.utils import formatdate into default name space.,from email . utils import formatdate
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.,class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
define the method __init__ with arguments self and connection_reset defaulting to boolean False.,"def __init__ ( self , connection_reset = False ) :"
call the method self.event_stream.expandNode with an argument node.,self . event_stream . expandNode ( node )
derive the class SelectDateWidget for the Widget base class.,class SelectDateWidget ( Widget ) :
call the method stream.unget with an argument chunk.,stream . unget ( chunk )
"for every i and word in enumerated iterable words,","for i , word in enumerate ( words ) :"
"try,",try :
substitute arg converted into an integer for length.,length = int ( arg )
"if typed is true,",if typed :
"call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.",link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
"if eather one of settings.USE_I18N or settings.USE_L10N is True,",if settings . USE_I18N or settings . USE_L10N :
return result.,return result
"for every app_label and app_migrations in result of the method changes.items,","for app_label , app_migrations in changes . items ( ) :"
"append the result at the end of string '.', append it all at the end of string cache_key. if settings.USE_TZ is True,",if settings . USE_TZ :
"property decorator,",@ property
internal_use_only is boolean True.,internal_use_only = True
"call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.",message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
"call the function warnings.warn with 3 arguments: string ""django.utils.importlib will be removed in Django 1.9."",","warnings . warn ( ""django.utils.importlib will be removed in Django 1.9."" , RemovedInDjango19Warning , stacklevel = 2 )"
"called with an argument error, for every error in bf.errors, substitute the result for bf_errors. if bf.is_hidden is true,",if bf . is_hidden :
"return an instance of OrderedDict class, created with an argument fields.",return OrderedDict ( fields )
"define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.","def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :"
"property decorator,",@ property
"for every subnode in node,",for subnode in node :
"if field_type equals a string 'BooleanField(',",if field_type == 'BooleanField(' :
"call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.","self . extend_nodelist ( nodelist , compiled_result , token )"
"with lock,",with lock :
"call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode,",return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
substitute x for k and boolean True for v.,"k , v = x , True"
in_tag is boolean False.,in_tag = False
"if arg is an instance of unicode,","if isinstance ( arg , unicode ) :"
return self.,return self
"get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.","filter_name = getattr ( func , '_filter_name' , None )"
substitute registry.tag_exists for tag_exists.,tag_exists = registry . tag_exists
requires_system_checks is boolean False.,requires_system_checks = False
"define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","def render ( self , name , value , attrs = None , choices = ( ) ) :"
"if value is not an instance of list or tuple types,","if not isinstance ( value , ( list , tuple ) ) :"
"string created by concatenating context, CONTEXT_SEPARATOR and plural and number. call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.",result = ungettext ( * msgs_with_ctxt )
"if template starts with a string 'file://',",if template . startswith ( 'file://' ) :
raise an ValueError with an argument string 'ModelForm has no model class specified.'.,raise ValueError ( 'ModelForm has no model class specified.' )
define the method o with an argument self.,def o ( self ) :
"call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,","return datetime . datetime . strptime ( force_str ( value ) , format )"
"token is an instance of Token class, created with 2 arguments: TOKEN_VAR,","token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )"
"get the value under the settings.__module__ key of the sys.modules dictionary,",settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
"usage is a list containing 4 entries: an empty string, string ""Type '%s help <subcommand>' for help on a specific subcommand."",","usage = [ """" , ""Type '%s help <subcommand>' for help on a specific subcommand."" % self . prog_name , """" , ""Available subcommands:"" , ]"
define the method create_variable_node with 2 arguments self and filter_expression.,"def create_variable_node ( self , filter_expression ) :"
"substitute fist and second element of exc_info for exctype and value, respectively.","exctype , value = exc_info [ : 2 ]"
"call the function next_space_index with 2 arguments: subject and i, substitute the result for i.","i = next_space_index ( subject , i )"
"if ValueError exception is caught,",except ValueError :
"otherwise if self._delegate_text is true,",elif self . _delegate_text :
define the function lock with arguments f and flags.,"def lock ( f , flags ) :"
"call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.",fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
call the methof model_dependencies.reverse.,model_dependencies . reverse ( )
"raise an TemplateSyntaxError exception with an argument string ""'regroup' tag takes five arguments"".","raise TemplateSyntaxError ( ""'regroup' tag takes five arguments"" )"
"if OverflowError or ValueError, renamed to exc, exceptions are caught,","except ( OverflowError , ValueError ) as exc :"
return an empty list.,return [ ]
"if form.is_bound is true,",if form . is_bound :
derive the class RegexValidator form the object base class.,class RegexValidator ( object ) :
"if not self.max_length is None. remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,","self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )"
requires_system_checks is boolean False.,requires_system_checks = False
"define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.","def serialize ( self , queryset , ** options ) :"
filemsg is an empty string.,filemsg = ''
define the method _list_cache_files with argument self.,def _list_cache_files ( self ) :
"try,",try :
substitute inotify_code_changed for fn.,fn = inotify_code_changed
"dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'. define the method handle with arguments self and unpacked dictionary options.","def handle ( self , ** options ) :"
"if dt.year is greater than or equal to integer 1900,",if dt . year >= 1900 :
"return boolean False,",return False
all_locales is an empty string.,all_locales = [ ]
"for every message in email_messages,",for message in email_messages :
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.,"namespaces [ pattern . namespace ] = ( p_pattern , pattern )"
"if value is an instance of Field class,","if isinstance ( value , Field ) :"
define the method resolve_variable with 2 arguments: path and context.,"def resolve_variable ( path , context ) :"
"call the function warnings.warn with 2 arguments: string ""django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. ""","warnings . warn ( ""django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "" ""Use django.utils.timezone.get_default_timezone instead."" , RemovedInDjango19Warning )"
"if self.render_value is false,",if not self . render_value :
substitute name for self.name.,self . name = name
"try,",try :
"get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,","_dec . _decorated_function = getattr ( func , '_decorated_function' , func )"
return ip_str.,return ip_str
"call the method wrap with 2 arguments, value and arg converted into a integer, return the result.","return wrap ( value , int ( arg ) )"
"define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.","def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :"
return the result. decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,"@ register . filter ( is_safe = True , needs_autoescape = True )"
"for every app in app_labels. call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.","changes = autodetector . arrange_for_graph ( changes , loader . graph )"
"call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.","msgs , errors , status = popen_wrapper ( args )"
return an empty string.,return ''
define the method strftime with 2 arguments: self and fmt.,"def strftime ( self , fmt ) :"
"if value,",if value :
"call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.","return update_wrapper ( wrapper , user_function )"
"python_2_unicode_compatible decorator,",@ python_2_unicode_compatible
do nothing.,pass
"try,",try :
"get attr attribute from the _module object, substitute it for value.","value = getattr ( _module , attr )"
define the method id_for_label with an argument self.,def id_for_label ( self ) :
"define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.","def __call__ ( self , * args , ** kwargs ) :"
if self.verbosity is greater or equal to integer 1.,if self . verbosity >= 1 :
"call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.","remove_tags = allow_lazy ( remove_tags , six . text_type )"
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.,"POST = property ( _get_post , _set_post )"
"call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.","script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )"
"get the value under the self.using key of the connections dictionary, substitute it for connection.",connection = connections [ self . using ]
"if exclude is true and f.name is contained in exclude,",if exclude and f . name in exclude :
"round up radio, convert it to an integer and the convert it to a string and substitute the result for result.",result = str ( int ( round ( ratio ) ) )
"if NameError exception is caught,",except NameError :
"split string pks by ',', substitute the result for primary_keys.","primary_keys = pks . split ( ',' )"
delete name attribute from self._wrapped object.,"delattr ( self . _wrapped , name )"
"get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.","self . exclude = getattr ( options , 'exclude' , None )"
msgmerge_options is an list with elements: strings '-q' and '--previous'.,"msgmerge_options = [ '-q' , '--previous' ]"
"decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,","@ wraps ( view_func , assigned = available_attrs ( view_func ) )"
skip this loop execution.,continue
"and _, respectively. if file_ is true,",if file_ :
"join tokens elements into a string, substitute it for message.",message = '' . join ( tokens )
"return a string ""<Variable Node: %s>"", substitute '%s' with self.filter_expression.","return ""<Variable Node: %s>"" % self . filter_expression"
call the function resolve with arguments path and urlconf.,"resolve ( path , urlconf )"
"if ValueError exception is caught,",except ValueError :
call the method self.can_write.acquire.,self . can_write . acquire ( )
return self._queryset.,return self . _queryset
"call the function signed_value with an argument value, substitute the result for signed_value.",signed_value = force_str ( signed_value )
"return length of value,",return len ( value )
return wrapper.,return wrapper
define the method clear with an argument self.,def clear ( self ) :
"for every lookup and arg in args,","for lookup , arg in args :"
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,",format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
update object_data dictionary with initial.,object_data . update ( initial )
define the get_path_info function with environ as the argument.,def get_path_info ( environ ) :
from django.utils.html import format_html into default name space.,from django . utils . html import format_html
return nodes.,return nodes
substitute empty bytes string for self.buffer.,self . buffer = b''
and RemovedInDjango19Warning. from django.conf import settings into default namespace.,from django . conf import settings
"decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.",r = dklen - ( l - 1 ) * hlen
"divide message by error.params, substitute the residue of the division for message.",message %= error . params
substitute source for e.django_template_source.,e . django_template_source = source
substitute bytes for binary_type.,binary_type = bytes
"if replaces filed of graph.nodes element at the plan_node index is true,",if graph . nodes [ plan_node ] . replaces :
"call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.","final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )"
"call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.",chunk = self . _read_limited ( size - len ( self . buffer ) )
"split into two parts token.contents by None, substitute the parts for _ and rest, respectively.","_ , rest = token . contents . split ( None , 1 )"
"if not substitute field.initial for initial_value. if initial_value is an callable object,",if callable ( initial_value ) :
"if settings.configured is false,",if not settings . configured :
"call the method blankout with 2 arguments: part and 'P', write the result to out.","out . write ( blankout ( part , 'P' ) )"
"if NotImplementedError exception is caught,",except NotImplementedError :
"call the method self.error_class with an argument list containing results of the function conditional_escape,",bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
"if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,",if ( middle . endswith ( closing ) and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
"if daemonize is true,",if daemonize :
define the function gettext_noop with an argument message.,def gettext_noop ( message ) :
"property decorator,",@ property
"""Use django.utils.timezone.get_default_timezone instead."" and RemovedInDjango19Warning. call the method tzinfo.__init__ with an argument self.",tzinfo . __init__ ( self )
"for every cnt and digit in enumerated list int_part with reversed ordering of elements,","for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :"
widget.input_type is a string 'hidden'.,widget . input_type = 'hidden'
"call the method add_arguments from the base class of the Command class, with an argument parser.","super ( Command , self ) . add_arguments ( parser )"
from django.utils.html import strip_spaces_between_tags.,from django . utils . html import strip_spaces_between_tags
call the method connection.client.runshell.,connection . client . runshell ( )
"for every i and ext in enumerated iterable ext_list,","for i , ext in enumerate ( ext_list ) :"
return result.,return result
from django.core.management.base import BaseCommand into default name space.,from django . core . management . base import BaseCommand
define the method c with an argument self.,def c ( self ) :
"if self.warning is an instance of Exception class,","if isinstance ( self . warning , Exception ) :"
"convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.",self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
"if response is None,",if response is None :
derive the class classonlymethod from the classmethod base class.,class classonlymethod ( classmethod ) :
define the method G with an argument self.,def G ( self ) :
"if InvalidTemplateLibrary, renamed to e, exception is caught,",except InvalidTemplateLibrary as e :
substitute auto_id for self.auto_id.,self . auto_id = auto_id
"define the method _find_boundary with an arguments self, data and eof set to boolean False.","def _find_boundary ( self , data , eof = False ) :"
"if second_item is an empty list,",if second_item == [ ] :
from django.core.files import uploadhandler into default name space.,from django . core . files import uploadhandler
"substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir. call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,","objects = serializers . deserialize ( ser_fmt , fixture , using = self . using , ignorenonexistent = self . ignore )"
"for every name in namelist,",for name in namelist :
"try,",try :
do nothing.,pass
"call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.",qs = pk . rel . to . _default_manager . get_queryset ( )
"call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.","self . key_prefix = params . get ( 'KEY_PREFIX' , '' )"
"property decorator,",@ property
outut is an empty list.,output = [ ]
"compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.","IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )"
increment key by kwd_mark.,key += kwd_mark
"for every message in messages,",for message in messages :
return self.cleaned_data.,return self . cleaned_data
"if not,",else :
"if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',","if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :"
"try,",try :
"define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","def __exit__ ( self , * args , ** kwargs ) :"
"if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,",if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
return result.,return result
return self.file.closed.,return self . file . closed
"call the middleware_method with the request as an argument, substitute the result for response.",response = middleware_method ( request )
"_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,","_PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal , datetime . datetime , datetime . date , datetime . time )"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","key = self . make_key ( key , version = version )"
"call the method questioner.ask_merge with an argument app_label, if it evaluates to true,",if questioner . ask_merge ( app_label ) :
"if name is None,",if name is None :
set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.,"setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )"
substitute render_value for self.render_value.,self . render_value = render_value
return output.,return output
"call the self._create_message method with argument msg, substitute it for msg.",msg = self . _create_message ( msg )
"try,",try :
"if response is None,",if response is None :
define the method __init__ with an argument self.,def __init__ ( self ) :
self.choice_cache is None.,self . choice_cache = None
"define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.",writelines = property ( lambda self : self . file . writelines )
define the function default_if_none with 2 arguments value and arg.,"def default_if_none ( value , arg ) :"
"define the method __new__ with 4 arguments mcs, name, bases and attrs.","def __new__ ( mcs , name , bases , attrs ) :"
define the method clean with an argument self.,def clean ( self ) :
options_list is an empty tuple.,option_list = ( )
"raise an self.error exception with 2 arguments: token and string ""Invalid block tag: '%s', expected %s"",","raise self . error ( token , ""Invalid block tag: '%s', expected %s"" % ( command , get_text_list ( [ ""'%s'"" % p for p in parse_until ] ) ) )"
flush zfile stream buffer.,zfile . flush ( )
call the method self.tag with 2 arguments: function_name and compile_func.,"self . tag ( function_name , compile_func )"
"call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.","path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )"
"call the method self.to_python with an argument value, substitute it for value.",value = self . to_python ( value )
substitute regex for self._regex.,self . _regex = regex
"call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.","return self . value . resolve ( context , ignore_failures = True )"
"if age is greater than max_age,",if age > max_age :
"if escaped is true,",if escaped :
while start is lesser than end.,while start < end :
from django.utils.six.moves import socketserver into default name space.,from django . utils . six . moves import socketserver
"substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively. if not,",else :
data is an empty dictionary.,data = { }
"call the function new_method_proxy with an argument len, substitute the result for __len__.",__len__ = new_method_proxy ( len )
"call the method self.get_parent with an argument context, substitute the result for compiled_parent.",compiled_parent = self . get_parent ( context )
"if change equals to FILE_MODIFIED,",if change == FILE_MODIFIED :
"if not,",else :
return the_path.,return the_path
"call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.",subcommands = list ( get_commands ( ) ) + [ 'help' ]
"for every key in self,",for key in self :
"if sum of the top and self.orphans is greater or equal to self.count,",if top + self . orphans >= self . count :
"for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.",return '' . join ( force_text ( s ) for s in strings )
"slice chunk list to get the last rollback elements, if the new list is not empty,",if not chunk [ : - rollback ] :
"create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,","candidate_subs = dict ( zip ( prefix_args + params , text_args ) )"
define the method __getitem__ with 2 arguments: self and key.,"def __getitem__ ( self , key ) :"
self.content_type_extra is None.,self . content_type_extra = None
from django.conf import settings into default name space.,from django . conf import settings
define the function _import_module with an argument name.,def _import_module ( name ) :
"call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.",self . xml . characters ( field . value_to_string ( obj ) )
define the method unclosed_block_tag with 2 arguments: self and parse_until.,"def unclosed_block_tag ( self , parse_until ) :"
"define the method __new__ with 4 arguments: mcs, name, bases and attrs.","def __new__ ( mcs , name , bases , attrs ) :"
"ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.",top_dir = os . path . abspath ( path . expanduser ( target ) )
"for every value in data. if data_set is not equal to initial_set return boolean True, otherwise return boolean False.",return data_set != initial_set
define the method validate_unique with an argument self.,def validate_unique ( self ) :
"prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False, instance set to None. substitute self._meta for opts.",opts = self . _meta
substitute save_m2m for self.save_m2m.,self . save_m2m = save_m2m
"call the function timesince with an argument value, return the result.",return timesince ( value )
"if AppRegistryNotReady exception is caught,",except AppRegistryNotReady :
"if not,",else :
"if _ipv6 is true,",if _ipv6 :
"define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.","def __init__ ( self , name , value , attrs , choice , index ) :"
substitute True for self.close_called.,self . close_called = True
"if field is contained in self.errors,",if field in self . errors :
"convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.",content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
"if data is bound to the same object as FILE_INPUT_CONTRADICTION,",if data is FILE_INPUT_CONTRADICTION :
"increment i by integer 1,",i += 1
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.","template , display_name = loader ( name , dirs )"
define the method run_from_argv with arguments self and argv.,"def run_from_argv ( self , argv ) :"
derive the class RegexURLResolver with LocaleRegexProvider as base class.,class RegexURLResolver ( LocaleRegexProvider ) :
call the method self._delete with argument key.,self . _delete ( key )
"if value under the 'author_email' key of the self.feed dictionary is not None,",if self . feed [ 'author_email' ] is not None :
merge_migrations is an empty list.,merge_migrations = [ ]
"for every handler in settings.FILE_UPLOAD_HANDLERS,","self . _upload_handlers = [ uploadhandler . load_handler ( handler , self ) for handler in settings . FILE_UPLOAD_HANDLERS ]"
fail_message is a string changed'.,fail_message = 'changed'
"raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.","raise DjangoUnicodeDecodeError ( s , * e . args )"
"if UnicodeEncodeError exception is caught,",except UnicodeEncodeError :
"call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.",qs = queryset . filter ( ** { self . fk . name : self . instance } )
"for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',","name_str = ""; "" . join ( ""%s in %s"" % ( "", "" . join ( names ) , app ) for app , names in conflicts . items ( ) )"
"call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,","for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :"
import module django.,import django
append name to exclude.,exclude . append ( name )
"append migration.name to string ' - ', write it to self.stdout stream.","self . stdout . write ( "" - %s"" % migration . name )"
"tablename and return value of the function force_text called with an argument e, respectively. for every statement in index_output,",for statement in index_output :
"add self.buffer and self._read_limited method return value together, store it in result.",result = self . buffer + self . _read_limited ( )
"call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.","choices = list ( chain ( self . choices , choices ) )"
"classmethod decorator,",@ classmethod
"get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.",host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
"for every f and e in list of tuples of self dictionary key, pair entries. define the method as_json with 2 argumens self and escape_html set to boolean False.","def as_json ( self , escape_html = False ) :"
define the function select_template with 2 arguments: template_name_list and dirs set to None.,"def select_template ( template_name_list , dirs = None ) :"
"otherwise if k equals a string 'bg',",elif k == 'bg' :
"call the method token.contents.split, substitute the result for args.",args = token . contents . split ( )
"put bcc into a list, assign it to self.bcc.",self . bcc = list ( bcc )
"'Enter a whole number.' for 'invalid'. define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.","def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :"
"strip whitespaces from both sides of the value, substitute it for value.",value = value . strip ( )
define the method __enter__ with an argument self.,def __enter__ ( self ) :
"if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',","if value != value or value == Decimal ( ""Inf"" ) or value == Decimal ( ""-Inf"" ) :"
define the method serialize_headers with an argument self.,def serialize_headers ( self ) :
"if self.setting is true,",if self . setting :
"encoding.setter decorator,",@ encoding . setter
vary_on is an empty tuple.,vary_on = ( )
from django.core.management.color import color_style into default name space.,from django . core . management . color import color_style
"if not,",else :
"get name attribute from the instance object, call it with an argument value and return the result.","return getattr ( instance , name ) ( value )"
substitute attrs for self.attrs.,self . attrs = attrs
define the function pgettext with 2 arguments: context and message.,"def pgettext ( context , message ) :"
"for every handler in handlers,",for handler in handlers :
"separated by newline, use it as an argument for the call to the function mark_safe, return the result. define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,","def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False , can_delete = False , max_num = None , validate_max = False , min_num = None , validate_min = False ) :"
"return a string ""<DjangoTranslation lang:%s>"", where '%s' is replaced with self.__language.","return ""<DjangoTranslation lang:%s>"" % self . __language"
"if not,",else :
import module errno.,import errno
call the method check_for_migrations with arguments: app_config and connection.,"check_for_migrations ( app_config , connection )"
"if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,","stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )"
"otherwise if i is smaller than list_length decremented by one,",elif i < list_length - 1 :
"call the method self.next_token, substitute the result for self.current_token.",self . current_token = self . next_token ( )
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.,"from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile"
use the global variables _mtimes and _win in this function.,"global _mtimes , _win"
value under the app_config key of the app_list is None.,app_list [ app_config ] = None
nodes is an empty list.,nodes = [ ]
return msg.,return msg
raise CommandError exception with msg as argument.,raise CommandError ( msg )
"use the result as the argument for the function call to the pickle.loads, return the result. define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :"
consume_next is boolean True.,consume_next = True
"call the method self.filter_expression.resolve with an argument context, substitute the result for output.",output = self . filter_expression . resolve ( context )
from django.utils.safestring import SafeData and EscapeData into default name space.,"from django . utils . safestring import SafeData , EscapeData"
"if key_prefix is None,",if key_prefix is None :
"property decorator,",@ property
define the function unregister_serializer with an argument format.,def unregister_serializer ( format ) :
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.,_dec . __name__ = 'method_decorator(%s)' % decorator . __name__
return boolean False.,return False
define the method __init__ with 2 arguments: self and value.,"def __init__ ( self , value ) :"
"call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.",delta = delta + datetime . timedelta ( seconds = 1 )
self.app_label is a string 'django_cache'.,self . app_label = 'django_cache'
"yield string 'from %s import models' % self.db_module as the result, where ""%s"" is replaced with self.db_module.",yield 'from %s import models' % self . db_module
"for every p in parts without the first element,",for p in parts [ 1 : ] :
"call the function _ with an argument string 'p.m.', return the result.",return _ ( 'p.m.' )
substitute compressed for data.,data = compressed
"call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.",return os . path . getsize ( self . path ( name ) )
raise an exception.,raise
"return an instance of DebugVariableNode, created with an argument contents.",return DebugVariableNode ( contents )
FILE_MODIFIED is integer 1.,FILE_MODIFIED = 1
"get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.",return MONTHS_3 [ self . data . month ] . title ( )
self.content_type is None.,self . content_type = None
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.,self . error_dict [ field ] = messages . error_list
from django.db.migrations.executor import MigrationExecutor into default name space.,from django . db . migrations . executor import MigrationExecutor
derive the class InvalidPage from the Exception base class.,class InvalidPage ( Exception ) :
from django.conf import settings into default namespace.,from django . conf import settings
"call the method self.nodelist.render with an argument context, substitute the result for result.",result = self . nodelist . render ( context )
define the function safe with an argument value.,def safe ( value ) :
"for every chunk in field_stream,",for chunk in field_stream :
"error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.",error = { field or NON_FIELD_ERRORS : error . error_list }
"get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.","M = self . get ( key , Morsel ( ) )"
CRITICAL is integer 50.,CRITICAL = 50
"try,",try :
"call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,","field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )"
"call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',","parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] , help = 'Locale(s) to process (e.g. de_AT). Default is to process all. ' 'Can be used multiple times.' )"
"return an instance of BoundField class, created with arguments self, field and name.","return BoundField ( self , field , name )"
define the method nodelist with an argument self.,def nodelist ( self ) :
define the method get_full_path with an argument self.,def get_full_path ( self ) :
delete the value under the key key of self._expire_info dictionary.,del self . _expire_info [ key ]
"for every app_name and namespace_list in pattern.app_dict.items method return value,","for app_name , namespace_list in pattern . app_dict . items ( ) :"
from django.core.files import locks into default name space.,from django . core . files import locks
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field)s, which must be unique."",","return ugettext ( ""Please correct the duplicate data for %(field)s, "" ""which must be unique."" ) % { ""field"" : get_text_list ( unique_check , six . text_type ( _ ( ""and"" ) ) ) , }"
"if exclude is true and f.name is contained in exclude,",if exclude and f . name in exclude :
"string ""memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead."", RemovedInDjango19Warning and stacklevel set to integer 2. decorator function wraps with an argument func.",@ wraps ( func )
"if matches is false,",if not matches :
"if label_suffix is None,",if label_suffix is None :
"substitute the result for content. token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.","token = Token ( TOKEN_COMMENT , content )"
call the method message.message.,message . message ( )
"if cls is false,",if not cls :
remove name from existing.,existing . remove ( name )
substitute i for value under the 'counter0' key of the loop_dict dictionary.,loop_dict [ 'counter0' ] = i
"yield string ' %s', where '%s' is replaced with field_desc.",yield ' %s' % field_desc
"call the function cache_get with 2 arguments: key and root, substitute the result for result.","result = cache_get ( key , root )"
return commands.,return commands
"return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.","return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )"
"call the message_from_string function with an argument content, substitute the result for content.",content = message_from_string ( content )
"call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,",self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
"remove first element from remaining_bits, substitute the result for option.",option = remaining_bits . pop ( 0 )
derive the class TimestampSigner from the Signer base class.,class TimestampSigner ( Signer ) :
substitute v for value under the k converted to lower case key of options dictionary.,options [ k . lower ( ) ] = v
"if StandardError, renamed to e, exception is caught,",except StandardError as e :
yield k.,yield k
return nodelist.,return nodelist
skip this loop iteration.,continue
"call the function normalize_newlines with an argument value, substitute the result for value.",value = normalize_newlines ( value )
"call the method self._coerce with an argument data, substitute the result for data.",data = self . _coerce ( data )
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","handler . addQuickElement ( ""link"" , """" , { ""href"" : item [ 'link' ] , ""rel"" : ""alternate"" } )"
"get 'exec' attribute from the moves.builtins object, substitute it for exec_.","exec_ = getattr ( moves . builtins , ""exec"" )"
"return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,","return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )"
"call the method cursor.execute with string ""DELETE FROM %s WHERE cache_key = %%s"" as argument,","cursor . execute ( ""DELETE FROM %s WHERE cache_key = %%s"" % table , [ key ] )"
"if not,",else :
"if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.","return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )"
import module os.,import os
"call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.",nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
"if not,",else :
call the function _load_serializers.,_load_serializers ( )
"yield string ""# into your database."" as the result.","yield ""# into your database."""
escaped is boolean False.,escaped = False
"call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.","urlize = allow_lazy ( urlize , six . text_type )"
"for every x in argset,",for x in argset :
"if is_compressed is true,",if is_compressed :
"call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.",ip_str = _explode_shorthand_ip_string ( ip_str )
increment i-th element of counters by chunk_length.,counters [ i ] += chunk_length
convert candidate to a string.,candidate = str ( candidate )
"call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,","if not router . allow_migrate ( database , cache . cache_model_class ) :"
"return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.","return property ( fget , fset , fdel , doc )"
"if AttributeError exception is caught,",except AttributeError :
"return an empty string,",return ''
"fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.",fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
"call the function escape with an argument word, substitute the result for i-th element of words.",words [ i ] = escape ( word )
"if not,",else :
"get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.","return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )"
"if _file is None,",if _file is None :
"raise an ValueError exception with string ""Key '%s' not found"" as argument, substitute '%s' with key converted into a string.","raise ValueError ( ""Key '%s' not found"" % key )"
"if not,",else :
"string 'ascii' and errors set to a string 'replace', return the result. define the method render with 2 arguments: self and context.","def render ( self , context ) :"
"substitute parts, without the first element, for path.",path = parts [ 1 : ]
"if length of args is not equal to integer 2,",if len ( args ) != 2 :
call the method translation.activate with an argument string 'en-us'.,translation . activate ( 'en-us' )
"if app equals a string 'django.core',",if app == 'django.core' :
"from .. import Warning, register and Tags into default name space.","from . . import Warning , register , Tags"
return an empty string.,"return """""
"decrement by length of password, create bytes string with previous result number of characters '\x00',",password += b'\x00' * ( inner . block_size - len ( password ) )
"all the method command.create_parser with arguments: empty and name, substitute the result for parser.","parser = command . create_parser ( '' , name )"
define the method _parse_header with an argument line.,def _parse_header ( line ) :
"if not,",else :
do nothing.,pass
define the function parse_accept_lang_header with an argument lang_string.,def parse_accept_lang_header ( lang_string ) :
"if length of self.backout is greater than zero,",if not len ( self . backout ) :
define the method render with an argument self.,def render ( self ) :
"and re.IGNORECASE, substitute the result for domain_regex. call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.","literal_regex = re . compile ( r'\[([A-f0-9:\.]+)\]$' , re . IGNORECASE )"
and third element of result of the function sys.exc_info. define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..,"def import_by_path ( dotted_path , error_prefix = '' ) :"
closed is a property object with _get_closed as a getter method.,closed = property ( _get_closed )
substitute use_tz for self.use_tz.,self . use_tz = use_tz
"strip whitespaces from both sides of the value, return the result.",return value . strip ( )
from django.utils import six into default name space.,from django . utils import six
"sum value and arg, return the result.",return value + arg
"return an instance of SafeBytes, created with an argument data.",return SafeBytes ( data )
result is an empty list.,result = [ ]
"call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.",data = data . replace ( microsecond = 0 )
from argparse import ArgumentParser into default name space.,from argparse import ArgumentParser
from optparse import OptionParser into default name space.,from optparse import OptionParser
from django.utils import six into default name space.,from django . utils import six
import module collections.,import collections
"raise an Exception exception with an argument string ""This %s instance cannot tell its position"",","raise Exception ( ""This %s instance cannot tell its position"" % self . __class__ . __name__ )"
"if not,",else :
return the length of self.forms.,return len ( self . forms )
"if AttributeError exception is caught,",except AttributeError :
"for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,",etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
substitute self.field.widget for widget.,widget = self . field . widget
"if not,",else :
define the method deleted_forms with an argument self.,def deleted_forms ( self ) :
"acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.","acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )"
define the method _set_choices with arguments self and value.,"def _set_choices ( self , value ) :"
substitute value for value under the self.variable_name key of the context dictionary.,context [ self . variable_name ] = value
self.tags is an empty dictionary.,self . tags = { }
"return tuple, consisting of first element of t converted to lowercase and second element of t.","return t [ 0 ] . lower ( ) , t [ 1 ]"
from io import BytesIO into default name space.,from io import BytesIO
do nothing.,pass
"if data is not an instance of basestring,","if not isinstance ( data , basestring ) :"
derive the class DefaultStorage from the LazyObject base class.,class DefaultStorage ( LazyObject ) :
"call the method self.is_valid, if it evaluates to false,",if not self . is_valid ( ) :
"if value is an instance of list type,","if isinstance ( value , list ) :"
httpd.daemon_threads is boolean True.,httpd . daemon_threads = True
"if cache_timeout is None,",if cache_timeout is None :
"if rel_model has an 'natural_key' attribute and rel_model is not equal to model,","if hasattr ( rel_model , 'natural_key' ) and rel_model != model :"
"if self.var is an instance of Variable class,","if isinstance ( self . var , Variable ) :"
"if length of bits equals integer 2,",if len ( bits ) == 2 :
append list containing string '--no-wrap' to self.msgmerge_options,self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
"for f in sorted list of the files in the self.path directory,",for f in sorted ( os . listdir ( self . path ) ) :
define the function addslashes with an argument value.,def addslashes ( value ) :
do nothing.,pass
"extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.","kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )"
substitute filter_expression for self.filter_expression.,self . filter_expression = filter_expression
open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.,"self . stream = open ( self . _get_filename ( ) , 'ab' )"
"call the function vars with an argument options, substitute the result for cmd_options.",cmd_options = vars ( options )
from __future__ import unicode_literals into default name space.,from __future__ import unicode_literals
"property decorator,",@ property
"if model_list is None,",if model_list is None :
substitute the result for the value under the Model._meta.pk.attname key of data dictionary. m2m_data is an empty dictionary.,m2m_data = { }
"call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,","w = self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , i )"
"call the method self.render, return the result.",return self . render ( )
"substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,","logger . error ( 'Internal Server Error: %s' , request . path , exc_info = exc_info , extra = { 'status_code' : 500 , 'request' : request } )"
"if self.takes_context is true,",if self . takes_context :
"if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,",if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
import module sys.,import sys
"if self.timezone is true,",if not self . timezone :
"define the function join with 3 arguments: value, arg and autoescape set to None.","def join ( value , arg , autoescape = None ) :"
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.,_tc . load ( str ( 'foo:bar=1' ) )
"if ValidationError, renamed to e, exception is caught,",except ValidationError as e :
define the method temporary_file_path with argument self.,def temporary_file_path ( self ) :
common_ancestor is None.,common_ancestor = None
call the method self._post_clean.,self . _post_clean ( )
"if error is an instance of ValidationError,","if isinstance ( error , ValidationError ) :"
"substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key,","warnings . warn ( 'Cache key contains characters that will cause ' 'errors if used with memcached: %r' % key , CacheKeyWarning )"
define the function sort_dependencies with an argument app_list.,def sort_dependencies ( app_list ) :
"if filters is true,",if filters :
if decimal_pos is not None,if decimal_pos is not None :
"call the method connection.close,",connection . close ( )
return empty bytes string.,return b''
"call the method block.nodelist.render with an argument context, substitute the result for result.",result = block . nodelist . render ( context )
"define the method __init__ with 3 arguments: self, template_string and origin.","def __init__ ( self , template_string , origin ) :"
derive the class MaxLengthValidator form the BaseValidator base class.,class MaxLengthValidator ( BaseValidator ) :
"call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,","RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )"
"call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.",return avoid_wrapping ( ugettext ( '0 minutes' ) )
append contents to singular.,singular . append ( contents )
define the method _add_installed_apps_translations with an argument self.,def _add_installed_apps_translations ( self ) :
"with the argument view, store the result in the view. return view",return view
deps is an empty list.,deps = [ ]
"skip this loop iteration,",continue
"call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,","output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )"
append val to self.vals.,self . vals . append ( val )
derive the class CacheClass from the DummyCache base class.,class CacheClass ( DummyCache ) :
return s.,return s
"if cls._delegate_text is true,",if cls . _delegate_text :
"substitute '%s' from string ""<%s: %s (%s)>"" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.","return force_str ( ""<%s: %s (%s)>"" % ( self . __class__ . __name__ , self . name , self . content_type ) )"
"if file filename exists,",if os . path . exists ( filename ) :
"for statements is sql,",for statement in sql :
substitute self.lineno for token.lineno.,token . lineno = self . lineno
substitute messages for self.error_messages.,self . error_messages = messages
substitute field.rel.to with rel_model.,rel_model = field . rel . to
"get the unicode representation of result of the method match.group called with an integer 1, format with in a string ""\\u%04x"",","return ""\\u%04x"" % ord ( match . group ( 1 ) )"
call the method self._archive.close.,self . _archive . close ( )
"call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.",parent_name = parser . compile_filter ( bits [ 1 ] )
update self.__dict__ dictionary with obj_dict.,self . __dict__ . update ( obj_dict )
define the method g with an argument self.,def g ( self ) :
return an empty string.,return ''
append list containing string '--no-wrap' to self.xgettext_options.,self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
"if length of app_labels is equal to integer 1,",if len ( app_labels ) == 1 :
from django.conf import settings into default name space.,from django . conf import settings
"format string '&#%s;' with name, append it to self.fed.",self . fed . append ( '&#%s;' % name )
"call the function time.time, substitute the result for timeval.",timeval = time . time ( )
"convert fist p elements of language to lowercase, append '_' to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
"'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'. derive the class UploadFileException from the Exception base class.",class UploadFileException ( Exception ) :
bad_app_labels is an empty set.,bad_app_labels = set ( )
from datetime import datetime into default name space.,from datetime import datetime
"call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.",ip_str = _sanitize_ipv4_mapping ( ip_str )
"for every shell in available_shells,",for shell in available_shells :
substitute settings.ROOT_URLCONF for urlconf.,urlconf = settings . ROOT_URLCONF
define the method add_arguments with self and parser as arguments.,"def add_arguments ( self , parser ) :"
"try,",try :
"get the value under the 'database' key of the options dictionary, substitute the result for database.",using = options . get ( 'database' )
"append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.",args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
if s is an instance of an object six.memoryview.,"if isinstance ( s , six . memoryview ) :"
substitute args for self.args.,self . args = args
call the method self.endChannelElement with an argument handler.,self . endChannelElement ( handler )
"call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.","result . widget = copy . deepcopy ( self . widget , memo )"
"call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.",return t . render ( Context ( dictionary ) )
request_finished is a instance of a Signal class.,request_finished = Signal ( )
call the method result.setlist with the arguments: key and value.,"result . setlist ( key , value )"
raise the exception.,raise
"define show_migration_list with self class instance, connection and app_names set to None, as arguments.","def show_migration_list ( self , connection , app_names = None ) :"
"string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively. derive the class Resolver404 with Http404 as base class.",class Resolver404 ( Http404 ) :
break from the loop execution.,break
"call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.","yield base . DeserializedObject ( obj , m2m_data )"
substitute instance for self.instance.,self . instance = instance
"if last element of host equals character ']',",if host [ - 1 ] == ']' :
"decorator stringfilter,",@ stringfilter
define the method clean with 2 arguments self and value.,"def clean ( self , value ) :"
define the function debug with an argument request.,def debug ( request ) :
derive the class SubWidget from the object base class.,class SubWidget ( object ) :
"match the rawdata from the position k, with attrfind pattern, assign the result to the m.","m = _html_parser . attrfind . match ( rawdata , k )"
"if PY3 is true,",if PY3 :
"remove the first element of value under the name key of self.blocks dictionary, return it.",return self . blocks [ name ] . pop ( )
return instance.,return instance
"try,",try :
field_value is None.,field_value = None
"created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget. call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.","super ( BaseModelFormSet , self ) . add_fields ( form , index )"
return msg.,return msg
"if ext is true,",if ext :
"for every slots_var in slots,",for slots_var in slots :
"define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,","def clean_ipv6_address ( ip_str , unpack_ipv4 = False , error_message = _ ( ""This is not a valid IPv6 address."" ) ) :"
define the method __iter__ with an argument self.,def __iter__ ( self ) :
"integer 0 and integer 0. try,",try :
"if Resolver404, renamed to e, exception is caught,",except Resolver404 as e :
define the function translation with an argument language.,def translation ( language ) :
"call the method self.open, substitute the result for the new_conn_created.",new_conn_created = self . open ( )
define the method initial_form_count with an argument self.,def initial_form_count ( self ) :
define the method render with 2 arguments: self and context.,"def render ( self , context ) :"
define the function find_template with 2: template_name and dirs set to None.,"def find_template ( name , dirs = None ) :"
"call the method dot_re.sub with 2 arguments: char and src, return the result.","return dot_re . sub ( char , src )"
"find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,",cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
"call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.","indexes = connection . introspection . get_indexes ( cursor , table_name )"
"call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.",context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( )
"get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.",show_traceback = options . get ( 'traceback' )
self._max_entries is integer 300.,self . _max_entries = 300
"instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.","return TimestampSigner ( key , salt = salt ) . sign ( base64d )"
"if TypeError exception is caught,",except TypeError :
"""apps registry is ready. Check that you don't make non-lazy gettext calls at import time."". for every app_config in app_configs,",for app_config in app_configs :
"if attrs is not None,",if attrs is not None :
where '%s' is replaced with result of the method self.current_token.display. return retval.,return retval
define the method message with argument self.,def message ( self ) :
"join elements of the output into a string, separated by newlies, return the string.",return '\n' . join ( output )
"a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE, and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE. substitute DARK_PALETTE for DEFAULT_PALETTE.",DEFAULT_PALETTE = DARK_PALETTE
"dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'. call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',","parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True , help = 'Tells Django to NOT use threading.' )"
"for every alternative in self.alternatives,",for alternative in self . alternatives :
"validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,","validate_slug = RegexValidator ( slug_re , _ ( ""Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens."" ) , 'invalid' )"
define the method dst with 2 arguments self and dt.,"def dst ( self , dt ) :"
"instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.",var_obj = Variable ( constant ) . resolve ( { } )
"convert value to uppercase, return the result.",return value . upper ( )
"if TypeError or ValueError exceptions are caught,","except ( TypeError , ValueError ) :"
define method value_encode with self class instance and val as arguments.,"def value_encode ( self , val ) :"
"call the function get_language, substitute the result for lang.",lang = get_language ( )
substitute second element of bits for tag.,tag = bits [ 1 ]
"call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,","T = [ F ( x ) for x in range ( 1 , l ) ]"
"split ip_str into parts by ':', for every hextet in the result,",for hextet in ip_str . split ( ':' ) :
return data.,return data
"call the __init__ method with arguments file and name, from the base class of the UploadedFile class.","super ( UploadedFile , self ) . __init__ ( file , name )"
substitute args for self.args.,self . args = args
from django.db import models into default name space.,from django . db import models
"if not,",else :
excluded_apps is an empty set.,excluded_apps = set ( )
day_field is a string '%s_day'.,day_field = '%s_day'
"raise an InvalidTemplateLibrary exception with an argument string ""Unsupported arguments to Library.tag: (%r, %r)"",","raise InvalidTemplateLibrary ( ""Unsupported arguments to "" ""Library.tag: (%r, %r)"" , ( name , compile_function ) )"
derive the class NonCapture from list base class.,class NonCapture ( list ) :
"call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.","result = user_function ( * args , ** kwds )"
"with the result renamed to fp, perform the following: write msgs to fp.",fp . write ( msgs )
"if not,",else :
from django.utils._os import safe_join into default name space.,from django . utils . _os import safe_join
"raise an RawPostDataException exception with an argument string ""You cannot access body after reading from request's data stream"".","raise RawPostDataException ( ""You cannot access body after reading from request's data stream"" )"
"keep_blank_values set to boolean True, encoding set to encoding. call the method appendlist with 2 arguments: key and value.","self . appendlist ( key , value )"
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.,"handler . addQuickElement ( ""name"" , item [ 'author_name' ] )"
"if middle ends with punctuation,",if middle . endswith ( punctuation ) :
"return string 'StopUpload: Consume request data, then halt.'.","return 'StopUpload: Consume request data, then halt.'"
substitute s without the first element for s.,s = s [ 1 : ]
"if not,",else :
"if not,",else :
import module django.,import django
"define convert method with self class instance, number, from_digits, to_digits and sign as arguments.","def convert ( self , number , from_digits , to_digits , sign ) :"
"call the method self.iterlists, return list of results.",return list ( self . iterlists ( ) )
"if not,",else :
"if not,",else :
"if rhs is an instance of SafeText,","if isinstance ( rhs , SafeText ) :"
"append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.","self . alternatives . append ( ( content , mimetype ) )"
"with the result renamed to fp, perform the following: call the method fp.write with an argument msgs.",fp . write ( msgs )
"raise CommandError exception with ""App '%s' does not have migrations (you cannot selectively sync unmigrated apps)"",","raise CommandError ( ""App '%s' does not have migrations (you cannot selectively sync unmigrated apps)"" % app_label )"
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.,from django . core . serializers . python import Deserializer as PythonDeserializer
"call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.",return self . has_previous ( ) or self . has_next ( )
"if value is an instance of str type,","if isinstance ( value , str ) :"
"call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.","date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )"
"remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.","end = kwargs . pop ( ""end"" , None )"
evaluate function has_bom with po_path as argument.,if has_bom ( po_path ) :
"substitute exc for self.settings_exception,",self . settings_exception = exc
self.namespaces is an empty list.,self . namespaces = [ ]
substitute value under the name key for bf.,bf = self [ name ]
"call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.","options , args = parser . parse_args ( argv [ 2 : ] )"
do nothing.,pass
"if not,",else :
"return an instance of EscapeBytes, created with an argument s.",return EscapeBytes ( s )
to_delete is an empty set.,to_delete = set ( )
define the method __getitem__ with an argument self.,"def __getitem__ ( self , index ) :"
"raise an TypeError exception with an argument string ""sep must be None or a string"".","raise TypeError ( ""sep must be None or a string"" )"
substitute node.source for e.django_template_source.,e . django_template_source = node . source
"boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False, return it if the key exists, if not return None. derive the class SelectMultiple from the Select base class.",class SelectMultiple ( Select ) :
call the method self.validate_key with argument key.,self . validate_key ( key )
substitute silent for self.silent.,self . silent = silent
"join source list elements from last till pos indexes into a string, substitute the result for piece.",piece = '' . join ( source [ last : pos ] )
"if col_name is not equal to new_name and field_notes is true,",if col_name != new_name and field_notes :
derive the class NullDevice.,class NullDevice :
if first element of str_number equals a string '-'.,if str_number [ 0 ] == '-' :
"third element of the result of the function sys.exc_info. define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.","def readline ( self , * args , ** kwargs ) :"
from django.core.management.sql import sql_create into default name space.,from django . core . management . sql import sql_create
"if retval is true,",if retval :
"if not,",else :
import module sys.,import sys
translation._catalog is an empty dictionary.,translation . _catalog = { }
derive the class DictConfigurator from the BaseConfigurator base class.,class DictConfigurator ( BaseConfigurator ) :
return boolean False.,return False
skip this loop iteration.,continue
define the method next_page_number with an argument self.,def next_page_number ( self ) :
return default.,return default
"get the value under the 'output' key of the options dictionary, substitute the result for output.",output = options . get ( 'output' )
"__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',","__all__ = [ 'utc' , 'get_fixed_timezone' , 'get_default_timezone' , 'get_default_timezone_name' , 'get_current_timezone' , 'get_current_timezone_name' , 'activate' , 'deactivate' , 'override' , 'localtime' , 'now' , 'is_aware' , 'is_na"